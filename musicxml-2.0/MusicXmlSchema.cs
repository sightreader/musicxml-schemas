//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// This code was generated by XmlSchemaClassGenerator version 2.0.0.0.
namespace MusicXmlSchema
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Xml.Serialization;


    /// <summary>
    /// <para>The above-below type is used to indicate whether one element appears above or below another element.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("above-below", Namespace = "")]
    public enum AboveBelow
    {

        [System.Xml.Serialization.XmlEnumAttribute("above")]
        Above,

        [System.Xml.Serialization.XmlEnumAttribute("below")]
        Below,
    }

    /// <summary>
    /// <para>The css-font-size type includes the CSS font sizes used as an alternative to a numeric point size.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("css-font-size", Namespace = "")]
    public enum CssFontSize
    {

        [System.Xml.Serialization.XmlEnumAttribute("xx-small")]
        XxSmall,

        [System.Xml.Serialization.XmlEnumAttribute("x-small")]
        XSmall,

        [System.Xml.Serialization.XmlEnumAttribute("small")]
        Small,

        [System.Xml.Serialization.XmlEnumAttribute("medium")]
        Medium,

        [System.Xml.Serialization.XmlEnumAttribute("large")]
        Large,

        [System.Xml.Serialization.XmlEnumAttribute("x-large")]
        XLarge,

        [System.Xml.Serialization.XmlEnumAttribute("xx-large")]
        XxLarge,
    }

    /// <summary>
    /// <para>The enclosure type describes the shape and presence / absence of an enclosure around text.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("enclosure", Namespace = "")]
    public enum Enclosure
    {

        [System.Xml.Serialization.XmlEnumAttribute("rectangle")]
        Rectangle,

        [System.Xml.Serialization.XmlEnumAttribute("oval")]
        Oval,

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
    }

    /// <summary>
    /// <para>The fermata-shape type represents the shape of the fermata sign. The empty value is equivalent to the normal value.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("fermata-shape", Namespace = "")]
    public enum FermataShape
    {

        [System.Xml.Serialization.XmlEnumAttribute("normal")]
        Normal,

        [System.Xml.Serialization.XmlEnumAttribute("angled")]
        Angled,

        [System.Xml.Serialization.XmlEnumAttribute("square")]
        Square,

        [System.Xml.Serialization.XmlEnumAttribute("")]
        Item,
    }

    /// <summary>
    /// <para>The font-style type represents a simplified version of the CSS font-style property.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("font-style", Namespace = "")]
    public enum FontStyle
    {

        [System.Xml.Serialization.XmlEnumAttribute("normal")]
        Normal,

        [System.Xml.Serialization.XmlEnumAttribute("italic")]
        Italic,
    }

    /// <summary>
    /// <para>The font-weight type represents a simplified version of the CSS font-weight property.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("font-weight", Namespace = "")]
    public enum FontWeight
    {

        [System.Xml.Serialization.XmlEnumAttribute("normal")]
        Normal,

        [System.Xml.Serialization.XmlEnumAttribute("bold")]
        Bold,
    }

    /// <summary>
    /// <para>The left-center-right type is used to define horizontal alignment and text justification.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("left-center-right", Namespace = "")]
    public enum LeftCenterRight
    {

        [System.Xml.Serialization.XmlEnumAttribute("left")]
        Left,

        [System.Xml.Serialization.XmlEnumAttribute("center")]
        Center,

        [System.Xml.Serialization.XmlEnumAttribute("right")]
        Right,
    }

    /// <summary>
    /// <para>The left-right type is used to indicate whether one element appears to the left or the right of another element.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("left-right", Namespace = "")]
    public enum LeftRight
    {

        [System.Xml.Serialization.XmlEnumAttribute("left")]
        Left,

        [System.Xml.Serialization.XmlEnumAttribute("right")]
        Right,
    }

    /// <summary>
    /// <para>The line-shape type distinguishes between straight and curved lines.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("line-shape", Namespace = "")]
    public enum LineShape
    {

        [System.Xml.Serialization.XmlEnumAttribute("straight")]
        Straight,

        [System.Xml.Serialization.XmlEnumAttribute("curved")]
        Curved,
    }

    /// <summary>
    /// <para>The line-type type distinguishes between solid, dashed, dotted, and wavy lines.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("line-type", Namespace = "")]
    public enum LineType
    {

        [System.Xml.Serialization.XmlEnumAttribute("solid")]
        Solid,

        [System.Xml.Serialization.XmlEnumAttribute("dashed")]
        Dashed,

        [System.Xml.Serialization.XmlEnumAttribute("dotted")]
        Dotted,

        [System.Xml.Serialization.XmlEnumAttribute("wavy")]
        Wavy,
    }

    /// <summary>
    /// <para>The over-under type is used to indicate whether the tips of curved lines such as slurs and ties are overhand (tips down) or underhand (tips up).</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("over-under", Namespace = "")]
    public enum OverUnder
    {

        [System.Xml.Serialization.XmlEnumAttribute("over")]
        Over,

        [System.Xml.Serialization.XmlEnumAttribute("under")]
        Under,
    }

    /// <summary>
    /// <para>The start-note type describes the starting note of trills and mordents for playback, relative to the current note.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("start-note", Namespace = "")]
    public enum StartNote
    {

        [System.Xml.Serialization.XmlEnumAttribute("upper")]
        Upper,

        [System.Xml.Serialization.XmlEnumAttribute("main")]
        Main,

        [System.Xml.Serialization.XmlEnumAttribute("below")]
        Below,
    }

    /// <summary>
    /// <para>The start-stop type is used for an attribute of musical elements that can either start or stop, such as tuplets, wedges, and lines.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("start-stop", Namespace = "")]
    public enum StartStop
    {

        [System.Xml.Serialization.XmlEnumAttribute("start")]
        Start,

        [System.Xml.Serialization.XmlEnumAttribute("stop")]
        Stop,
    }

    /// <summary>
    /// <para>The start-stop-continue type is used for an attribute of musical elements that can either start or stop, but also need to refer to an intermediate point in the symbol, as for complex slurs.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("start-stop-continue", Namespace = "")]
    public enum StartStopContinue
    {

        [System.Xml.Serialization.XmlEnumAttribute("start")]
        Start,

        [System.Xml.Serialization.XmlEnumAttribute("stop")]
        Stop,

        [System.Xml.Serialization.XmlEnumAttribute("continue")]
        Continue,
    }

    /// <summary>
    /// <para>The start-stop-single type is used for an attribute of musical elements that can be used for either multi-note or single-note musical elements, as for tremolos.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("start-stop-single", Namespace = "")]
    public enum StartStopSingle
    {

        [System.Xml.Serialization.XmlEnumAttribute("start")]
        Start,

        [System.Xml.Serialization.XmlEnumAttribute("stop")]
        Stop,

        [System.Xml.Serialization.XmlEnumAttribute("single")]
        Single,
    }

    /// <summary>
    /// <para>The symbol-size type is used to indicate full vs. cue-sized vs. oversized symbols. The large value for oversized symbols was added in version 1.1.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("symbol-size", Namespace = "")]
    public enum SymbolSize
    {

        [System.Xml.Serialization.XmlEnumAttribute("full")]
        Full,

        [System.Xml.Serialization.XmlEnumAttribute("cue")]
        Cue,

        [System.Xml.Serialization.XmlEnumAttribute("large")]
        Large,
    }

    /// <summary>
    /// <para>The text-direction type is used to adjust and override the Unicode bidirectional text algorithm, similar to the W3C Internationalization Tag Set recommendation. Values are ltr (left-to-right embed), rtl (right-to-left embed), lro (left-to-right bidi-override), and rlo (right-to-left bidi-override). The default value is ltr. This type is typically used by applications that store text in left-to-right visual order rather than logical order. Such applications can use the lro value to better communicate with other applications that more fully support bidirectional text.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("text-direction", Namespace = "")]
    public enum TextDirection
    {

        [System.Xml.Serialization.XmlEnumAttribute("ltr")]
        Ltr,

        [System.Xml.Serialization.XmlEnumAttribute("rtl")]
        Rtl,

        [System.Xml.Serialization.XmlEnumAttribute("lro")]
        Lro,

        [System.Xml.Serialization.XmlEnumAttribute("rlo")]
        Rlo,
    }

    /// <summary>
    /// <para>The top-bottom type is used to indicate the top or bottom part of a vertical shape like non-arpeggiate.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("top-bottom", Namespace = "")]
    public enum TopBottom
    {

        [System.Xml.Serialization.XmlEnumAttribute("top")]
        Top,

        [System.Xml.Serialization.XmlEnumAttribute("bottom")]
        Bottom,
    }

    /// <summary>
    /// <para>The trill-step type describes the alternating note of trills and mordents for playback, relative to the current note.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("trill-step", Namespace = "")]
    public enum TrillStep
    {

        [System.Xml.Serialization.XmlEnumAttribute("whole")]
        Whole,

        [System.Xml.Serialization.XmlEnumAttribute("half")]
        Half,

        [System.Xml.Serialization.XmlEnumAttribute("unison")]
        Unison,
    }

    /// <summary>
    /// <para>The two-note-turn type describes the ending notes of trills and mordents for playback, relative to the current note.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("two-note-turn", Namespace = "")]
    public enum TwoNoteTurn
    {

        [System.Xml.Serialization.XmlEnumAttribute("whole")]
        Whole,

        [System.Xml.Serialization.XmlEnumAttribute("half")]
        Half,

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
    }

    /// <summary>
    /// <para>The up-down type is used for arrow direction, indicating which way the tip is pointing.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("up-down", Namespace = "")]
    public enum UpDown
    {

        [System.Xml.Serialization.XmlEnumAttribute("up")]
        Up,

        [System.Xml.Serialization.XmlEnumAttribute("down")]
        Down,
    }

    /// <summary>
    /// <para>The upright-inverted type describes the appearance of a fermata element. The value is upright if not specified.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("upright-inverted", Namespace = "")]
    public enum UprightInverted
    {

        [System.Xml.Serialization.XmlEnumAttribute("upright")]
        Upright,

        [System.Xml.Serialization.XmlEnumAttribute("inverted")]
        Inverted,
    }

    /// <summary>
    /// <para>The valign type is used to indicate vertical alignment to the top, middle, bottom, or baseline of the text. Defaults are implementation-dependent.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("valign", Namespace = "")]
    public enum Valign
    {

        [System.Xml.Serialization.XmlEnumAttribute("top")]
        Top,

        [System.Xml.Serialization.XmlEnumAttribute("middle")]
        Middle,

        [System.Xml.Serialization.XmlEnumAttribute("bottom")]
        Bottom,

        [System.Xml.Serialization.XmlEnumAttribute("baseline")]
        Baseline,
    }

    /// <summary>
    /// <para>The valign-image type is used to indicate vertical alignment for images and graphics, so it does not include a baseline value. Defaults are implementation-dependent.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("valign-image", Namespace = "")]
    public enum ValignImage
    {

        [System.Xml.Serialization.XmlEnumAttribute("top")]
        Top,

        [System.Xml.Serialization.XmlEnumAttribute("middle")]
        Middle,

        [System.Xml.Serialization.XmlEnumAttribute("bottom")]
        Bottom,
    }

    /// <summary>
    /// <para>The yes-no type is used for boolean-like attributes. We cannot use W3C XML Schema booleans due to their restrictions on expression of boolean values.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("yes-no", Namespace = "")]
    public enum YesNo
    {

        [System.Xml.Serialization.XmlEnumAttribute("yes")]
        Yes,

        [System.Xml.Serialization.XmlEnumAttribute("no")]
        No,
    }

    /// <summary>
    /// <para>The clef-sign element represents the different clef symbols.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("clef-sign", Namespace = "")]
    public enum ClefSign
    {

        G,

        F,

        C,

        [System.Xml.Serialization.XmlEnumAttribute("percussion")]
        Percussion,

        TAB,

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
    }

    /// <summary>
    /// <para>The show-frets type indicates whether to show tablature frets as numbers (0, 1, 2) or letters (a, b, c). The default choice is numbers.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("show-frets", Namespace = "")]
    public enum ShowFrets
    {

        [System.Xml.Serialization.XmlEnumAttribute("numbers")]
        Numbers,

        [System.Xml.Serialization.XmlEnumAttribute("letters")]
        Letters,
    }

    /// <summary>
    /// <para>The staff-type value can be ossia, cue, editorial, regular, or alternate. An alternate staff indicates one that shares the same musical data as the prior staff, but displayed differently (e.g., treble and bass clef, standard notation and tab).</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("staff-type", Namespace = "")]
    public enum StaffType
    {

        [System.Xml.Serialization.XmlEnumAttribute("ossia")]
        Ossia,

        [System.Xml.Serialization.XmlEnumAttribute("cue")]
        Cue,

        [System.Xml.Serialization.XmlEnumAttribute("editorial")]
        Editorial,

        [System.Xml.Serialization.XmlEnumAttribute("regular")]
        Regular,

        [System.Xml.Serialization.XmlEnumAttribute("alternate")]
        Alternate,
    }

    /// <summary>
    /// <para>The time-symbol type indicates how to display a time signature. The normal value is the usual fractional display, and is the implied symbol type if none is specified. Other options are the common and cut time symbols, as well as a single number with an implied denominator.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("time-symbol", Namespace = "")]
    public enum TimeSymbol
    {

        [System.Xml.Serialization.XmlEnumAttribute("common")]
        Common,

        [System.Xml.Serialization.XmlEnumAttribute("cut")]
        Cut,

        [System.Xml.Serialization.XmlEnumAttribute("single-number")]
        SingleNumber,

        [System.Xml.Serialization.XmlEnumAttribute("normal")]
        Normal,
    }

    /// <summary>
    /// <para>The backward-forward type is used to specify repeat directions. The start of the repeat has a forward direction while the end of the repeat has a backward direction.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("backward-forward", Namespace = "")]
    public enum BackwardForward
    {

        [System.Xml.Serialization.XmlEnumAttribute("backward")]
        Backward,

        [System.Xml.Serialization.XmlEnumAttribute("forward")]
        Forward,
    }

    /// <summary>
    /// <para>The bar-style type represents barline style information. Choices are regular, dotted, dashed, heavy, light-light, light-heavy, heavy-light, heavy-heavy, tick (a short stroke through the top line), short (a partial barline between the 2nd and 4th lines), and none.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("bar-style", Namespace = "")]
    public enum BarStyle
    {

        [System.Xml.Serialization.XmlEnumAttribute("regular")]
        Regular,

        [System.Xml.Serialization.XmlEnumAttribute("dotted")]
        Dotted,

        [System.Xml.Serialization.XmlEnumAttribute("dashed")]
        Dashed,

        [System.Xml.Serialization.XmlEnumAttribute("heavy")]
        Heavy,

        [System.Xml.Serialization.XmlEnumAttribute("light-light")]
        LightLight,

        [System.Xml.Serialization.XmlEnumAttribute("light-heavy")]
        LightHeavy,

        [System.Xml.Serialization.XmlEnumAttribute("heavy-light")]
        HeavyLight,

        [System.Xml.Serialization.XmlEnumAttribute("heavy-heavy")]
        HeavyHeavy,

        [System.Xml.Serialization.XmlEnumAttribute("tick")]
        Tick,

        [System.Xml.Serialization.XmlEnumAttribute("short")]
        Short,

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
    }

    /// <summary>
    /// <para>The right-left-middle type is used to specify barline location.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("right-left-middle", Namespace = "")]
    public enum RightLeftMiddle
    {

        [System.Xml.Serialization.XmlEnumAttribute("right")]
        Right,

        [System.Xml.Serialization.XmlEnumAttribute("left")]
        Left,

        [System.Xml.Serialization.XmlEnumAttribute("middle")]
        Middle,
    }

    /// <summary>
    /// <para>The start-stop-discontinue type is used to specify ending types. Typically, the start type is associated with the left barline of the first measure in an ending. The stop and discontinue types are associated with the right barline of the last measure in an ending. Stop is used when the ending mark concludes with a downward jog, as is typical for first endings. Discontinue is used when there is no downward jog, as is typical for second endings that do not conclude a piece.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("start-stop-discontinue", Namespace = "")]
    public enum StartStopDiscontinue
    {

        [System.Xml.Serialization.XmlEnumAttribute("start")]
        Start,

        [System.Xml.Serialization.XmlEnumAttribute("stop")]
        Stop,

        [System.Xml.Serialization.XmlEnumAttribute("discontinue")]
        Discontinue,
    }

    /// <summary>
    /// <para>The degree-type-value type indicates whether the current degree element is an addition, alteration, or subtraction to the kind of the current chord in the harmony element.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("degree-type-value", Namespace = "")]
    public enum DegreeTypeValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("add")]
        Add,

        [System.Xml.Serialization.XmlEnumAttribute("alter")]
        Alter,

        [System.Xml.Serialization.XmlEnumAttribute("subtract")]
        Subtract,
    }

    /// <summary>
    /// <para>The harmony-type type differentiates different types of harmonies when alternate harmonies are possible. Explicit harmonies have all note present in the music; implied have some notes missing but implied; alternate represents alternate analyses.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("harmony-type", Namespace = "")]
    public enum HarmonyType
    {

        [System.Xml.Serialization.XmlEnumAttribute("explicit")]
        Explicit,

        [System.Xml.Serialization.XmlEnumAttribute("implied")]
        Implied,

        [System.Xml.Serialization.XmlEnumAttribute("alternate")]
        Alternate,
    }

    /// <summary>
    /// <para>A kind-value indicates the type of chord. Degree elements can then add, subtract, or alter from these starting points. Values include:
    ///	
    ///Triads:
    ///	major (major third, perfect fifth)
    ///	minor (minor third, perfect fifth)
    ///	augmented (major third, augmented fifth)
    ///	diminished (minor third, diminished fifth)
    ///Sevenths:
    ///	dominant (major triad, minor seventh)
    ///	major-seventh (major triad, major seventh)
    ///	minor-seventh (minor triad, minor seventh)
    ///	diminished-seventh (diminished triad, diminished seventh)
    ///	augmented-seventh (augmented triad, minor seventh)
    ///	half-diminished (diminished triad, minor seventh)
    ///	major-minor (minor triad, major seventh)
    ///Sixths:
    ///	major-sixth (major triad, added sixth)
    ///	minor-sixth (minor triad, added sixth)
    ///Ninths:
    ///	dominant-ninth (dominant-seventh, major ninth)
    ///	major-ninth (major-seventh, major ninth)
    ///	minor-ninth (minor-seventh, major ninth)
    ///11ths (usually as the basis for alteration):
    ///	dominant-11th (dominant-ninth, perfect 11th)
    ///	major-11th (major-ninth, perfect 11th)
    ///	minor-11th (minor-ninth, perfect 11th)
    ///13ths (usually as the basis for alteration):
    ///	dominant-13th (dominant-11th, major 13th)
    ///	major-13th (major-11th, major 13th)
    ///	minor-13th (minor-11th, major 13th)
    ///Suspended:
    ///	suspended-second (major second, perfect fifth)
    ///	suspended-fourth (perfect fourth, perfect fifth)
    ///Functional sixths:
    ///	Neapolitan
    ///	Italian
    ///	French
    ///	German
    ///Other:
    ///	pedal (pedal-point bass)
    ///	power (perfect fifth)
    ///	Tristan
    ///	
    ///The "other" kind is used when the harmony is entirely composed of add elements. The "none" kind is used to explicitly encode absence of chords or functional harmony.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("kind-value", Namespace = "")]
    public enum KindValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("major")]
        Major,

        [System.Xml.Serialization.XmlEnumAttribute("minor")]
        Minor,

        [System.Xml.Serialization.XmlEnumAttribute("augmented")]
        Augmented,

        [System.Xml.Serialization.XmlEnumAttribute("diminished")]
        Diminished,

        [System.Xml.Serialization.XmlEnumAttribute("dominant")]
        Dominant,

        [System.Xml.Serialization.XmlEnumAttribute("major-seventh")]
        MajorSeventh,

        [System.Xml.Serialization.XmlEnumAttribute("minor-seventh")]
        MinorSeventh,

        [System.Xml.Serialization.XmlEnumAttribute("diminished-seventh")]
        DiminishedSeventh,

        [System.Xml.Serialization.XmlEnumAttribute("augmented-seventh")]
        AugmentedSeventh,

        [System.Xml.Serialization.XmlEnumAttribute("half-diminished")]
        HalfDiminished,

        [System.Xml.Serialization.XmlEnumAttribute("major-minor")]
        MajorMinor,

        [System.Xml.Serialization.XmlEnumAttribute("major-sixth")]
        MajorSixth,

        [System.Xml.Serialization.XmlEnumAttribute("minor-sixth")]
        MinorSixth,

        [System.Xml.Serialization.XmlEnumAttribute("dominant-ninth")]
        DominantNinth,

        [System.Xml.Serialization.XmlEnumAttribute("major-ninth")]
        MajorNinth,

        [System.Xml.Serialization.XmlEnumAttribute("minor-ninth")]
        MinorNinth,

        [System.Xml.Serialization.XmlEnumAttribute("dominant-11th")]
        Dominant11Th,

        [System.Xml.Serialization.XmlEnumAttribute("major-11th")]
        Major11Th,

        [System.Xml.Serialization.XmlEnumAttribute("minor-11th")]
        Minor11Th,

        [System.Xml.Serialization.XmlEnumAttribute("dominant-13th")]
        Dominant13Th,

        [System.Xml.Serialization.XmlEnumAttribute("major-13th")]
        Major13Th,

        [System.Xml.Serialization.XmlEnumAttribute("minor-13th")]
        Minor13Th,

        [System.Xml.Serialization.XmlEnumAttribute("suspended-second")]
        SuspendedSecond,

        [System.Xml.Serialization.XmlEnumAttribute("suspended-fourth")]
        SuspendedFourth,

        Neapolitan,

        Italian,

        French,

        German,

        [System.Xml.Serialization.XmlEnumAttribute("pedal")]
        Pedal,

        [System.Xml.Serialization.XmlEnumAttribute("power")]
        Power,

        Tristan,

        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
    }

    /// <summary>
    /// <para>The line-end type specifies if there is a jog up or down (or both), an arrow, or nothing at the start or end of a bracket.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("line-end", Namespace = "")]
    public enum LineEnd
    {

        [System.Xml.Serialization.XmlEnumAttribute("up")]
        Up,

        [System.Xml.Serialization.XmlEnumAttribute("down")]
        Down,

        [System.Xml.Serialization.XmlEnumAttribute("both")]
        Both,

        [System.Xml.Serialization.XmlEnumAttribute("arrow")]
        Arrow,

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
    }

    /// <summary>
    /// <para>The measure-numbering-value type describes how measure numbers are displayed on this part: no numbers, numbers every measure, or numbers every system.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("measure-numbering-value", Namespace = "")]
    public enum MeasureNumberingValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,

        [System.Xml.Serialization.XmlEnumAttribute("measure")]
        Measure,

        [System.Xml.Serialization.XmlEnumAttribute("system")]
        System,
    }

    /// <summary>
    /// <para>The rehearsal-enclosure type describes the shape and presence / absence of an enclosure around rehearsal text.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("rehearsal-enclosure", Namespace = "")]
    public enum RehearsalEnclosure
    {

        [System.Xml.Serialization.XmlEnumAttribute("square")]
        Square,

        [System.Xml.Serialization.XmlEnumAttribute("circle")]
        Circle,

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
    }

    /// <summary>
    /// <para>The start-stop-change type is used to distinguish types of pedal directions.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("start-stop-change", Namespace = "")]
    public enum StartStopChange
    {

        [System.Xml.Serialization.XmlEnumAttribute("start")]
        Start,

        [System.Xml.Serialization.XmlEnumAttribute("stop")]
        Stop,

        [System.Xml.Serialization.XmlEnumAttribute("change")]
        Change,
    }

    /// <summary>
    /// <para>The up-down-stop type is used for octave-shift elements, indicating the direction of the shift from their true pitched values because of printing difficulty.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("up-down-stop", Namespace = "")]
    public enum UpDownStop
    {

        [System.Xml.Serialization.XmlEnumAttribute("up")]
        Up,

        [System.Xml.Serialization.XmlEnumAttribute("down")]
        Down,

        [System.Xml.Serialization.XmlEnumAttribute("stop")]
        Stop,
    }

    /// <summary>
    /// <para>The wedge type is crescendo for the start of a wedge that is closed at the left side, diminuendo for the start of a wedge that is closed on the right side, and stop for the end of a wedge.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("wedge-type", Namespace = "")]
    public enum WedgeType
    {

        [System.Xml.Serialization.XmlEnumAttribute("crescendo")]
        Crescendo,

        [System.Xml.Serialization.XmlEnumAttribute("diminuendo")]
        Diminuendo,

        [System.Xml.Serialization.XmlEnumAttribute("stop")]
        Stop,
    }

    /// <summary>
    /// <para>The margin-type type specifies whether margins apply to even page, odd pages, or both.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("margin-type", Namespace = "")]
    public enum MarginType
    {

        [System.Xml.Serialization.XmlEnumAttribute("odd")]
        Odd,

        [System.Xml.Serialization.XmlEnumAttribute("even")]
        Even,

        [System.Xml.Serialization.XmlEnumAttribute("both")]
        Both,
    }

    /// <summary>
    /// <para>The note-size-type type indicates the type of note being defined by a note-size element. The grace type is used for notes of cue size that that include a grace element. The cue type is used for all other notes with cue size, whether defined explicitly or implicitly via a cue element. The large type is used for notes of large size.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("note-size-type", Namespace = "")]
    public enum NoteSizeType
    {

        [System.Xml.Serialization.XmlEnumAttribute("cue")]
        Cue,

        [System.Xml.Serialization.XmlEnumAttribute("grace")]
        Grace,

        [System.Xml.Serialization.XmlEnumAttribute("large")]
        Large,
    }

    /// <summary>
    /// <para>The accidental-value type represents notated accidentals supported by MusicXML. In the MusicXML 2.0 DTD this was a string with values that could be included. The XSD strengthens the data typing to an enumerated list.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("accidental-value", Namespace = "")]
    public enum AccidentalValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("sharp")]
        Sharp,

        [System.Xml.Serialization.XmlEnumAttribute("natural")]
        Natural,

        [System.Xml.Serialization.XmlEnumAttribute("flat")]
        Flat,

        [System.Xml.Serialization.XmlEnumAttribute("double-sharp")]
        DoubleSharp,

        [System.Xml.Serialization.XmlEnumAttribute("sharp-sharp")]
        SharpSharp,

        [System.Xml.Serialization.XmlEnumAttribute("flat-flat")]
        FlatFlat,

        [System.Xml.Serialization.XmlEnumAttribute("natural-sharp")]
        NaturalSharp,

        [System.Xml.Serialization.XmlEnumAttribute("natural-flat")]
        NaturalFlat,

        [System.Xml.Serialization.XmlEnumAttribute("quarter-flat")]
        QuarterFlat,

        [System.Xml.Serialization.XmlEnumAttribute("quarter-sharp")]
        QuarterSharp,

        [System.Xml.Serialization.XmlEnumAttribute("three-quarters-flat")]
        ThreeQuartersFlat,

        [System.Xml.Serialization.XmlEnumAttribute("three-quarters-sharp")]
        ThreeQuartersSharp,
    }

    /// <summary>
    /// <para>The beam-value type represents the type of beam associated with each of 6 beam levels (up to 256th notes) available for each note.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("beam-value", Namespace = "")]
    public enum BeamValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("begin")]
        Begin,

        [System.Xml.Serialization.XmlEnumAttribute("continue")]
        Continue,

        [System.Xml.Serialization.XmlEnumAttribute("end")]
        End,

        [System.Xml.Serialization.XmlEnumAttribute("forward hook")]
        ForwardHook,

        [System.Xml.Serialization.XmlEnumAttribute("backward hook")]
        BackwardHook,
    }

    /// <summary>
    /// <para>The fan type represents the type of beam fanning present on a note, used to represent accelerandos and ritardandos.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("fan", Namespace = "")]
    public enum Fan
    {

        [System.Xml.Serialization.XmlEnumAttribute("accel")]
        Accel,

        [System.Xml.Serialization.XmlEnumAttribute("rit")]
        Rit,

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
    }

    /// <summary>
    /// <para>The note-type type is used for the MusicXML type element and represents the graphic note type, from 256th (shortest) to long (longest).</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("note-type-value", Namespace = "")]
    public enum NoteTypeValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("256th")]
        Item256Th,

        [System.Xml.Serialization.XmlEnumAttribute("128th")]
        Item128Th,

        [System.Xml.Serialization.XmlEnumAttribute("64th")]
        Item64Th,

        [System.Xml.Serialization.XmlEnumAttribute("32nd")]
        Item32Nd,

        [System.Xml.Serialization.XmlEnumAttribute("16th")]
        Item16Th,

        [System.Xml.Serialization.XmlEnumAttribute("eighth")]
        Eighth,

        [System.Xml.Serialization.XmlEnumAttribute("quarter")]
        Quarter,

        [System.Xml.Serialization.XmlEnumAttribute("half")]
        Half,

        [System.Xml.Serialization.XmlEnumAttribute("whole")]
        Whole,

        [System.Xml.Serialization.XmlEnumAttribute("breve")]
        Breve,

        [System.Xml.Serialization.XmlEnumAttribute("long")]
        Long,
    }

    /// <summary>
    /// <para>The notehead type indicates shapes other than the open and closed ovals associated with note durations. The values do, re, mi, fa, so, la, and ti correspond to Aikin's 7-shape system.
    ///
    ///The arrow shapes differ from triangle and inverted triangle by being centered on the stem. Slashed and back slashed notes include both the normal notehead and a slash. The triangle shape has the tip of the triangle pointing up; the inverted triangle shape has the tip of the triangle pointing down.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("notehead-value", Namespace = "")]
    public enum NoteheadValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("slash")]
        Slash,

        [System.Xml.Serialization.XmlEnumAttribute("triangle")]
        Triangle,

        [System.Xml.Serialization.XmlEnumAttribute("diamond")]
        Diamond,

        [System.Xml.Serialization.XmlEnumAttribute("square")]
        Square,

        [System.Xml.Serialization.XmlEnumAttribute("cross")]
        Cross,

        [System.Xml.Serialization.XmlEnumAttribute("x")]
        X,

        [System.Xml.Serialization.XmlEnumAttribute("circle-x")]
        CircleX,

        [System.Xml.Serialization.XmlEnumAttribute("inverted triangle")]
        InvertedTriangle,

        [System.Xml.Serialization.XmlEnumAttribute("arrow down")]
        ArrowDown,

        [System.Xml.Serialization.XmlEnumAttribute("arrow up")]
        ArrowUp,

        [System.Xml.Serialization.XmlEnumAttribute("slashed")]
        Slashed,

        [System.Xml.Serialization.XmlEnumAttribute("back slashed")]
        BackSlashed,

        [System.Xml.Serialization.XmlEnumAttribute("normal")]
        Normal,

        [System.Xml.Serialization.XmlEnumAttribute("cluster")]
        Cluster,

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,

        [System.Xml.Serialization.XmlEnumAttribute("do")]
        Do,

        [System.Xml.Serialization.XmlEnumAttribute("re")]
        Re,

        [System.Xml.Serialization.XmlEnumAttribute("mi")]
        Mi,

        [System.Xml.Serialization.XmlEnumAttribute("fa")]
        Fa,

        [System.Xml.Serialization.XmlEnumAttribute("so")]
        So,

        [System.Xml.Serialization.XmlEnumAttribute("la")]
        La,

        [System.Xml.Serialization.XmlEnumAttribute("ti")]
        Ti,
    }

    /// <summary>
    /// <para>The show-tuplet type indicates whether to show a part of a tuplet relating to the tuplet-actual element, both the tuplet-actual and tuplet-normal elements, or neither.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("show-tuplet", Namespace = "")]
    public enum ShowTuplet
    {

        [System.Xml.Serialization.XmlEnumAttribute("actual")]
        Actual,

        [System.Xml.Serialization.XmlEnumAttribute("both")]
        Both,

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
    }

    /// <summary>
    /// <para>The stem type represents the notated stem direction.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("stem-value", Namespace = "")]
    public enum StemValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("down")]
        Down,

        [System.Xml.Serialization.XmlEnumAttribute("up")]
        Up,

        [System.Xml.Serialization.XmlEnumAttribute("double")]
        Double,

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
    }

    /// <summary>
    /// <para>The step type represents a step of the diatonic scale, represented using the English letters A through G.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("step", Namespace = "")]
    public enum Step
    {

        A,

        B,

        C,

        D,

        E,

        F,

        G,
    }

    /// <summary>
    /// <para>Lyric hyphenation is indicated by the syllabic type. The single, begin, end, and middle values represent single-syllable words, word-beginning syllables, word-ending syllables, and mid-word syllables, respectively.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("syllabic", Namespace = "")]
    public enum Syllabic
    {

        [System.Xml.Serialization.XmlEnumAttribute("single")]
        Single,

        [System.Xml.Serialization.XmlEnumAttribute("begin")]
        Begin,

        [System.Xml.Serialization.XmlEnumAttribute("end")]
        End,

        [System.Xml.Serialization.XmlEnumAttribute("middle")]
        Middle,
    }

    /// <summary>
    /// <para>The group-barline-value type indicates if the group should have common barlines.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("group-barline-value", Namespace = "")]
    public enum GroupBarlineValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("yes")]
        Yes,

        [System.Xml.Serialization.XmlEnumAttribute("no")]
        No,

        Mensurstrich,
    }

    /// <summary>
    /// <para>The group-symbol-value type indicates how the symbol for a group is indicated in the score. The default value is none.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("group-symbol-value", Namespace = "")]
    public enum GroupSymbolValue
    {

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,

        [System.Xml.Serialization.XmlEnumAttribute("brace")]
        Brace,

        [System.Xml.Serialization.XmlEnumAttribute("line")]
        Line,

        [System.Xml.Serialization.XmlEnumAttribute("bracket")]
        Bracket,
    }

    /// <summary>
    /// <para>The accidental-text type represents an element with an accidental value and text-formatting attributes.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("accidental-text", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AccidentalText
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public AccidentalValue Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("justify", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LeftCenterRight Justify { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Justify-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Justify property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool JustifySpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("halign", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LeftCenterRight Halign { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Halign-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Halign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HalignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("valign", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Valign Valign { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Valign-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Valign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValignSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("underline", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Underline { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("overline", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Overline { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("line-through", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string LineThrough { get; set; }

        /// <summary>
        /// <para>The rotation-degrees type specifies rotation, pan, and elevation values in degrees. Values range from -180 to 180.</para>
        /// <para xml:lang="en">Minimum inclusive value: -180.</para>
        /// <para xml:lang="en">Maximum inclusive value: 180.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-180", "180")]
        [System.Xml.Serialization.XmlAttributeAttribute("rotation", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal Rotation { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Rotation-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Rotation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RotationSpecified { get; set; }

        /// <summary>
        /// <para>The number-or-normal values can be either a decimal number or the string "normal". This is used by the line-height and letter-spacing attributes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("letter-spacing", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string LetterSpacing { get; set; }

        /// <summary>
        /// <para>The number-or-normal values can be either a decimal number or the string "normal". This is used by the line-height and letter-spacing attributes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("line-height", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string LineHeight { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("lang", Namespace = "http://www.w3.org/XML/1998/namespace")]
        public string Lang { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("dir", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public TextDirection Dir { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Dir-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Dir property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DirSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("enclosure", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Enclosure Enclosure { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Enclosure-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Enclosure property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnclosureSpecified { get; set; }
    }

    /// <summary>
    /// <para>Dynamics can be associated either with a note or a general musical direction. To avoid inconsistencies between and amongst the letter abbreviations for dynamics (what is sf vs. sfz, standing alone or with a trailing dynamic that is not always piano), we use the actual letters as the names of these dynamic elements. The other-dynamics element allows other dynamic marks that are not covered here, but many of those should perhaps be included in a more general musical direction element. Dynamics elements may also be combined to create marks not covered by a single element, such as sfmp.
    ///	
    ///These letter dynamic symbols are separated from crescendo, decrescendo, and wedge indications. Dynamic representation is inconsistent in scores. Many things are assumed by the composer and left out, such as returns to original dynamics. Systematic representations are quite complex: for example, Humdrum has at least 3 representation formats related to dynamics. The MusicXML format captures what is in the score, but does not try to be optimal for analysis or synthesis of dynamics.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("dynamics", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Dynamics
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> p;

        [System.Xml.Serialization.XmlElementAttribute("p", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Empty> P
        {
            get
            {
                return this.p;
            }
            private set
            {
                this.p = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die P-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the P collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PSpecified
        {
            get
            {
                return (this.P.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Dynamics" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Dynamics" /> class.</para>
        /// </summary>
        public Dynamics()
        {
            this.p = new System.Collections.ObjectModel.Collection<Empty>();
            this.pp = new System.Collections.ObjectModel.Collection<Empty>();
            this.ppp = new System.Collections.ObjectModel.Collection<Empty>();
            this.pppp = new System.Collections.ObjectModel.Collection<Empty>();
            this.ppppp = new System.Collections.ObjectModel.Collection<Empty>();
            this.pppppp = new System.Collections.ObjectModel.Collection<Empty>();
            this.f = new System.Collections.ObjectModel.Collection<Empty>();
            this.ff = new System.Collections.ObjectModel.Collection<Empty>();
            this.fff = new System.Collections.ObjectModel.Collection<Empty>();
            this.ffff = new System.Collections.ObjectModel.Collection<Empty>();
            this.fffff = new System.Collections.ObjectModel.Collection<Empty>();
            this.ffffff = new System.Collections.ObjectModel.Collection<Empty>();
            this.mp = new System.Collections.ObjectModel.Collection<Empty>();
            this.mf = new System.Collections.ObjectModel.Collection<Empty>();
            this.sf = new System.Collections.ObjectModel.Collection<Empty>();
            this.sfp = new System.Collections.ObjectModel.Collection<Empty>();
            this.sfpp = new System.Collections.ObjectModel.Collection<Empty>();
            this.fp = new System.Collections.ObjectModel.Collection<Empty>();
            this.rf = new System.Collections.ObjectModel.Collection<Empty>();
            this.rfz = new System.Collections.ObjectModel.Collection<Empty>();
            this.sfz = new System.Collections.ObjectModel.Collection<Empty>();
            this.sffz = new System.Collections.ObjectModel.Collection<Empty>();
            this.fz = new System.Collections.ObjectModel.Collection<Empty>();
            this.otherDynamics = new System.Collections.ObjectModel.Collection<string>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> pp;

        [System.Xml.Serialization.XmlElementAttribute("pp", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Empty> Pp
        {
            get
            {
                return this.pp;
            }
            private set
            {
                this.pp = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Pp-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Pp collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PpSpecified
        {
            get
            {
                return (this.Pp.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> ppp;

        [System.Xml.Serialization.XmlElementAttribute("ppp", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Empty> Ppp
        {
            get
            {
                return this.ppp;
            }
            private set
            {
                this.ppp = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Ppp-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Ppp collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PppSpecified
        {
            get
            {
                return (this.Ppp.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> pppp;

        [System.Xml.Serialization.XmlElementAttribute("pppp", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Empty> Pppp
        {
            get
            {
                return this.pppp;
            }
            private set
            {
                this.pppp = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Pppp-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Pppp collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PpppSpecified
        {
            get
            {
                return (this.Pppp.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> ppppp;

        [System.Xml.Serialization.XmlElementAttribute("ppppp", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Empty> Ppppp
        {
            get
            {
                return this.ppppp;
            }
            private set
            {
                this.ppppp = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Ppppp-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Ppppp collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PppppSpecified
        {
            get
            {
                return (this.Ppppp.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> pppppp;

        [System.Xml.Serialization.XmlElementAttribute("pppppp", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Empty> Pppppp
        {
            get
            {
                return this.pppppp;
            }
            private set
            {
                this.pppppp = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Pppppp-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Pppppp collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PpppppSpecified
        {
            get
            {
                return (this.Pppppp.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> f;

        [System.Xml.Serialization.XmlElementAttribute("f", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Empty> F
        {
            get
            {
                return this.f;
            }
            private set
            {
                this.f = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die F-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the F collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FSpecified
        {
            get
            {
                return (this.F.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> ff;

        [System.Xml.Serialization.XmlElementAttribute("ff", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Empty> Ff
        {
            get
            {
                return this.ff;
            }
            private set
            {
                this.ff = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Ff-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Ff collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FfSpecified
        {
            get
            {
                return (this.Ff.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> fff;

        [System.Xml.Serialization.XmlElementAttribute("fff", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Empty> Fff
        {
            get
            {
                return this.fff;
            }
            private set
            {
                this.fff = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Fff-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Fff collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FffSpecified
        {
            get
            {
                return (this.Fff.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> ffff;

        [System.Xml.Serialization.XmlElementAttribute("ffff", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Empty> Ffff
        {
            get
            {
                return this.ffff;
            }
            private set
            {
                this.ffff = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Ffff-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Ffff collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FfffSpecified
        {
            get
            {
                return (this.Ffff.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> fffff;

        [System.Xml.Serialization.XmlElementAttribute("fffff", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Empty> Fffff
        {
            get
            {
                return this.fffff;
            }
            private set
            {
                this.fffff = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Fffff-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Fffff collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FffffSpecified
        {
            get
            {
                return (this.Fffff.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> ffffff;

        [System.Xml.Serialization.XmlElementAttribute("ffffff", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Empty> Ffffff
        {
            get
            {
                return this.ffffff;
            }
            private set
            {
                this.ffffff = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Ffffff-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Ffffff collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FfffffSpecified
        {
            get
            {
                return (this.Ffffff.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> mp;

        [System.Xml.Serialization.XmlElementAttribute("mp", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Empty> Mp
        {
            get
            {
                return this.mp;
            }
            private set
            {
                this.mp = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Mp-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Mp collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MpSpecified
        {
            get
            {
                return (this.Mp.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> mf;

        [System.Xml.Serialization.XmlElementAttribute("mf", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Empty> Mf
        {
            get
            {
                return this.mf;
            }
            private set
            {
                this.mf = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Mf-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Mf collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MfSpecified
        {
            get
            {
                return (this.Mf.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> sf;

        [System.Xml.Serialization.XmlElementAttribute("sf", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Empty> Sf
        {
            get
            {
                return this.sf;
            }
            private set
            {
                this.sf = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Sf-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Sf collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SfSpecified
        {
            get
            {
                return (this.Sf.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> sfp;

        [System.Xml.Serialization.XmlElementAttribute("sfp", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Empty> Sfp
        {
            get
            {
                return this.sfp;
            }
            private set
            {
                this.sfp = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Sfp-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Sfp collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SfpSpecified
        {
            get
            {
                return (this.Sfp.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> sfpp;

        [System.Xml.Serialization.XmlElementAttribute("sfpp", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Empty> Sfpp
        {
            get
            {
                return this.sfpp;
            }
            private set
            {
                this.sfpp = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Sfpp-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Sfpp collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SfppSpecified
        {
            get
            {
                return (this.Sfpp.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> fp;

        [System.Xml.Serialization.XmlElementAttribute("fp", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Empty> Fp
        {
            get
            {
                return this.fp;
            }
            private set
            {
                this.fp = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Fp-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Fp collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FpSpecified
        {
            get
            {
                return (this.Fp.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> rf;

        [System.Xml.Serialization.XmlElementAttribute("rf", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Empty> Rf
        {
            get
            {
                return this.rf;
            }
            private set
            {
                this.rf = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Rf-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Rf collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RfSpecified
        {
            get
            {
                return (this.Rf.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> rfz;

        [System.Xml.Serialization.XmlElementAttribute("rfz", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Empty> Rfz
        {
            get
            {
                return this.rfz;
            }
            private set
            {
                this.rfz = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Rfz-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Rfz collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RfzSpecified
        {
            get
            {
                return (this.Rfz.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> sfz;

        [System.Xml.Serialization.XmlElementAttribute("sfz", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Empty> Sfz
        {
            get
            {
                return this.sfz;
            }
            private set
            {
                this.sfz = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Sfz-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Sfz collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SfzSpecified
        {
            get
            {
                return (this.Sfz.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> sffz;

        [System.Xml.Serialization.XmlElementAttribute("sffz", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Empty> Sffz
        {
            get
            {
                return this.sffz;
            }
            private set
            {
                this.sffz = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Sffz-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Sffz collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SffzSpecified
        {
            get
            {
                return (this.Sffz.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> fz;

        [System.Xml.Serialization.XmlElementAttribute("fz", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Empty> Fz
        {
            get
            {
                return this.fz;
            }
            private set
            {
                this.fz = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Fz-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Fz collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FzSpecified
        {
            get
            {
                return (this.Fz.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> otherDynamics;

        [System.Xml.Serialization.XmlElementAttribute("other-dynamics", Namespace = "")]
        public System.Collections.ObjectModel.Collection<string> OtherDynamics
        {
            get
            {
                return this.otherDynamics;
            }
            private set
            {
                this.otherDynamics = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OtherDynamics-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the OtherDynamics collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OtherDynamicsSpecified
        {
            get
            {
                return (this.OtherDynamics.Count != 0);
            }
        }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Placement-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }
    }

    /// <summary>
    /// <para>The empty type represents an empty element with no attributes.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("empty", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Empty
    {
    }

    /// <summary>
    /// <para>The empty-placement type represents an empty element with print-style and placement attributes.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("empty-placement", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HeelToe))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StrongAccent))]
    public partial class EmptyPlacement
    {

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Placement-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }
    }

    /// <summary>
    /// <para>The empty-print-style type represents an empty element with print-style attributes.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("empty-print-style", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmptyPrintStyle
    {

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The empty-trill-sound type represents an empty element with print-style, placement, and trill-sound attributes.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("empty-trill-sound", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Mordent))]
    public partial class EmptyTrillSound
    {

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Placement-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("start-note", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public StartNote StartNote { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die StartNote-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StartNote property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StartNoteSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("trill-step", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public TrillStep TrillStep { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TrillStep-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TrillStep property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TrillStepSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("two-note-turn", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public TwoNoteTurn TwoNoteTurn { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TwoNoteTurn-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TwoNoteTurn property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TwoNoteTurnSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("accelerate", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Accelerate { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Accelerate-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Accelerate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccelerateSpecified { get; set; }

        /// <summary>
        /// <para>The trill-beats type specifies the beats used in a trill-sound or bend-sound attribute group. It is a decimal value with a minimum value of 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: 2.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("beats", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal Beats { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Beats-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Beats property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BeatsSpecified { get; set; }

        /// <summary>
        /// <para>The percent type specifies a percentage from 0 to 100.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "100")]
        [System.Xml.Serialization.XmlAttributeAttribute("second-beat", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal SecondBeat { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SecondBeat-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SecondBeat property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SecondBeatSpecified { get; set; }

        /// <summary>
        /// <para>The percent type specifies a percentage from 0 to 100.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "100")]
        [System.Xml.Serialization.XmlAttributeAttribute("last-beat", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal LastBeat { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LastBeat-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastBeat property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LastBeatSpecified { get; set; }
    }

    /// <summary>
    /// <para>The fermata text content represents the shape of the fermata sign. An empty fermata element represents a normal fermata. The fermata type is upright if not specified.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("fermata", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fermata
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public FermataShape Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public UprightInverted Type { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Type-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>Fingering is typically indicated 1,2,3,4,5. Multiple fingerings may be given, typically to substitute fingerings in the middle of a note. The substitution and alternate values are "no" if the attribute is not present. For guitar and other fretted instruments, the fingering element represents the fretting finger; the pluck element represents the plucking finger.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("fingering", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fingering
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("substitution", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Substitution { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Substitution-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Substitution property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SubstitutionSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("alternate", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Alternate { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Alternate-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Alternate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AlternateSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Placement-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }
    }

    /// <summary>
    /// <para>The formatted-text type represents a text element with text-formatting attributes.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("formatted-text", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FormattedText
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("justify", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LeftCenterRight Justify { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Justify-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Justify property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool JustifySpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("halign", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LeftCenterRight Halign { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Halign-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Halign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HalignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("valign", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Valign Valign { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Valign-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Valign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValignSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("underline", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Underline { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("overline", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Overline { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("line-through", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string LineThrough { get; set; }

        /// <summary>
        /// <para>The rotation-degrees type specifies rotation, pan, and elevation values in degrees. Values range from -180 to 180.</para>
        /// <para xml:lang="en">Minimum inclusive value: -180.</para>
        /// <para xml:lang="en">Maximum inclusive value: 180.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-180", "180")]
        [System.Xml.Serialization.XmlAttributeAttribute("rotation", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal Rotation { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Rotation-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Rotation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RotationSpecified { get; set; }

        /// <summary>
        /// <para>The number-or-normal values can be either a decimal number or the string "normal". This is used by the line-height and letter-spacing attributes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("letter-spacing", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string LetterSpacing { get; set; }

        /// <summary>
        /// <para>The number-or-normal values can be either a decimal number or the string "normal". This is used by the line-height and letter-spacing attributes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("line-height", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string LineHeight { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("lang", Namespace = "http://www.w3.org/XML/1998/namespace")]
        public string Lang { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("dir", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public TextDirection Dir { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Dir-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Dir property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DirSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("enclosure", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Enclosure Enclosure { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Enclosure-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Enclosure property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnclosureSpecified { get; set; }
    }

    /// <summary>
    /// <para>The fret element is used with tablature notation and chord diagrams. Fret numbers start with 0 for an open string and 1 for the first fret.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("fret", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Fret
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The level type is used to specify editorial information for different MusicXML elements. If the reference attribute for the level element is yes, this indicates editorial information that is for display only and should not affect playback. For instance, a modern edition of older music may set reference="yes" on the attributes containing the music's original clef, key, and time signature. It is no by default.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("level", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Level
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("reference", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Reference { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Reference-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Reference property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ReferenceSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("parentheses", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Parentheses { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Parentheses-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Parentheses property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParenthesesSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("bracket", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Bracket { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Bracket-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Bracket property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BracketSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public SymbolSize Size { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Size-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Size property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SizeSpecified { get; set; }
    }

    /// <summary>
    /// <para>The midi-instrument type defines MIDI 1.0 instrument playback. The midi-instrument element can be a part of either the score-instrument element at the start of a part, or the sound element within a part. The id attribute refers to the score-instrument affected by the change.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("midi-instrument", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MidiInstrument
    {

        /// <summary>
        /// <para>The midi-channel element specifies a MIDI 1.0 channel numbers ranging from 1 to 16.</para>
        /// <para>The midi-16 type is used to express MIDI 1.0 values that range from 1 to 16.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 16.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "16")]
        [System.Xml.Serialization.XmlElementAttribute("midi-channel", Namespace = "")]
        public string MidiChannel { get; set; }

        /// <summary>
        /// <para>The midi-name element corresponds to a ProgramName meta-event within a Standard MIDI File.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("midi-name", Namespace = "")]
        public string MidiName { get; set; }

        /// <summary>
        /// <para>The midi-bank element specified a MIDI 1.0 bank number ranging from 1 to 16,384.</para>
        /// <para>The midi-16 type is used to express MIDI 1.0 values that range from 1 to 16,384.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 16384.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "16384")]
        [System.Xml.Serialization.XmlElementAttribute("midi-bank", Namespace = "")]
        public string MidiBank { get; set; }

        /// <summary>
        /// <para>The midi-program element specifies a MIDI 1.0 program number ranging from 1 to 128.</para>
        /// <para>The midi-16 type is used to express MIDI 1.0 values that range from 1 to 128.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 128.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "128")]
        [System.Xml.Serialization.XmlElementAttribute("midi-program", Namespace = "")]
        public string MidiProgram { get; set; }

        /// <summary>
        /// <para>For unpitched instruments, the midi-unpitched element specifies a MIDI 1.0 note number ranging from 1 to 128. It is usually used with MIDI banks for percussion.</para>
        /// <para>The midi-16 type is used to express MIDI 1.0 values that range from 1 to 128.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 128.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "128")]
        [System.Xml.Serialization.XmlElementAttribute("midi-unpitched", Namespace = "")]
        public string MidiUnpitched { get; set; }

        /// <summary>
        /// <para>The volume element value is a percentage of the maximum ranging from 0 to 100, with decimal values allowed. This corresponds to a scaling value for the MIDI 1.0 channel volume controller.</para>
        /// <para>The percent type specifies a percentage from 0 to 100.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "100")]
        [System.Xml.Serialization.XmlElementAttribute("volume", Namespace = "")]
        public decimal Volume { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Volume-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Volume property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VolumeSpecified { get; set; }

        /// <summary>
        /// <para>The pan and elevation elements allow placing of sound in a 3-D space relative to the listener. Both are expressed in degrees ranging from -180 to 180. For pan, 0 is straight ahead, -90 is hard left, 90 is hard right, and -180 and 180 are directly behind the listener.</para>
        /// <para>The rotation-degrees type specifies rotation, pan, and elevation values in degrees. Values range from -180 to 180.</para>
        /// <para xml:lang="en">Minimum inclusive value: -180.</para>
        /// <para xml:lang="en">Maximum inclusive value: 180.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-180", "180")]
        [System.Xml.Serialization.XmlElementAttribute("pan", Namespace = "")]
        public decimal Pan { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Pan-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Pan property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PanSpecified { get; set; }

        /// <summary>
        /// <para>The elevation and pan elements allow placing of sound in a 3-D space relative to the listener. Both are expressed in degrees ranging from -180 to 180. For elevation, 0 is level with the listener, 90 is directly above, and -90 is directly below.</para>
        /// <para>The rotation-degrees type specifies rotation, pan, and elevation values in degrees. Values range from -180 to 180.</para>
        /// <para xml:lang="en">Minimum inclusive value: -180.</para>
        /// <para xml:lang="en">Maximum inclusive value: 180.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-180", "180")]
        [System.Xml.Serialization.XmlElementAttribute("elevation", Namespace = "")]
        public decimal Elevation { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Elevation-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Elevation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ElevationSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The name-display type is used for exact formatting of multi-font text in part and group names to the left of the system. The print-object attribute can be used to determine what, if anything, is printed at the start of each system. Enclosure for the display-text element is none by default. Language for the display-text element is Italian ("it") by default.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("name-display", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NameDisplay
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<FormattedText> displayText;

        [System.Xml.Serialization.XmlElementAttribute("display-text", Namespace = "")]
        public System.Collections.ObjectModel.Collection<FormattedText> DisplayText
        {
            get
            {
                return this.displayText;
            }
            private set
            {
                this.displayText = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DisplayText-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the DisplayText collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DisplayTextSpecified
        {
            get
            {
                return (this.DisplayText.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="NameDisplay" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="NameDisplay" /> class.</para>
        /// </summary>
        public NameDisplay()
        {
            this.displayText = new System.Collections.ObjectModel.Collection<FormattedText>();
            this.accidentalText = new System.Collections.ObjectModel.Collection<AccidentalText>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<AccidentalText> accidentalText;

        [System.Xml.Serialization.XmlElementAttribute("accidental-text", Namespace = "")]
        public System.Collections.ObjectModel.Collection<AccidentalText> AccidentalText
        {
            get
            {
                return this.accidentalText;
            }
            private set
            {
                this.accidentalText = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AccidentalText-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AccidentalText collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccidentalTextSpecified
        {
            get
            {
                return (this.AccidentalText.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PrintObject-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }
    }

    /// <summary>
    /// <para>The string type is used with tablature notation, regular notation (where it is often circled), and chord diagrams. String numbers start with 1 for the highest string.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("string", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class String
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Placement-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }
    }

    /// <summary>
    /// <para>The typed-text type represents a text element with a type attributes.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("typed-text", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TypedText
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Type { get; set; }
    }

    /// <summary>
    /// <para>Wavy lines are one way to indicate trills. When used with a measure element, they should always have type="continue" set.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("wavy-line", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WavyLine
    {

        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public StartStopContinue Type { get; set; }

        /// <summary>
        /// <para>Slurs, tuplets, and many other features can be concurrent and overlapping within a single musical part. The number-level type distinguishes up to six concurrent objects of the same type. A reading program should be prepared to handle cases where the number-levels stop in an arbitrary order. Different numbers are needed when the features overlap in MusicXML file order. When a number-level value is implied, the value is 1 by default.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 6.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "6")]
        [System.Xml.Serialization.XmlAttributeAttribute("number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Placement-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("start-note", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public StartNote StartNote { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die StartNote-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StartNote property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StartNoteSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("trill-step", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public TrillStep TrillStep { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TrillStep-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TrillStep property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TrillStepSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("two-note-turn", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public TwoNoteTurn TwoNoteTurn { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TwoNoteTurn-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TwoNoteTurn property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TwoNoteTurnSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("accelerate", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Accelerate { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Accelerate-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Accelerate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccelerateSpecified { get; set; }

        /// <summary>
        /// <para>The trill-beats type specifies the beats used in a trill-sound or bend-sound attribute group. It is a decimal value with a minimum value of 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: 2.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("beats", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal Beats { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Beats-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Beats property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BeatsSpecified { get; set; }

        /// <summary>
        /// <para>The percent type specifies a percentage from 0 to 100.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "100")]
        [System.Xml.Serialization.XmlAttributeAttribute("second-beat", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal SecondBeat { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SecondBeat-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SecondBeat property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SecondBeatSpecified { get; set; }

        /// <summary>
        /// <para>The percent type specifies a percentage from 0 to 100.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "100")]
        [System.Xml.Serialization.XmlAttributeAttribute("last-beat", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal LastBeat { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LastBeat-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastBeat property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LastBeatSpecified { get; set; }
    }

    /// <summary>
    /// <para>The attributes element contains musical information that typically changes on measure boundaries. This includes key and time signatures, clefs, transpositions, and staving.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("attributes", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Attributes
    {

        [System.Xml.Serialization.XmlElementAttribute("footnote", Namespace = "")]
        public FormattedText Footnote { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("level", Namespace = "")]
        public Level Level { get; set; }

        /// <summary>
        /// <para>Musical notation duration is commonly represented as fractions. The divisions element indicates how many divisions per quarter note are used to indicate a note's duration. For example, if duration = 1 and divisions = 2, this is an eighth note duration. Duration and divisions are used directly for generating sound output, so they must be chosen to take tuplets into account. Using a divisions element lets us use just one number to represent a duration for each note in the score, while retaining the full power of a fractional representation. If maximum compatibility with Standard MIDI 1.0 files is important, do not have the divisions value exceed 16383.</para>
        /// <para>The positive-divisions type restricts divisions values to positive numbers.</para>
        /// <para xml:lang="en">Minimum exclusive value: 0.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("divisions", Namespace = "")]
        public decimal Divisions { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Divisions-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Divisions property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DivisionsSpecified { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Key> key;

        /// <summary>
        /// <para>The key element represents a key signature. Both traditional and non-traditional key signatures are supported. The optional number attribute refers to staff numbers. If absent, the key signature applies to all staves in the part.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("key", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Key> Key
        {
            get
            {
                return this.key;
            }
            private set
            {
                this.key = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Key-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Key collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeySpecified
        {
            get
            {
                return (this.Key.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Attributes" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Attributes" /> class.</para>
        /// </summary>
        public Attributes()
        {
            this.key = new System.Collections.ObjectModel.Collection<Key>();
            this.time = new System.Collections.ObjectModel.Collection<Time>();
            this.clef = new System.Collections.ObjectModel.Collection<Clef>();
            this.staffDetails = new System.Collections.ObjectModel.Collection<StaffDetails>();
            this.directive = new System.Collections.ObjectModel.Collection<AttributesDirective>();
            this.measureStyle = new System.Collections.ObjectModel.Collection<MeasureStyle>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Time> time;

        /// <summary>
        /// <para>Time signatures are represented by the beats element for the numerator and the beat-type element for the denominator.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("time", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Time> Time
        {
            get
            {
                return this.time;
            }
            private set
            {
                this.time = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Time-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Time collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TimeSpecified
        {
            get
            {
                return (this.Time.Count != 0);
            }
        }

        /// <summary>
        /// <para>The staves element is used if there is more than one staff represented in the given part (e.g., 2 staves for typical piano parts). If absent, a value of 1 is assumed. Staves are ordered from top to bottom in a part in numerical order, with staff 1 above staff 2.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("staves", Namespace = "")]
        public string Staves { get; set; }

        /// <summary>
        /// <para>The part-symbol element indicates how a symbol for a multi-staff part is indicated in the score.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("part-symbol", Namespace = "")]
        public PartSymbol PartSymbol { get; set; }

        /// <summary>
        /// <para>The instruments element is only used if more than one instrument is represented in the part (e.g., oboe I and II where they play together most of the time). If absent, a value of 1 is assumed.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("instruments", Namespace = "")]
        public string Instruments { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Clef> clef;

        /// <summary>
        /// <para>Clefs are represented by a combination of sign, line, and clef-octave-change elements.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("clef", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Clef> Clef
        {
            get
            {
                return this.clef;
            }
            private set
            {
                this.clef = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Clef-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Clef collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ClefSpecified
        {
            get
            {
                return (this.Clef.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<StaffDetails> staffDetails;

        /// <summary>
        /// <para>The staff-details element is used to indicate different types of staves.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("staff-details", Namespace = "")]
        public System.Collections.ObjectModel.Collection<StaffDetails> StaffDetails
        {
            get
            {
                return this.staffDetails;
            }
            private set
            {
                this.staffDetails = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die StaffDetails-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the StaffDetails collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StaffDetailsSpecified
        {
            get
            {
                return (this.StaffDetails.Count != 0);
            }
        }

        /// <summary>
        /// <para>If the part is being encoded for a transposing instrument in written vs. concert pitch, the transposition must be encoded in the transpose element using the transpose type.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("transpose", Namespace = "")]
        public Transpose Transpose { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<AttributesDirective> directive;

        /// <summary>
        /// <para>Directives are like directions, but can be grouped together with attributes for convenience. This is typically used for tempo markings at the beginning of a piece of music. This element has been deprecated in Version 2.0 in favor of the directive attribute for direction elements. Language names come from ISO 639, with optional country subcodes from ISO 3166.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("directive", Namespace = "")]
        public System.Collections.ObjectModel.Collection<AttributesDirective> Directive
        {
            get
            {
                return this.directive;
            }
            private set
            {
                this.directive = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Directive-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Directive collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DirectiveSpecified
        {
            get
            {
                return (this.Directive.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<MeasureStyle> measureStyle;

        /// <summary>
        /// <para>A measure-style indicates a special way to print partial to multiple measures within a part. This includes multiple rests over several measures, repeats of beats, single, or multiple measures, and use of slash notation.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("measure-style", Namespace = "")]
        public System.Collections.ObjectModel.Collection<MeasureStyle> MeasureStyle
        {
            get
            {
                return this.measureStyle;
            }
            private set
            {
                this.measureStyle = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MeasureStyle-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the MeasureStyle collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MeasureStyleSpecified
        {
            get
            {
                return (this.MeasureStyle.Count != 0);
            }
        }
    }

    /// <summary>
    /// <para>The key type represents a key signature. Both traditional and non-traditional key signatures are supported. The optional number attribute refers to staff numbers. If absent, the key signature applies to all staves in the part.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("key", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Key
    {

        [System.Xml.Serialization.XmlElementAttribute("cancel", Namespace = "")]
        public Cancel Cancel { get; set; }

        /// <summary>
        /// <para>The fifths type represents the number of flats or sharps in a traditional key signature. Negative numbers are used for flats and positive numbers for sharps, reflecting the key's placement within the circle of fifths (hence the type name).</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("fifths", Namespace = "")]
        public string Fifths { get; set; }

        /// <summary>
        /// <para>The mode type is used to specify major/minor and other mode distinctions. Valid mode values include major, minor, dorian, phrygian, lydian, mixolydian, aeolian, ionian, and locrian.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("mode", Namespace = "")]
        public string Mode { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Step> keyStep;

        /// <summary>
        /// <para>Non-traditional key signatures can be represented using the Humdrum/Scot concept of a list of altered tones. The key-step element indicates the pitch step to be altered, represented using the same names as in the step element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("key-step", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Step> KeyStep
        {
            get
            {
                return this.keyStep;
            }
            private set
            {
                this.keyStep = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die KeyStep-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the KeyStep collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyStepSpecified
        {
            get
            {
                return (this.KeyStep.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Key" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Key" /> class.</para>
        /// </summary>
        public Key()
        {
            this.keyStep = new System.Collections.ObjectModel.Collection<Step>();
            this.keyAlter = new System.Collections.ObjectModel.Collection<decimal>();
            this.keyOctave = new System.Collections.ObjectModel.Collection<KeyOctave>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<decimal> keyAlter;

        /// <summary>
        /// <para>Non-traditional key signatures can be represented using the Humdrum/Scot concept of a list of altered tones. The key-alter element represents the alteration for a given pitch step, represented with semitones in the same manner as the alter element.</para>
        /// <para>The semintones type is a number representing semitones, used for chromatic alteration. A value of -1 corresponds to a flat and a value of 1 to a sharp. Decimal values like 0.5 (quarter tone sharp) may be used for microtones.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("key-alter", Namespace = "")]
        public System.Collections.ObjectModel.Collection<decimal> KeyAlter
        {
            get
            {
                return this.keyAlter;
            }
            private set
            {
                this.keyAlter = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die KeyAlter-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the KeyAlter collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyAlterSpecified
        {
            get
            {
                return (this.KeyAlter.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<KeyOctave> keyOctave;

        /// <summary>
        /// <para>The optional list of key-octave elements is used to specify in which octave each element of the key signature appears.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("key-octave", Namespace = "")]
        public System.Collections.ObjectModel.Collection<KeyOctave> KeyOctave
        {
            get
            {
                return this.keyOctave;
            }
            private set
            {
                this.keyOctave = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die KeyOctave-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the KeyOctave collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KeyOctaveSpecified
        {
            get
            {
                return (this.KeyOctave.Count != 0);
            }
        }

        /// <summary>
        /// <para>The staff-number type indicates staff numbers within a multi-staff part. Staves are numbered from top to bottom, with 1 being the top staff on a part.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PrintObject-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }
    }

    /// <summary>
    /// <para>A cancel element indicates that the old key signature should be cancelled before the new one appears. This will always happen when changing to C major or A minor and need not be specified then. The cancel value matches the fifths value of the cancelled key signature (e.g., a cancel of -2 will provide an explicit cancellation for changing from B flat major to F major). The optional location attribute indicates whether the cancellation appears to the left or the right of the new key signature. It is left by default.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("cancel", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Cancel
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("location", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LeftRight Location { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Location-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Location property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LocationSpecified { get; set; }
    }

    /// <summary>
    /// <para>The key-octave element specifies in which octave an element of a key signature appears. The content specifies the octave value using the same values as the display-octave element. The number attribute is a positive integer that refers to the key signature element in left-to-right order. If the cancel attribute is set to yes, then this number refers to an element specified by the cancel element. It is no by default.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("key-octave", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class KeyOctave
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("cancel", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Cancel { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Cancel-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Cancel property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CancelSpecified { get; set; }
    }

    /// <summary>
    /// <para>Time signatures are represented by the beats element for the numerator and the beat-type element for the denominator. The symbol attribute is used indicate common and cut time symbols as well as a single number display. Multiple pairs of beat and beat-type elements are used for composite time signatures with multiple denominators, such as 2/4 + 3/8. A composite such as 3+2/8 requires only one beat/beat-type pair.
    ///
    ///The print-object attribute allows a time signature to be specified but not printed, as is the case for excerpts from the middle of a score. The value is "yes" if not present. The optional number attribute refers to staff numbers within the part. If absent, the time signature applies to all staves in the part.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("time", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Time
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> beats;

        /// <summary>
        /// <para>The beats element indicates the number of beats, as found in the numerator of a time signature.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("beats", Namespace = "")]
        public System.Collections.ObjectModel.Collection<string> Beats
        {
            get
            {
                return this.beats;
            }
            private set
            {
                this.beats = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Time" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Time" /> class.</para>
        /// </summary>
        public Time()
        {
            this.beats = new System.Collections.ObjectModel.Collection<string>();
            this.beatType = new System.Collections.ObjectModel.Collection<string>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> beatType;

        /// <summary>
        /// <para>The beat-type element indicates the beat unit, as found in the denominator of a time signature.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("beat-type", Namespace = "")]
        public System.Collections.ObjectModel.Collection<string> BeatType
        {
            get
            {
                return this.beatType;
            }
            private set
            {
                this.beatType = value;
            }
        }

        /// <summary>
        /// <para>A senza-misura element explicitly indicates that no time signature is present.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("senza-misura", Namespace = "")]
        public Empty SenzaMisura { get; set; }

        /// <summary>
        /// <para>The staff-number type indicates staff numbers within a multi-staff part. Staves are numbered from top to bottom, with 1 being the top staff on a part.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("symbol", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public TimeSymbol Symbol { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Symbol-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Symbol property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SymbolSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PrintObject-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }
    }

    /// <summary>
    /// <para>The part-symbol element indicates how a symbol for a multi-staff part is indicated in the score. Values include none, brace, line, and bracket; brace is the default. The top-staff and bottom-staff elements are used when the brace does not extend across the entire part. For example, in a 3-staff organ part, the top-staff will typically be 1 for the right hand, while the bottom-staff will typically be 2 for the left hand. Staff 3 for the pedals is usually outside the brace.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("part-symbol", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PartSymbol
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public GroupSymbolValue Value { get; set; }

        /// <summary>
        /// <para>The staff-number type indicates staff numbers within a multi-staff part. Staves are numbered from top to bottom, with 1 being the top staff on a part.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("top-staff", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string TopStaff { get; set; }

        /// <summary>
        /// <para>The staff-number type indicates staff numbers within a multi-staff part. Staves are numbered from top to bottom, with 1 being the top staff on a part.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("bottom-staff", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string BottomStaff { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>Clefs are represented by a combination of sign, line, and clef-octave-change elements. The optional number attribute refers to staff numbers within the part. A value of 1 is assumed if not present.
    ///
    ///Sometimes clefs are added to the staff in non-standard line positions, either to indicate cue passages, or when there are multiple clefs present simultaneously on one staff. In this situation, the additional attribute is set to "yes" and the line value is ignored. The size attribute is used for clefs where the additional attribute is "yes". It is typically used to indicate cue clefs.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("clef", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Clef
    {

        /// <summary>
        /// <para>The sign element represents the clef symbol.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("sign", Namespace = "")]
        public ClefSign Sign { get; set; }

        /// <summary>
        /// <para>Line numbers are counted from the bottom of the staff. Standard values are 2 for the G sign (treble clef), 4 for the F sign (bass clef), 3 for the C sign (alto clef) and 5 for TAB (on a 6-line staff).</para>
        /// <para>The staff-line type indicates the line on a given staff. Staff lines are numbered from bottom to top, with 1 being the bottom line on a staff. Staff line values can be used to specify positions outside the staff, such as a C clef positioned in the middle of a grand staff.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("line", Namespace = "")]
        public string Line { get; set; }

        /// <summary>
        /// <para>The clef-octave-change element is used for transposing clefs. A treble clef for tenors would have a value of -1.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("clef-octave-change", Namespace = "")]
        public string ClefOctaveChange { get; set; }

        /// <summary>
        /// <para>The staff-number type indicates staff numbers within a multi-staff part. Staves are numbered from top to bottom, with 1 being the top staff on a part.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("additional", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Additional { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Additional-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Additional property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AdditionalSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public SymbolSize Size { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Size-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Size property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SizeSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PrintObject-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }
    }

    /// <summary>
    /// <para>The staff-details element is used to indicate different types of staves. The optional number attribute specifies the staff number from top to bottom on the system, as with clef. The print-object attribute is used to indicate when a staff is not printed in a part, usually in large scores where empty parts are omitted. It is yes by default. If print-spacing is yes while print-object is no, the score is printed in cutaway format where vertical space is left for the empty part.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("staff-details", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StaffDetails
    {

        [System.Xml.Serialization.XmlElementAttribute("staff-type", Namespace = "")]
        public StaffType StaffType { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die StaffType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StaffType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StaffTypeSpecified { get; set; }

        /// <summary>
        /// <para>The staff-lines element specifies the number of lines for non 5-line staffs.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("staff-lines", Namespace = "")]
        public string StaffLines { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<StaffTuning> staffTuning;

        [System.Xml.Serialization.XmlElementAttribute("staff-tuning", Namespace = "")]
        public System.Collections.ObjectModel.Collection<StaffTuning> StaffTuning
        {
            get
            {
                return this.staffTuning;
            }
            private set
            {
                this.staffTuning = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die StaffTuning-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the StaffTuning collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StaffTuningSpecified
        {
            get
            {
                return (this.StaffTuning.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="StaffDetails" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="StaffDetails" /> class.</para>
        /// </summary>
        public StaffDetails()
        {
            this.staffTuning = new System.Collections.ObjectModel.Collection<StaffTuning>();
        }

        /// <summary>
        /// <para>The capo element indicates at which fret a capo should be placed on a fretted instrument. This changes the open tuning of the strings specified by staff-tuning by the specified number of half-steps.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("capo", Namespace = "")]
        public string Capo { get; set; }

        /// <summary>
        /// <para>The staff-size element indicates how large a staff space is on this staff, expressed as a percentage of the work's default scaling. Values less than 100 make the staff space smaller while values over 100 make the staff space larger. A staff-type of cue, ossia, or editorial implies a staff-size of less than 100, but the exact value is implementation-dependent unless specified here. Staff size affects staff height only, not the relationship of the staff to the left and right margins.</para>
        /// <para>The non-negative-decimal type specifies a non-negative decimal value.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("staff-size", Namespace = "")]
        public decimal StaffSize { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die StaffSize-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StaffSize property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StaffSizeSpecified { get; set; }

        /// <summary>
        /// <para>The staff-number type indicates staff numbers within a multi-staff part. Staves are numbered from top to bottom, with 1 being the top staff on a part.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("show-frets", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ShowFrets ShowFrets { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ShowFrets-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ShowFrets property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ShowFretsSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PrintObject-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-spacing", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo PrintSpacing { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PrintSpacing-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintSpacing property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintSpacingSpecified { get; set; }
    }

    /// <summary>
    /// <para>The staff-tuning type specifies the open, non-capo tuning of the lines on a tablature staff.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("staff-tuning", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StaffTuning
    {

        /// <summary>
        /// <para>The tuning-step element is represented like the step element, with a different name to reflect is different function.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("tuning-step", Namespace = "")]
        public Step TuningStep { get; set; }

        /// <summary>
        /// <para>The tuning-alter element is represented like the alter element, with a different name to reflect is different function.</para>
        /// <para>The semintones type is a number representing semitones, used for chromatic alteration. A value of -1 corresponds to a flat and a value of 1 to a sharp. Decimal values like 0.5 (quarter tone sharp) may be used for microtones.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("tuning-alter", Namespace = "")]
        public decimal TuningAlter { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TuningAlter-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TuningAlter property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TuningAlterSpecified { get; set; }

        /// <summary>
        /// <para>The tuning-octave element is represented like the octave element, with a different name to reflect is different function.</para>
        /// <para>Octaves are represented by the numbers 0 to 9, where 4 indicates the octave started by middle C.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9")]
        [System.Xml.Serialization.XmlElementAttribute("tuning-octave", Namespace = "")]
        public string TuningOctave { get; set; }

        /// <summary>
        /// <para>The staff-line type indicates the line on a given staff. Staff lines are numbered from bottom to top, with 1 being the bottom line on a staff. Staff line values can be used to specify positions outside the staff, such as a C clef positioned in the middle of a grand staff.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("line", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Line { get; set; }
    }

    /// <summary>
    /// <para>The transpose type represents what must be added to a written pitch to get a correct sounding pitch.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("transpose", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Transpose
    {

        /// <summary>
        /// <para>The diatonic element specifies the number of pitch steps needed to go from written to sounding pitch. This allows for correct spelling of enharmonic transpositions.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("diatonic", Namespace = "")]
        public string Diatonic { get; set; }

        /// <summary>
        /// <para>The chromatic element represents the number of semitones needed to get from written to sounding pitch. This value does not include octave-change values; the values for both elements need to be added to the written pitch to get the correct sounding pitch.</para>
        /// <para>The semintones type is a number representing semitones, used for chromatic alteration. A value of -1 corresponds to a flat and a value of 1 to a sharp. Decimal values like 0.5 (quarter tone sharp) may be used for microtones.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("chromatic", Namespace = "")]
        public decimal Chromatic { get; set; }

        /// <summary>
        /// <para>The octave-change element indicates how many octaves to add to get from written pitch to sounding pitch.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("octave-change", Namespace = "")]
        public string OctaveChange { get; set; }

        /// <summary>
        /// <para>If the double element is present, it indicates that the music is doubled one octave down from what is currently written (as is the case for mixed cello / bass parts in orchestral literature).</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("double", Namespace = "")]
        public Empty Double { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("AttributesDirective", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AttributesDirective
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("lang", Namespace = "http://www.w3.org/XML/1998/namespace")]
        public string Lang { get; set; }
    }

    /// <summary>
    /// <para>A measure-style indicates a special way to print partial to multiple measures within a part. This includes multiple rests over several measures, repeats of beats, single, or multiple measures, and use of slash notation.
    ///
    ///The multiple-rest and measure-repeat symbols indicate the number of measures covered in the element content. The beat-repeat and slash elements can cover partial measures. All but the multiple-rest element use a type attribute to indicate starting and stopping the use of the style. The optional number attribute specifies the staff number from top to bottom on the system, as with clef.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("measure-style", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MeasureStyle
    {

        [System.Xml.Serialization.XmlElementAttribute("multiple-rest", Namespace = "")]
        public MultipleRest MultipleRest { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("measure-repeat", Namespace = "")]
        public MeasureRepeat MeasureRepeat { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("beat-repeat", Namespace = "")]
        public BeatRepeat BeatRepeat { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("slash", Namespace = "")]
        public Slash Slash { get; set; }

        /// <summary>
        /// <para>The staff-number type indicates staff numbers within a multi-staff part. Staves are numbered from top to bottom, with 1 being the top staff on a part.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The text of the multiple-rest type indicates the number of measures in the multiple rest. Multiple rests may use the 1-bar / 2-bar / 4-bar rest symbols, or a single shape. The use-symbols attribute indicates which to use; it is no if not specified. The element text is ignored when the type is stop.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("multiple-rest", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MultipleRest
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("use-symbols", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo UseSymbols { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die UseSymbols-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UseSymbols property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UseSymbolsSpecified { get; set; }
    }

    /// <summary>
    /// <para>The measure-repeat type is used for both single and multiple measure repeats. The text of the element indicates the number of measures to be repeated in a single pattern. The slashes attribute specifies the number of slashes to use in the repeat sign. It is 1 if not specified. Both the start and the stop of the measure-repeat must be specified. The text of the element is ignored when the type is stop.
    ///	
    ///The measure-repeat element specifies a notation style for repetitions. The actual music being repeated needs to be repeated within the MusicXML file. This element specifies the notation that indicates the repeat.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("measure-repeat", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MeasureRepeat
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public StartStop Type { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("slashes", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Slashes { get; set; }
    }

    /// <summary>
    /// <para>The beat-repeat type is used to indicate that a single beat (but possibly many notes) is repeated. Both the start and stop of the beat being repeated should be specified. The slashes attribute specifies the number of slashes to use in the symbol. The use-dots attribute indicates whether or not to use dots as well (for instance, with mixed rhythm patterns). By default, the value for slashes is 1 and the value for use-dots is no.
    ///	
    ///The beat-repeat element specifies a notation style for repetitions. The actual music being repeated needs to be repeated within the MusicXML file. This element specifies the notation that indicates the repeat.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("beat-repeat", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BeatRepeat
    {

        /// <summary>
        /// <para>The slash-type element indicates the graphical note type to use for the display of repetition marks.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("slash-type", Namespace = "")]
        public NoteTypeValue SlashType { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SlashType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SlashType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SlashTypeSpecified { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> slashDot;

        /// <summary>
        /// <para>The slash-dot element is used to specify any augmentation dots in the note type used to display repetition marks.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("slash-dot", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Empty> SlashDot
        {
            get
            {
                return this.slashDot;
            }
            private set
            {
                this.slashDot = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SlashDot-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SlashDot collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SlashDotSpecified
        {
            get
            {
                return (this.SlashDot.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="BeatRepeat" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="BeatRepeat" /> class.</para>
        /// </summary>
        public BeatRepeat()
        {
            this.slashDot = new System.Collections.ObjectModel.Collection<Empty>();
        }

        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public StartStop Type { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("slashes", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Slashes { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("use-dots", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo UseDots { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die UseDots-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UseDots property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UseDotsSpecified { get; set; }
    }

    /// <summary>
    /// <para>The slash type is used to indicate that slash notation is to be used. If the slash is on every beat, use-stems is no (the default). To indicate rhythms but not pitches, use-stems is set to yes. The type attribute indicates whether this is the start or stop of a slash notation style. The use-dots attribute works as for the beat-repeat element, and only has effect if use-stems is no.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("slash", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Slash
    {

        /// <summary>
        /// <para>The slash-type element indicates the graphical note type to use for the display of repetition marks.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("slash-type", Namespace = "")]
        public NoteTypeValue SlashType { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SlashType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SlashType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SlashTypeSpecified { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> slashDot;

        /// <summary>
        /// <para>The slash-dot element is used to specify any augmentation dots in the note type used to display repetition marks.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("slash-dot", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Empty> SlashDot
        {
            get
            {
                return this.slashDot;
            }
            private set
            {
                this.slashDot = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SlashDot-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SlashDot collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SlashDotSpecified
        {
            get
            {
                return (this.SlashDot.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Slash" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Slash" /> class.</para>
        /// </summary>
        public Slash()
        {
            this.slashDot = new System.Collections.ObjectModel.Collection<Empty>();
        }

        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public StartStop Type { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("use-dots", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo UseDots { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die UseDots-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UseDots property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UseDotsSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("use-stems", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo UseStems { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die UseStems-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UseStems property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UseStemsSpecified { get; set; }
    }

    /// <summary>
    /// <para>The bar-style-color type contains barline style and color information.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("bar-style-color", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BarStyleColor
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public BarStyle Value { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>If a barline is other than a normal single barline, it should be represented by a barline type that describes it. This includes information about repeats and multiple endings, as well as line style. Barline data is on the same level as the other musical data in a score - a child of a measure in a partwise score, or a part in a timewise score. This allows for barlines within measures, as in dotted barlines that subdivide measures in complex meters. The two fermata elements allow for fermatas on both sides of the barline (the lower one inverted).
    ///	
    ///Barlines have a location attribute to make it easier to process barlines independently of the other musical data in a score. It is often easier to set up measures separately from entering notes. The location attribute must match where the barline element occurs within the rest of the musical data in the score. If location is left, it should be the first element in the measure, aside from the print, bookmark, and link elements. If location is right, it should be the last element, again with the possible exception of the print, bookmark, and link elements. If no location is specified, the right barline is the default. The segno, coda, and divisions attributes work the same way as in the sound element. They are used for playback when barline elements contain segno or coda child elements.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("barline", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Barline
    {

        [System.Xml.Serialization.XmlElementAttribute("bar-style", Namespace = "")]
        public BarStyleColor BarStyle { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("footnote", Namespace = "")]
        public FormattedText Footnote { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("level", Namespace = "")]
        public Level Level { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("wavy-line", Namespace = "")]
        public WavyLine WavyLine { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("segno", Namespace = "")]
        public EmptyPrintStyle Segno { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("coda", Namespace = "")]
        public EmptyPrintStyle Coda { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Fermata> fermata;

        [System.Xml.Serialization.XmlElementAttribute("fermata", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Fermata> Fermata
        {
            get
            {
                return this.fermata;
            }
            private set
            {
                this.fermata = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Fermata-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Fermata collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FermataSpecified
        {
            get
            {
                return (this.Fermata.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Barline" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Barline" /> class.</para>
        /// </summary>
        public Barline()
        {
            this.fermata = new System.Collections.ObjectModel.Collection<Fermata>();
        }

        [System.Xml.Serialization.XmlElementAttribute("ending", Namespace = "")]
        public Ending Ending { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("repeat", Namespace = "")]
        public Repeat Repeat { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private RightLeftMiddle location = MusicXmlSchema.RightLeftMiddle.Right;

        [System.ComponentModel.DefaultValueAttribute(MusicXmlSchema.RightLeftMiddle.Right)]
        [System.Xml.Serialization.XmlAttributeAttribute("location", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public RightLeftMiddle Location
        {
            get
            {
                return this.location;
            }
            set
            {
                this.location = value;
            }
        }

        /// <summary>
        /// <para>The divisions type is used to express values in terms of the musical divisions defined by the divisions element. It is preferred that these be integer values both for MIDI interoperability and to avoid roundoff errors.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("divisions", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal Divisions { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Divisions-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Divisions property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DivisionsSpecified { get; set; }
    }

    /// <summary>
    /// <para>The ending type represents multiple (e.g. first and second) endings. Typically, the start type is associated with the left barline of the first measure in an ending. The stop and discontinue types are associated with the right barline of the last measure in an ending. Stop is used when the ending mark concludes with a downward jog, as is typical for first endings. Discontinue is used when there is no downward jog, as is typical for second endings that do not conclude a piece. The length of the jog can be specified using the end-length attribute. The text-x and text-y attributes are offsets that specify where the baseline of the start of the ending text appears, relative to the start of the ending line.
    ///	
    ///The number attribute reflects the numeric values of what is under the ending line. Single endings such as "1" or comma-separated multiple endings such as "1,2" may be used. The ending element text is used when the text displayed in the ending is different than what appears in the number attribute. The print-object element is used to indicate when an ending is present but not printed, as is often the case for many parts in a full score.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ending", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Ending
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        /// <summary>
        /// <para>The ending-number type is used to specify either a comma-separated list of positive integers without leading zeros, or a string of zero or more spaces. It is used for the number attribute of the ending element. The zero or more spaces version is used when software knows that an ending is present, but cannot determine the type of the ending.</para>
        /// <para xml:lang="en">Pattern: ([ ]*)|([1-9][0-9]*(, ?[1-9][0-9]*)*).</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("([ ]*)|([1-9][0-9]*(, ?[1-9][0-9]*)*)")]
        [System.Xml.Serialization.XmlAttributeAttribute("number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public StartStopDiscontinue Type { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PrintObject-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("end-length", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal EndLength { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EndLength-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EndLength property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EndLengthSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("text-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal TextX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TextX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TextX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TextXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("text-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal TextY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TextY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TextY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TextYSpecified { get; set; }
    }

    /// <summary>
    /// <para>The repeat type represents repeat marks. The start of the repeat has a forward direction while the end of the repeat has a backward direction. Backward repeats that are not part of an ending can use the times attribute to indicate the number of times the repeated section is played.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("repeat", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Repeat
    {

        [System.Xml.Serialization.XmlAttributeAttribute("direction", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public BackwardForward Direction { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("times", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Times { get; set; }
    }

    /// <summary>
    /// <para>The accord type represents the tuning of a single string in the scordatura element. It uses the same group of elements as the staff-tuning element. Strings are numbered from high to low.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("accord", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Accord
    {

        /// <summary>
        /// <para>The tuning-step element is represented like the step element, with a different name to reflect is different function.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("tuning-step", Namespace = "")]
        public Step TuningStep { get; set; }

        /// <summary>
        /// <para>The tuning-alter element is represented like the alter element, with a different name to reflect is different function.</para>
        /// <para>The semintones type is a number representing semitones, used for chromatic alteration. A value of -1 corresponds to a flat and a value of 1 to a sharp. Decimal values like 0.5 (quarter tone sharp) may be used for microtones.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("tuning-alter", Namespace = "")]
        public decimal TuningAlter { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TuningAlter-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TuningAlter property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TuningAlterSpecified { get; set; }

        /// <summary>
        /// <para>The tuning-octave element is represented like the octave element, with a different name to reflect is different function.</para>
        /// <para>Octaves are represented by the numbers 0 to 9, where 4 indicates the octave started by middle C.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9")]
        [System.Xml.Serialization.XmlElementAttribute("tuning-octave", Namespace = "")]
        public string TuningOctave { get; set; }

        /// <summary>
        /// <para>The string-number type indicates a string number. Strings are numbered from high to low, with 1 being the highest pitched string.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("string", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string String { get; set; }
    }

    /// <summary>
    /// <para>The accordion-registration type is use for accordion registration symbols. These are circular symbols divided horizontally into high, middle, and low sections that correspond to 4', 8', and 16' pipes. Each accordion-high, accordion-middle, and accordion-low element represents the presence of one or more dots in the registration diagram. An accordion-registration element needs to have at least one of the child elements present.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("accordion-registration", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AccordionRegistration
    {

        /// <summary>
        /// <para>The accordion-high element indicates the presence of a dot in the high (4') section of the registration symbol.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("accordion-high", Namespace = "")]
        public Empty AccordionHigh { get; set; }

        /// <summary>
        /// <para>The accordion-middle element indicates the presence of 1 to 3 dots in the middle (8') section of the registration symbol.</para>
        /// <para>The accordion-middle type may have values of 1, 2, or 3, corresponding to having 1 to 3 dots in the middle section of the accordion registration symbol.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "3")]
        [System.Xml.Serialization.XmlElementAttribute("accordion-middle", Namespace = "")]
        public string AccordionMiddle { get; set; }

        /// <summary>
        /// <para>The accordion-low element indicates the presence of a dot in the low (16') section of the registration symbol.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("accordion-low", Namespace = "")]
        public Empty AccordionLow { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The barre element indicates placing a finger over multiple strings on a single fret. The type is "start" for the lowest pitched string (e.g., the string with the highest MusicXML number) and is "stop" for the highest pitched string.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("barre", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Barre
    {

        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public StartStop Type { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The bass type is used to indicate a bass note in popular music chord symbols, e.g. G/C. It is generally not used in functional harmony, as inversion is generally not used in pop chord symbols. As with root, it is divided into step and alter elements, similar to pitches.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("bass", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Bass
    {

        [System.Xml.Serialization.XmlElementAttribute("bass-step", Namespace = "")]
        public BassStep BassStep { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("bass-alter", Namespace = "")]
        public BassAlter BassAlter { get; set; }
    }

    /// <summary>
    /// <para>The bass-step type represents the pitch step of the bass of the current chord within the harmony element. The text attribute indicates how the bass should appear on the page if not using the element contents.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("bass-step", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BassStep
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public Step Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("text", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Text { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The bass-alter type represents the chromatic alteration of the bass of the current chord within the harmony element. In some chord styles, the text for the bass-step element may include bass-alter information. In that case, the print-object attribute of the bass-alter element can be set to no. The location attribute indicates whether the alteration should appear to the left or the right of the bass-step; it is right by default.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("bass-alter", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BassAlter
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public decimal Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PrintObject-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("location", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LeftRight Location { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Location-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Location property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LocationSpecified { get; set; }
    }

    /// <summary>
    /// <para>Brackets are combined with words in a variety of modern directions. The line-end attribute specifies if there is a jog up or down (or both), an arrow, or nothing at the start or end of the bracket. If the line-end is up or down, the length of the jog can be specified using the end-length attribute. The line-type is solid by default.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("bracket", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Bracket
    {

        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public StartStop Type { get; set; }

        /// <summary>
        /// <para>Slurs, tuplets, and many other features can be concurrent and overlapping within a single musical part. The number-level type distinguishes up to six concurrent objects of the same type. A reading program should be prepared to handle cases where the number-levels stop in an arbitrary order. Different numbers are needed when the features overlap in MusicXML file order. When a number-level value is implied, the value is 1 by default.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 6.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "6")]
        [System.Xml.Serialization.XmlAttributeAttribute("number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("line-end", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LineEnd LineEnd { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("end-length", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal EndLength { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EndLength-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EndLength property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EndLengthSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("line-type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LineType LineType { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LineType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LineType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineTypeSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The dashes type represents dashes, used for instance with cresc. and dim. marks.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("dashes", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Dashes
    {

        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public StartStop Type { get; set; }

        /// <summary>
        /// <para>Slurs, tuplets, and many other features can be concurrent and overlapping within a single musical part. The number-level type distinguishes up to six concurrent objects of the same type. A reading program should be prepared to handle cases where the number-levels stop in an arbitrary order. Different numbers are needed when the features overlap in MusicXML file order. When a number-level value is implied, the value is 1 by default.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 6.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "6")]
        [System.Xml.Serialization.XmlAttributeAttribute("number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The degree type is used to add, alter, or subtract individual notes in the chord. The print-object attribute can be used to keep the degree from printing separately when it has already taken into account in the text attribute of the kind element. The degree-value and degree-type text attributes specify how the value and type of the degree should be displayed.
    ///	
    ///A harmony of kind "other" can be spelled explicitly by using a series of degree elements together with a root.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("degree", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Degree
    {

        [System.Xml.Serialization.XmlElementAttribute("degree-value", Namespace = "")]
        public DegreeValue DegreeValue { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("degree-alter", Namespace = "")]
        public DegreeAlter DegreeAlter { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("degree-type", Namespace = "")]
        public DegreeType DegreeType { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PrintObject-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }
    }

    /// <summary>
    /// <para>The content of the degree-value type is a number indicating the degree of the chord (1 for the root, 3 for third, etc). The text attribute specifies how the type of the degree should be displayed.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("degree-value", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DegreeValue
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("text", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Text { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The degree-alter type represents the chromatic alteration for the current degree. If the degree-type value is alter or subtract, the degree-alter value is relative to the degree already in the chord based on its kind element. If the degree-type value is add, the degree-alter is relative to a dominant chord (major and perfect intervals except for a minor seventh). The plus-minus attribute is used to indicate if plus and minus symbols should be used instead of sharp and flat symbols to display the degree alteration; it is no by default.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("degree-alter", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DegreeAlter
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public decimal Value { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("plus-minus", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo PlusMinus { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PlusMinus-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PlusMinus property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlusMinusSpecified { get; set; }
    }

    /// <summary>
    /// <para>The degree-type type indicates if this degree is an addition, alteration, or subtraction relative to the kind of the current chord. The value of the degree-type element affects the interpretation of the value of the degree-alter element. The text attribute specifies how the type of the degree should be displayed.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("degree-type", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DegreeType
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public DegreeTypeValue Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("text", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Text { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>A direction is a musical indication that is not attached to a specific note. Two or more may be combined to indicate starts and stops of wedges, dashes, etc.
    ///	
    ///By default, a series of direction-type elements and a series of child elements of a direction-type within a single direction element follow one another in sequence visually. For a series of direction-type children, non-positional formatting attributes are carried over from the previous element by default.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("direction", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Direction
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<DirectionType> directionType;

        [System.Xml.Serialization.XmlElementAttribute("direction-type", Namespace = "")]
        public System.Collections.ObjectModel.Collection<DirectionType> DirectionType
        {
            get
            {
                return this.directionType;
            }
            private set
            {
                this.directionType = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Direction" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Direction" /> class.</para>
        /// </summary>
        public Direction()
        {
            this.directionType = new System.Collections.ObjectModel.Collection<DirectionType>();
        }

        [System.Xml.Serialization.XmlElementAttribute("offset", Namespace = "")]
        public Offset Offset { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("footnote", Namespace = "")]
        public FormattedText Footnote { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("level", Namespace = "")]
        public Level Level { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("voice", Namespace = "")]
        public string Voice { get; set; }

        /// <summary>
        /// <para>Staff assignment is only needed for music notated on multiple staves. Used by both notes and directions. Staff values are numbers, with 1 referring to the top-most staff in a part.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("staff", Namespace = "")]
        public string Staff { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("sound", Namespace = "")]
        public Sound Sound { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Placement-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("directive", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Directive { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Directive-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Directive property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DirectiveSpecified { get; set; }
    }

    /// <summary>
    /// <para>Textual direction types may have more than 1 component due to multiple fonts. The dynamics element may also be used in the notations element. Attribute groups related to print suggestions apply to the individual direction-type, not to the overall direction.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("direction-type", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DirectionType
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Rehearsal> rehearsal;

        [System.Xml.Serialization.XmlElementAttribute("rehearsal", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Rehearsal> Rehearsal
        {
            get
            {
                return this.rehearsal;
            }
            private set
            {
                this.rehearsal = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Rehearsal-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Rehearsal collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RehearsalSpecified
        {
            get
            {
                return (this.Rehearsal.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="DirectionType" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="DirectionType" /> class.</para>
        /// </summary>
        public DirectionType()
        {
            this.rehearsal = new System.Collections.ObjectModel.Collection<Rehearsal>();
            this.segno = new System.Collections.ObjectModel.Collection<EmptyPrintStyle>();
            this.words = new System.Collections.ObjectModel.Collection<FormattedText>();
            this.coda = new System.Collections.ObjectModel.Collection<EmptyPrintStyle>();
            this.dynamics = new System.Collections.ObjectModel.Collection<Dynamics>();
            this.scordatura = new System.Collections.ObjectModel.Collection<Accord>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPrintStyle> segno;

        /// <summary>
        /// <para>The segno element is the visual indicator of a segno sign. A sound element is needed to guide playback applications reliably.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("segno", Namespace = "")]
        public System.Collections.ObjectModel.Collection<EmptyPrintStyle> Segno
        {
            get
            {
                return this.segno;
            }
            private set
            {
                this.segno = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Segno-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Segno collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SegnoSpecified
        {
            get
            {
                return (this.Segno.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<FormattedText> words;

        /// <summary>
        /// <para>The words element specifies a standard text direction. Left justification is assumed if not specified. Language is Italian ("it") by default. Enclosure is none by default.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("words", Namespace = "")]
        public System.Collections.ObjectModel.Collection<FormattedText> Words
        {
            get
            {
                return this.words;
            }
            private set
            {
                this.words = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Words-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Words collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WordsSpecified
        {
            get
            {
                return (this.Words.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPrintStyle> coda;

        /// <summary>
        /// <para>The coda element is the visual indicator of a coda sign. A sound element is needed to guide playback applications reliably.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("coda", Namespace = "")]
        public System.Collections.ObjectModel.Collection<EmptyPrintStyle> Coda
        {
            get
            {
                return this.coda;
            }
            private set
            {
                this.coda = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Coda-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Coda collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodaSpecified
        {
            get
            {
                return (this.Coda.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("wedge", Namespace = "")]
        public Wedge Wedge { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Dynamics> dynamics;

        [System.Xml.Serialization.XmlElementAttribute("dynamics", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Dynamics> Dynamics
        {
            get
            {
                return this.dynamics;
            }
            private set
            {
                this.dynamics = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Dynamics-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Dynamics collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DynamicsSpecified
        {
            get
            {
                return (this.Dynamics.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("dashes", Namespace = "")]
        public Dashes Dashes { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("bracket", Namespace = "")]
        public Bracket Bracket { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("pedal", Namespace = "")]
        public Pedal Pedal { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("metronome", Namespace = "")]
        public Metronome Metronome { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("octave-shift", Namespace = "")]
        public OctaveShift OctaveShift { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("harp-pedals", Namespace = "")]
        public HarpPedals HarpPedals { get; set; }

        /// <summary>
        /// <para>The damp element specifies a harp damping mark.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("damp", Namespace = "")]
        public EmptyPrintStyle Damp { get; set; }

        /// <summary>
        /// <para>The damp-all element specifies a harp damping mark for all strings.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("damp-all", Namespace = "")]
        public EmptyPrintStyle DampAll { get; set; }

        /// <summary>
        /// <para>The eyeglasses element specifies the eyeglasses symbol, common in commercial music.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("eyeglasses", Namespace = "")]
        public EmptyPrintStyle Eyeglasses { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Accord> scordatura;

        [System.Xml.Serialization.XmlArrayAttribute("scordatura", Namespace = "")]
        [System.Xml.Serialization.XmlArrayItemAttribute("accord", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Accord> Scordatura
        {
            get
            {
                return this.scordatura;
            }
            private set
            {
                this.scordatura = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Scordatura-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Scordatura collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ScordaturaSpecified
        {
            get
            {
                return (this.Scordatura.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("image", Namespace = "")]
        public Image Image { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("accordion-registration", Namespace = "")]
        public AccordionRegistration AccordionRegistration { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("other-direction", Namespace = "")]
        public OtherDirection OtherDirection { get; set; }
    }

    /// <summary>
    /// <para>The rehearsal type specifies a rehearsal mark. Language is Italian ("it") by default. Enclosure is square by default.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("rehearsal", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Rehearsal
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("underline", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Underline { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("overline", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Overline { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("line-through", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string LineThrough { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("lang", Namespace = "http://www.w3.org/XML/1998/namespace")]
        public string Lang { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("dir", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public TextDirection Dir { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Dir-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Dir property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DirSpecified { get; set; }

        /// <summary>
        /// <para>The rotation-degrees type specifies rotation, pan, and elevation values in degrees. Values range from -180 to 180.</para>
        /// <para xml:lang="en">Minimum inclusive value: -180.</para>
        /// <para xml:lang="en">Maximum inclusive value: 180.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-180", "180")]
        [System.Xml.Serialization.XmlAttributeAttribute("rotation", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal Rotation { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Rotation-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Rotation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RotationSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("enclosure", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public RehearsalEnclosure Enclosure { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Enclosure-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Enclosure property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EnclosureSpecified { get; set; }
    }

    /// <summary>
    /// <para>The wedge type represents crescendo and diminuendo wedge symbols. The type attribute is crescendo for the start of a wedge that is closed at the left side, and diminuendo for the start of a wedge that is closed on the right side. Spread values are measured in tenths; those at the start of a crescendo wedge or end of a diminuendo wedge are ignored.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("wedge", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Wedge
    {

        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public WedgeType Type { get; set; }

        /// <summary>
        /// <para>Slurs, tuplets, and many other features can be concurrent and overlapping within a single musical part. The number-level type distinguishes up to six concurrent objects of the same type. A reading program should be prepared to handle cases where the number-levels stop in an arbitrary order. Different numbers are needed when the features overlap in MusicXML file order. When a number-level value is implied, the value is 1 by default.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 6.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "6")]
        [System.Xml.Serialization.XmlAttributeAttribute("number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("spread", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal Spread { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Spread-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Spread property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SpreadSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The pedal type represents piano pedal marks. The line attribute is yes if pedal lines are used, no if Ped and * signs are used. The change type is used with line set to yes.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("pedal", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Pedal
    {

        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public StartStopChange Type { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("line", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Line { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Line-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Line property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The metronome type represents metronome marks and other metric relationships. The beat-unit group and per-minute element specify regular metronome marks. The metronome-note and metronome-relation elements allow for the specification of more complicated metric relationships, such as swing tempo marks where two eighths are equated to a quarter note / eighth note triplet. The parentheses attribute indicates whether or not to put the metronome mark in parentheses; its value is no if not specified.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("metronome", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Metronome
    {

        /// <summary>
        /// <para>The beat-unit element indicates the graphical note type to use in a metronome mark.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("beat-unit", Namespace = "")]
        public NoteTypeValue BeatUnit { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> beatUnitDot;

        /// <summary>
        /// <para>The beat-unit-dot element is used to specify any augmentation dots for a metronome mark note.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("beat-unit-dot", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Empty> BeatUnitDot
        {
            get
            {
                return this.beatUnitDot;
            }
            private set
            {
                this.beatUnitDot = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BeatUnitDot-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the BeatUnitDot collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BeatUnitDotSpecified
        {
            get
            {
                return (this.BeatUnitDot.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Metronome" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Metronome" /> class.</para>
        /// </summary>
        public Metronome()
        {
            this.beatUnitDot = new System.Collections.ObjectModel.Collection<Empty>();
            this.metronomeNote = new System.Collections.ObjectModel.Collection<MetronomeNote>();
        }

        [System.Xml.Serialization.XmlElementAttribute("per-minute", Namespace = "")]
        public PerMinute PerMinute { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<MetronomeNote> metronomeNote;

        [System.Xml.Serialization.XmlElementAttribute("metronome-note", Namespace = "")]
        public System.Collections.ObjectModel.Collection<MetronomeNote> MetronomeNote
        {
            get
            {
                return this.metronomeNote;
            }
            private set
            {
                this.metronomeNote = value;
            }
        }

        /// <summary>
        /// <para>The metronome-relation element describes the relationship symbol that goes between the two sets of metronome-note elements. The currently allowed value is equals, but this may expand in future versions. If the element is empty, the equals value is used.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("metronome-relation", Namespace = "")]
        public string MetronomeRelation { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("parentheses", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Parentheses { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Parentheses-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Parentheses property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParenthesesSpecified { get; set; }
    }

    /// <summary>
    /// <para>The per-minute type can be a number, or a text description including numbers. If a font is specified, it overrides the font specified for the overall metronome element. This allows separate specification of a music font for the beat-unit and a text font for the numeric value, in cases where a single metronome font is not used.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("per-minute", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PerMinute
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }
    }

    /// <summary>
    /// <para>The metronome-note type defines the appearance of a note within a metric relationship mark.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("metronome-note", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MetronomeNote
    {

        /// <summary>
        /// <para>The metronome-type element works like the type element in defining metric relationships.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("metronome-type", Namespace = "")]
        public NoteTypeValue MetronomeType { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> metronomeDot;

        /// <summary>
        /// <para>The metronome-dot element works like the dot element in defining metric relationships.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("metronome-dot", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Empty> MetronomeDot
        {
            get
            {
                return this.metronomeDot;
            }
            private set
            {
                this.metronomeDot = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MetronomeDot-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the MetronomeDot collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MetronomeDotSpecified
        {
            get
            {
                return (this.MetronomeDot.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="MetronomeNote" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="MetronomeNote" /> class.</para>
        /// </summary>
        public MetronomeNote()
        {
            this.metronomeDot = new System.Collections.ObjectModel.Collection<Empty>();
            this.metronomeBeam = new System.Collections.ObjectModel.Collection<MetronomeBeam>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<MetronomeBeam> metronomeBeam;

        [System.Xml.Serialization.XmlElementAttribute("metronome-beam", Namespace = "")]
        public System.Collections.ObjectModel.Collection<MetronomeBeam> MetronomeBeam
        {
            get
            {
                return this.metronomeBeam;
            }
            private set
            {
                this.metronomeBeam = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MetronomeBeam-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the MetronomeBeam collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MetronomeBeamSpecified
        {
            get
            {
                return (this.MetronomeBeam.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("metronome-tuplet", Namespace = "")]
        public MetronomeTuplet MetronomeTuplet { get; set; }
    }

    /// <summary>
    /// <para>The metronome-beam type works like the beam type in defining metric relationships, but does not include all the attributes available in the beam type.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("metronome-beam", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MetronomeBeam
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public BeamValue Value { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string number = "1";

        /// <summary>
        /// <para>The MusicXML format supports six levels of beaming, up to 256th notes. Unlike the number-level type, the beam-level type identifies concurrent beams in a beam group. It does not distinguish overlapping beams such as grace notes within regular notes, or beams used in different voices.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 6.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute("1")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "6")]
        [System.Xml.Serialization.XmlAttributeAttribute("number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number
        {
            get
            {
                return this.number;
            }
            set
            {
                this.number = value;
            }
        }
    }

    /// <summary>
    /// <para>The metronome-tuplet type uses the same element structure as the time-modification element along with some attributes from the tuplet element.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("metronome-tuplet", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MetronomeTuplet : TimeModification
    {

        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public StartStop Type { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("bracket", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Bracket { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Bracket-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Bracket property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BracketSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("show-number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ShowTuplet ShowNumber { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ShowNumber-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ShowNumber property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ShowNumberSpecified { get; set; }
    }

    /// <summary>
    /// <para>The time-modification type represents tuplets and other durational changes.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("time-modification", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MetronomeTuplet))]
    public partial class TimeModification
    {

        /// <summary>
        /// <para>The actual-notes element describes how many notes are played in the time usually occupied by the number in the normal-notes element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("actual-notes", Namespace = "")]
        public string ActualNotes { get; set; }

        /// <summary>
        /// <para>The normal-notes element describes how many notes are usually played in the time occupied by the number in the actual-notes element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("normal-notes", Namespace = "")]
        public string NormalNotes { get; set; }

        /// <summary>
        /// <para>If the type associated with the number in the normal-notes element is different than the current note type (e.g., a quarter note within an eighth note triplet), then the normal-notes type (e.g. eighth) is specified in the normal-type and normal-dot elements.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("normal-type", Namespace = "")]
        public NoteTypeValue NormalType { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NormalType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NormalType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NormalTypeSpecified { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Empty> normalDot;

        /// <summary>
        /// <para>The normal-dot element is used to specify dotted normal tuplet types.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("normal-dot", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Empty> NormalDot
        {
            get
            {
                return this.normalDot;
            }
            private set
            {
                this.normalDot = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NormalDot-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the NormalDot collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NormalDotSpecified
        {
            get
            {
                return (this.NormalDot.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="TimeModification" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TimeModification" /> class.</para>
        /// </summary>
        public TimeModification()
        {
            this.normalDot = new System.Collections.ObjectModel.Collection<Empty>();
        }
    }

    /// <summary>
    /// <para>The octave shift type indicates where notes are shifted up or down from their true pitched values because of printing difficulty. Thus a treble clef line noted with 8va will be indicated with an octave-shift down from the pitch data indicated in the notes. A size of 8 indicates one octave; a size of 15 indicates two octaves.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("octave-shift", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OctaveShift
    {

        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public UpDownStop Type { get; set; }

        /// <summary>
        /// <para>Slurs, tuplets, and many other features can be concurrent and overlapping within a single musical part. The number-level type distinguishes up to six concurrent objects of the same type. A reading program should be prepared to handle cases where the number-levels stop in an arbitrary order. Different numbers are needed when the features overlap in MusicXML file order. When a number-level value is implied, the value is 1 by default.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 6.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "6")]
        [System.Xml.Serialization.XmlAttributeAttribute("number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string size = "8";

        [System.ComponentModel.DefaultValueAttribute("8")]
        [System.Xml.Serialization.XmlAttributeAttribute("size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Size
        {
            get
            {
                return this.size;
            }
            set
            {
                this.size = value;
            }
        }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The harp-pedals type is used to create harp pedal diagrams. The pedal-step and pedal-alter elements use the same values as the step and alter elements. For easiest reading, the pedal-tuning elements should follow standard harp pedal order, with pedal-step values of D, C, B, E, F, G, and A.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("harp-pedals", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HarpPedals
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<PedalTuning> pedalTuning;

        [System.Xml.Serialization.XmlElementAttribute("pedal-tuning", Namespace = "")]
        public System.Collections.ObjectModel.Collection<PedalTuning> PedalTuning
        {
            get
            {
                return this.pedalTuning;
            }
            private set
            {
                this.pedalTuning = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="HarpPedals" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="HarpPedals" /> class.</para>
        /// </summary>
        public HarpPedals()
        {
            this.pedalTuning = new System.Collections.ObjectModel.Collection<PedalTuning>();
        }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The pedal-tuning type specifies the tuning of a single harp pedal.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("pedal-tuning", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PedalTuning
    {

        /// <summary>
        /// <para>The pedal-step element defines the pitch step for a single harp pedal.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("pedal-step", Namespace = "")]
        public Step PedalStep { get; set; }

        /// <summary>
        /// <para>The pedal-alter element defines the chromatic alteration for a single harp pedal.</para>
        /// <para>The semintones type is a number representing semitones, used for chromatic alteration. A value of -1 corresponds to a flat and a value of 1 to a sharp. Decimal values like 0.5 (quarter tone sharp) may be used for microtones.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("pedal-alter", Namespace = "")]
        public decimal PedalAlter { get; set; }
    }

    /// <summary>
    /// <para>Scordatura string tunings are represented by a series of accord elements, similar to the staff-tuning elements. Strings are numbered from high to low.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("scordatura", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Scordatura
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Accord> accord;

        [System.Xml.Serialization.XmlElementAttribute("accord", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Accord> Accord
        {
            get
            {
                return this.accord;
            }
            private set
            {
                this.accord = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Scordatura" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Scordatura" /> class.</para>
        /// </summary>
        public Scordatura()
        {
            this.accord = new System.Collections.ObjectModel.Collection<Accord>();
        }
    }

    /// <summary>
    /// <para>The image type is used to include graphical images in a score.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("image", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Image
    {

        [System.Xml.Serialization.XmlAttributeAttribute("source", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Source { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Type { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("halign", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LeftCenterRight Halign { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Halign-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Halign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HalignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("valign", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ValignImage Valign { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Valign-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Valign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValignSpecified { get; set; }
    }

    /// <summary>
    /// <para>The other-direction type is used to define any direction symbols not yet in the current version of the MusicXML format. This allows extended representation, though without application interoperability.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("other-direction", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OtherDirection
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PrintObject-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>An offset is represented in terms of divisions, and indicates where the direction will appear relative to the current musical location. This affects the visual appearance of the direction. If the sound attribute is "yes", then the offset affects playback too. If the sound attribute is "no", then any sound associated with the direction takes effect at the current location. The sound attribute is "no" by default for compatibility with earlier versions of the MusicXML format. If an element within a direction includes a default-x attribute, the offset value will be ignored when determining the appearance of that element.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("offset", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Offset
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public decimal Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("sound", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Sound { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Sound-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Sound property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SoundSpecified { get; set; }
    }

    /// <summary>
    /// <para>The sound element contains general playback parameters. They can stand alone within a part/measure, or be a component element within a direction.
    ///	
    ///Tempo is expressed in quarter notes per minute. If 0, the sound-generating program should prompt the user at the time of compiling a sound (MIDI) file.
    ///	
    ///Dynamics (or MIDI velocity) are expressed as a percentage of the default forte value (90 for MIDI 1.0).
    ///	
    ///Dacapo indicates to go back to the beginning of the movement. When used it always has the value "yes".
    ///	
    ///Segno and dalsegno are used for backwards jumps to a segno sign; coda and tocoda are used for forward jumps to a coda sign. If there are multiple jumps, the value of these parameters can be used to name and distinguish them. If segno or coda is used, the divisions attribute can also be used to indicate the number of divisions per quarter note. Otherwise sound and MIDI generating programs may have to recompute this.
    ///	
    ///By default, a dalsegno or dacapo attribute indicates that the jump should occur the first time through, while a tocoda attribute indicates the jump should occur the second time through. The time that jumps occur can be changed by using the time-only attribute.
    ///	
    ///Forward-repeat is used when a forward repeat sign is implied, and usually follows a bar line. When used it always has the value of "yes".
    ///	
    ///The fine attribute follows the final note or rest in a movement with a da capo or dal segno direction. If numeric, the value represents the actual duration of the final note or rest, which can be ambiguous in written notation and different among parts and voices. The value may also be "yes" to indicate no change to the final duration.
    ///	
    ///If the sound element applies only one time through a repeat, the time-only attribute indicates which time to apply the sound element.
    ///	
    ///Pizzicato in a sound element effects all following notes. Yes indicates pizzicato, no indicates arco.
    ///
    ///The pan and elevation attributes are deprecated in Version 2.0. The pan and elevation elements in the midi-instrument element should be used instead. The meaning of the pan and elevation attributes is the same as for the pan and elevation elements. If both are present, the mid-instrument elements take priority.
    ///	
    ///The damper-pedal, soft-pedal, and sostenuto-pedal attributes effect playback of the three common piano pedals and their MIDI controller equivalents. The yes value indicates the pedal is depressed; no indicates the pedal is released. A numeric value from 0 to 100 may also be used for half pedaling. This value is the percentage that the pedal is depressed. A value of 0 is equivalent to no, and a value of 100 is equivalent to yes.
    ///	
    ///MIDI instruments are changed using the midi-instrument element.
    ///
    ///The offset element is used to indicate that the sound takes place offset from the current score position. If the sound element is a child of a direction element, the sound offset element overrides the direction offset element if both elements are present. Note that the offset reflects the intended musical position for the change in sound. It should not be used to compensate for latency issues in particular hardware configurations.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("sound", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Sound
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<MidiInstrument> midiInstrument;

        [System.Xml.Serialization.XmlElementAttribute("midi-instrument", Namespace = "")]
        public System.Collections.ObjectModel.Collection<MidiInstrument> MidiInstrument
        {
            get
            {
                return this.midiInstrument;
            }
            private set
            {
                this.midiInstrument = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MidiInstrument-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the MidiInstrument collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MidiInstrumentSpecified
        {
            get
            {
                return (this.MidiInstrument.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Sound" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Sound" /> class.</para>
        /// </summary>
        public Sound()
        {
            this.midiInstrument = new System.Collections.ObjectModel.Collection<MidiInstrument>();
        }

        [System.Xml.Serialization.XmlElementAttribute("offset", Namespace = "")]
        public Offset Offset { get; set; }

        /// <summary>
        /// <para>The non-negative-decimal type specifies a non-negative decimal value.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("tempo", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal Tempo { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Tempo-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Tempo property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TempoSpecified { get; set; }

        /// <summary>
        /// <para>The non-negative-decimal type specifies a non-negative decimal value.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("dynamics", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal Dynamics { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Dynamics-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Dynamics property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DynamicsSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("dacapo", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Dacapo { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Dacapo-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Dacapo property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DacapoSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("segno", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Segno { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("dalsegno", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Dalsegno { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("coda", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Coda { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("tocoda", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Tocoda { get; set; }

        /// <summary>
        /// <para>The divisions type is used to express values in terms of the musical divisions defined by the divisions element. It is preferred that these be integer values both for MIDI interoperability and to avoid roundoff errors.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("divisions", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal Divisions { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Divisions-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Divisions property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DivisionsSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("forward-repeat", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo ForwardRepeat { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ForwardRepeat-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ForwardRepeat property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ForwardRepeatSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("fine", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Fine { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("time-only", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string TimeOnly { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("pizzicato", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Pizzicato { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Pizzicato-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Pizzicato property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PizzicatoSpecified { get; set; }

        /// <summary>
        /// <para>The rotation-degrees type specifies rotation, pan, and elevation values in degrees. Values range from -180 to 180.</para>
        /// <para xml:lang="en">Minimum inclusive value: -180.</para>
        /// <para xml:lang="en">Maximum inclusive value: 180.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-180", "180")]
        [System.Xml.Serialization.XmlAttributeAttribute("pan", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal Pan { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Pan-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Pan property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PanSpecified { get; set; }

        /// <summary>
        /// <para>The rotation-degrees type specifies rotation, pan, and elevation values in degrees. Values range from -180 to 180.</para>
        /// <para xml:lang="en">Minimum inclusive value: -180.</para>
        /// <para xml:lang="en">Maximum inclusive value: 180.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-180", "180")]
        [System.Xml.Serialization.XmlAttributeAttribute("elevation", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal Elevation { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Elevation-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Elevation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ElevationSpecified { get; set; }

        /// <summary>
        /// <para>The yes-no-number type is used for attributes that can be either boolean or numeric values.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("damper-pedal", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string DamperPedal { get; set; }

        /// <summary>
        /// <para>The yes-no-number type is used for attributes that can be either boolean or numeric values.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("soft-pedal", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string SoftPedal { get; set; }

        /// <summary>
        /// <para>The yes-no-number type is used for attributes that can be either boolean or numeric values.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("sostenuto-pedal", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string SostenutoPedal { get; set; }
    }

    /// <summary>
    /// <para>The feature type is a part of the grouping element used for musical analysis. The type attribute represents the type of the feature and the element content represents its value. This type is flexible to allow for different analyses.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("feature", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Feature
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Type { get; set; }
    }

    /// <summary>
    /// <para>The first-fret type indicates which fret is shown in the top space of the frame; it is fret 1 if the element is not present. The optional text attribute indicates how this is represented in the fret diagram, while the location attribute indicates whether the text appears to the left or right of the frame.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("first-fret", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FirstFret
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("text", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Text { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("location", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LeftRight Location { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Location-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Location property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LocationSpecified { get; set; }
    }

    /// <summary>
    /// <para>The frame type represents a frame or fretboard diagram used together with a chord symbol. The representation is based on the NIFF guitar grid with additional information.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("frame", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Frame
    {

        /// <summary>
        /// <para>The frame-strings element gives the overall size of the frame in vertical lines (strings).</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("frame-strings", Namespace = "")]
        public string FrameStrings { get; set; }

        /// <summary>
        /// <para>The frame-frets element gives the overall size of the frame in horizontal spaces (frets).</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("frame-frets", Namespace = "")]
        public string FrameFrets { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("first-fret", Namespace = "")]
        public FirstFret FirstFret { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<FrameNote> frameNote;

        [System.Xml.Serialization.XmlElementAttribute("frame-note", Namespace = "")]
        public System.Collections.ObjectModel.Collection<FrameNote> FrameNote
        {
            get
            {
                return this.frameNote;
            }
            private set
            {
                this.frameNote = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Frame" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Frame" /> class.</para>
        /// </summary>
        public Frame()
        {
            this.frameNote = new System.Collections.ObjectModel.Collection<FrameNote>();
        }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("halign", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LeftCenterRight Halign { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Halign-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Halign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HalignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("valign", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Valign Valign { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Valign-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Valign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValignSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("height", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal Height { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Height-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Height property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HeightSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("width", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal Width { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Width-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Width property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WidthSpecified { get; set; }
    }

    /// <summary>
    /// <para>The frame-note type represents each note included in the frame. An open string will have a fret value of 0, while a muted string will not be associated with a frame-note element.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("frame-note", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FrameNote
    {

        [System.Xml.Serialization.XmlElementAttribute("string", Namespace = "")]
        public String String { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("fret", Namespace = "")]
        public Fret Fret { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("fingering", Namespace = "")]
        public Fingering Fingering { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("barre", Namespace = "")]
        public Barre Barre { get; set; }
    }

    /// <summary>
    /// <para>The grouping type is used for musical analysis. When the type attribute is "start" or "single", it usually contains one or more feature elements. The number attribute is used for distinguishing between overlapping and hierarchical groupings. The member-of attribute allows for easy distinguishing of what grouping elements are in what hierarchy. Feature elements contained within a "stop" type of grouping may be ignored.
    ///	
    ///This element is flexible to allow for different types of analyses. Future versions of the MusicXML format may add elements that can represent more standardized categories of analysis data, allowing for easier data sharing.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("grouping", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Grouping
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Feature> feature;

        [System.Xml.Serialization.XmlElementAttribute("feature", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Feature> Feature
        {
            get
            {
                return this.feature;
            }
            private set
            {
                this.feature = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Feature-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Feature collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FeatureSpecified
        {
            get
            {
                return (this.Feature.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Grouping" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Grouping" /> class.</para>
        /// </summary>
        public Grouping()
        {
            this.feature = new System.Collections.ObjectModel.Collection<Feature>();
        }

        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public StartStopSingle Type { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string number = "1";

        [System.ComponentModel.DefaultValueAttribute("1")]
        [System.Xml.Serialization.XmlAttributeAttribute("number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number
        {
            get
            {
                return this.number;
            }
            set
            {
                this.number = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("member-of", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string MemberOf { get; set; }
    }

    /// <summary>
    /// <para>The harmony type is based on Humdrum's **harm encoding, extended to support chord symbols in popular music as well as functional harmony analysis in classical music.
    ///	
    ///If there are alternate harmonies possible, this can be specified using multiple harmony elements differentiated by type. Explicit harmonies have all note present in the music; implied have some notes missing but implied; alternate represents alternate analyses. 
    ///	
    ///The harmony object may be used for analysis or for chord symbols. The print-object attribute controls whether or not anything is printed due to the harmony element. The print-frame attribute controls printing of a frame or fretboard diagram. The print-style attribute group sets the default for the harmony, but individual elements can override this with their own print-style values.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("harmony", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Harmony
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Root> root;

        [System.Xml.Serialization.XmlElementAttribute("root", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Root> Root
        {
            get
            {
                return this.root;
            }
            private set
            {
                this.root = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Root-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Root collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RootSpecified
        {
            get
            {
                return (this.Root.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Harmony" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Harmony" /> class.</para>
        /// </summary>
        public Harmony()
        {
            this.root = new System.Collections.ObjectModel.Collection<Root>();
            this.function = new System.Collections.ObjectModel.Collection<StyleText>();
            this.kind = new System.Collections.ObjectModel.Collection<Kind>();
            this.inversion = new System.Collections.ObjectModel.Collection<Inversion>();
            this.bass = new System.Collections.ObjectModel.Collection<Bass>();
            this.degree = new System.Collections.ObjectModel.Collection<Degree>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<StyleText> function;

        /// <summary>
        /// <para>The function element is used to represent classical functional harmony with an indication like I, II, III rather than C, D, E. It is relative to the key that is specified in the MusicXML encoding.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("function", Namespace = "")]
        public System.Collections.ObjectModel.Collection<StyleText> Function
        {
            get
            {
                return this.function;
            }
            private set
            {
                this.function = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Function-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Function collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FunctionSpecified
        {
            get
            {
                return (this.Function.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Kind> kind;

        [System.Xml.Serialization.XmlElementAttribute("kind", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Kind> Kind
        {
            get
            {
                return this.kind;
            }
            private set
            {
                this.kind = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Inversion> inversion;

        [System.Xml.Serialization.XmlElementAttribute("inversion", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Inversion> Inversion
        {
            get
            {
                return this.inversion;
            }
            private set
            {
                this.inversion = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Inversion-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Inversion collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InversionSpecified
        {
            get
            {
                return (this.Inversion.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Bass> bass;

        [System.Xml.Serialization.XmlElementAttribute("bass", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Bass> Bass
        {
            get
            {
                return this.bass;
            }
            private set
            {
                this.bass = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Bass-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Bass collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BassSpecified
        {
            get
            {
                return (this.Bass.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Degree> degree;

        [System.Xml.Serialization.XmlElementAttribute("degree", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Degree> Degree
        {
            get
            {
                return this.degree;
            }
            private set
            {
                this.degree = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Degree-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Degree collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DegreeSpecified
        {
            get
            {
                return (this.Degree.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("frame", Namespace = "")]
        public Frame Frame { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("offset", Namespace = "")]
        public Offset Offset { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("footnote", Namespace = "")]
        public FormattedText Footnote { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("level", Namespace = "")]
        public Level Level { get; set; }

        /// <summary>
        /// <para>Staff assignment is only needed for music notated on multiple staves. Used by both notes and directions. Staff values are numbers, with 1 referring to the top-most staff in a part.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("staff", Namespace = "")]
        public string Staff { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public HarmonyType Type { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Type-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PrintObject-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-frame", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo PrintFrame { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PrintFrame-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintFrame property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintFrameSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Placement-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }
    }

    /// <summary>
    /// <para>The root type indicates a pitch like C, D, E vs. a function indication like I, II, III. It is used with chord symbols in popular music. The root element has a root-step and optional root-alter element similar to the step and alter elements, but renamed to distinguish the different musical meanings.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("root", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Root
    {

        [System.Xml.Serialization.XmlElementAttribute("root-step", Namespace = "")]
        public RootStep RootStep { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("root-alter", Namespace = "")]
        public RootAlter RootAlter { get; set; }
    }

    /// <summary>
    /// <para>The root-step type represents the pitch step of the root of the current chord within the harmony element. The text attribute indicates how the root should appear on the page if not using the element contents.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("root-step", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RootStep
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public Step Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("text", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Text { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The root-alter type represents the chromatic alteration of the root of the current chord within the harmony element. In some chord styles, the text for the root-step element may include root-alter information. In that case, the print-object attribute of the root-alter element can be set to no. The location attribute indicates whether the alteration should appear to the left or the right of the root-step; it is right by default.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("root-alter", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RootAlter
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public decimal Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PrintObject-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("location", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LeftRight Location { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Location-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Location property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LocationSpecified { get; set; }
    }

    /// <summary>
    /// <para>The style-text type represents a text element with a print-style attribute group.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("style-text", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StyleText
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>Kind indicates the type of chord. Degree elements can then add, subtract, or alter from these starting points
    ///	
    ///The attributes are used to indicate the formatting of the symbol. Since the kind element is the constant in all the harmony-chord groups that can make up a polychord, many formatting attributes are here.
    ///	
    ///The use-symbols attribute is yes if the kind should be represented when possible with harmony symbols rather than letters and numbers. These symbols include:
    ///	
    ///	major: a triangle, like Unicode 25B3
    ///	minor: -, like Unicode 002D
    ///	augmented: +, like Unicode 002B
    ///	diminished: °, like Unicode 00B0
    ///	half-diminished: ø, like Unicode 00F8
    ///	
    ///The text attribute describes how the kind should be spelled if not using symbols; it is ignored if use-symbols is yes. The stack-degrees attribute is yes if the degree elements should be stacked above each other. The parentheses-degrees attribute is yes if all the degrees should be in parentheses. The bracket-degrees attribute is yes if all the degrees should be in a bracket. If not specified, these values are implementation-specific. The alignment attributes are for the entire harmony-chord group of which this kind element is a part.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("kind", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Kind
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public KindValue Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("use-symbols", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo UseSymbols { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die UseSymbols-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the UseSymbols property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UseSymbolsSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("text", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Text { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("stack-degrees", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo StackDegrees { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die StackDegrees-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StackDegrees property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StackDegreesSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("parentheses-degrees", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo ParenthesesDegrees { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ParenthesesDegrees-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ParenthesesDegrees property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParenthesesDegreesSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("bracket-degrees", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo BracketDegrees { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BracketDegrees-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BracketDegrees property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BracketDegreesSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("halign", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LeftCenterRight Halign { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Halign-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Halign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HalignSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("valign", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Valign Valign { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Valign-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Valign property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValignSpecified { get; set; }
    }

    /// <summary>
    /// <para>The inversion type represents harmony inversions. The value is a number indicating which inversion is used: 0 for root position, 1 for first inversion, etc.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("inversion", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Inversion
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The measure-numbering type describes how frequently measure numbers are displayed on this part. The number attribute from the measure element is used for printing. Measures with an implicit attribute set to "yes" never display a measure number, regardless of the measure-numbering setting.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("measure-numbering", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MeasureNumbering
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public MeasureNumberingValue Value { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The print type contains general printing parameters, including the layout elements defined in the layout.mod file. The part-name-display and part-abbreviation-display elements used in the score.mod file may also be used here to change how a part name or abbreviation is displayed over the course of a piece. They take effect when the current measure or a succeeding measure starts a new system.
    ///	
    ///Layout elements in a print statement only apply to the current page, system, staff, or measure. Music that follows continues to take the default values from the layout included in the defaults element.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("print", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Print
    {

        [System.Xml.Serialization.XmlElementAttribute("page-layout", Namespace = "")]
        public PageLayout PageLayout { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("system-layout", Namespace = "")]
        public SystemLayout SystemLayout { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<StaffLayout> staffLayout;

        [System.Xml.Serialization.XmlElementAttribute("staff-layout", Namespace = "")]
        public System.Collections.ObjectModel.Collection<StaffLayout> StaffLayout
        {
            get
            {
                return this.staffLayout;
            }
            private set
            {
                this.staffLayout = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die StaffLayout-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the StaffLayout collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StaffLayoutSpecified
        {
            get
            {
                return (this.StaffLayout.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Print" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Print" /> class.</para>
        /// </summary>
        public Print()
        {
            this.staffLayout = new System.Collections.ObjectModel.Collection<StaffLayout>();
        }

        [System.Xml.Serialization.XmlElementAttribute("measure-layout", Namespace = "")]
        public MeasureLayout MeasureLayout { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("measure-numbering", Namespace = "")]
        public MeasureNumbering MeasureNumbering { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("part-name-display", Namespace = "")]
        public NameDisplay PartNameDisplay { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("part-abbreviation-display", Namespace = "")]
        public NameDisplay PartAbbreviationDisplay { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("staff-spacing", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal StaffSpacing { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die StaffSpacing-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StaffSpacing property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StaffSpacingSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("new-system", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo NewSystem { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NewSystem-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NewSystem property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NewSystemSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("new-page", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo NewPage { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NewPage-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NewPage property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NewPageSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("blank-page", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string BlankPage { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("page-number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string PageNumber { get; set; }
    }

    /// <summary>
    /// <para>Page layout can be defined both in score-wide defaults and in the print element. Page margins are specified either for both even and odd pages, or via separate odd and even page number values. The type is not needed when used as part of a print element. If omitted when used in the defaults element, "both" is the default.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("page-layout", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PageLayout
    {

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("page-height", Namespace = "")]
        public decimal PageHeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PageHeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PageHeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PageHeightSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("page-width", Namespace = "")]
        public decimal PageWidth { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PageWidth-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PageWidth property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PageWidthSpecified { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<PageMargins> pageMargins;

        [System.Xml.Serialization.XmlElementAttribute("page-margins", Namespace = "")]
        public System.Collections.ObjectModel.Collection<PageMargins> PageMargins
        {
            get
            {
                return this.pageMargins;
            }
            private set
            {
                this.pageMargins = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PageMargins-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the PageMargins collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PageMarginsSpecified
        {
            get
            {
                return (this.PageMargins.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="PageLayout" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="PageLayout" /> class.</para>
        /// </summary>
        public PageLayout()
        {
            this.pageMargins = new System.Collections.ObjectModel.Collection<PageMargins>();
        }
    }

    /// <summary>
    /// <para>Page margins are specified either for both even and odd pages, or via separate odd and even page number values. The type attribute is not needed when used as part of a print element. If omitted when the page-margins type is used in the defaults element, "both" is the default value.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("page-margins", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PageMargins
    {

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("left-margin", Namespace = "")]
        public decimal LeftMargin { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("right-margin", Namespace = "")]
        public decimal RightMargin { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("top-margin", Namespace = "")]
        public decimal TopMargin { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("bottom-margin", Namespace = "")]
        public decimal BottomMargin { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public MarginType Type { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Type-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Type property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeSpecified { get; set; }
    }

    /// <summary>
    /// <para>System layout includes left and right margins and the vertical distance from the previous system. The system distance is measured from the bottom line of the previous system to the top line of the current system. It is ignored for the first system on a page. The top system distance is measured from the page's top margin to the top line of the first system. It is ignored for all but the first system on a page.
    ///	
    ///Sometimes the sum of measure widths in a system may not equal the system width specified by the layout elements due to roundoff or other errors. The behavior when reading MusicXML files in these cases is application-dependent. For instance, applications may find that the system layout data is more reliable than the sum of the measure widths, and adjust the measure widths accordingly.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("system-layout", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SystemLayout
    {

        [System.Xml.Serialization.XmlElementAttribute("system-margins", Namespace = "")]
        public SystemMargins SystemMargins { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("system-distance", Namespace = "")]
        public decimal SystemDistance { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SystemDistance-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the SystemDistance property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SystemDistanceSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("top-system-distance", Namespace = "")]
        public decimal TopSystemDistance { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TopSystemDistance-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the TopSystemDistance property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TopSystemDistanceSpecified { get; set; }
    }

    /// <summary>
    /// <para>System margins are relative to the page margins. Positive values indent and negative values reduce the margin size.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("system-margins", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SystemMargins
    {

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("left-margin", Namespace = "")]
        public decimal LeftMargin { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("right-margin", Namespace = "")]
        public decimal RightMargin { get; set; }
    }

    /// <summary>
    /// <para>Staff layout includes the vertical distance from the bottom line of the previous staff in this system to the top line of the staff specified by the number attribute. The optional number attribute refers to staff numbers within the part, from top to bottom on the system. A value of 1 is assumed if not present. When used in the defaults element, the values apply to all parts. This value is ignored for the first staff in a system.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("staff-layout", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StaffLayout
    {

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("staff-distance", Namespace = "")]
        public decimal StaffDistance { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die StaffDistance-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StaffDistance property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StaffDistanceSpecified { get; set; }

        /// <summary>
        /// <para>The staff-number type indicates staff numbers within a multi-staff part. Staves are numbered from top to bottom, with 1 being the top staff on a part.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number { get; set; }
    }

    /// <summary>
    /// <para>The measure-layout type includes the horizontal distance from the previous measure.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("measure-layout", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MeasureLayout
    {

        /// <summary>
        /// <para>The measure-distance element specifies the horizontal distance from the previous measure. This value is only used for systems where there is horizontal whitespace in the middle of a system, as in systems with codas. To specify the measure width, use the width attribute of the measure element.</para>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("measure-distance", Namespace = "")]
        public decimal MeasureDistance { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MeasureDistance-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MeasureDistance property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MeasureDistanceSpecified { get; set; }
    }

    /// <summary>
    /// <para>The encoding element contains information about who did the digital encoding, when, with what software, and in what aspects. Standard type values for the encoder element are music, words, and arrangement, but other types may be used. The type attribute is only needed when there are multiple encoder elements.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("encoding", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Encoding
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<System.DateTime> encodingDate;

        /// <summary>
        /// <para>Calendar dates are represented yyyy-mm-dd format, following ISO 8601. This is a W3C XML Schema date type, but without the optional timezone data.</para>
        /// <para xml:lang="en">Pattern: [^:Z]*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^:Z]*")]
        [System.Xml.Serialization.XmlElementAttribute("encoding-date", Namespace = "", DataType = "date")]
        public System.Collections.ObjectModel.Collection<System.DateTime> EncodingDate
        {
            get
            {
                return this.encodingDate;
            }
            private set
            {
                this.encodingDate = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EncodingDate-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the EncodingDate collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EncodingDateSpecified
        {
            get
            {
                return (this.EncodingDate.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Encoding" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Encoding" /> class.</para>
        /// </summary>
        public Encoding()
        {
            this.encodingDate = new System.Collections.ObjectModel.Collection<System.DateTime>();
            this.encoder = new System.Collections.ObjectModel.Collection<TypedText>();
            this.software = new System.Collections.ObjectModel.Collection<string>();
            this.encodingDescription = new System.Collections.ObjectModel.Collection<string>();
            this.supports = new System.Collections.ObjectModel.Collection<Supports>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TypedText> encoder;

        [System.Xml.Serialization.XmlElementAttribute("encoder", Namespace = "")]
        public System.Collections.ObjectModel.Collection<TypedText> Encoder
        {
            get
            {
                return this.encoder;
            }
            private set
            {
                this.encoder = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Encoder-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Encoder collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EncoderSpecified
        {
            get
            {
                return (this.Encoder.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> software;

        [System.Xml.Serialization.XmlElementAttribute("software", Namespace = "")]
        public System.Collections.ObjectModel.Collection<string> Software
        {
            get
            {
                return this.software;
            }
            private set
            {
                this.software = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Software-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Software collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SoftwareSpecified
        {
            get
            {
                return (this.Software.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> encodingDescription;

        [System.Xml.Serialization.XmlElementAttribute("encoding-description", Namespace = "")]
        public System.Collections.ObjectModel.Collection<string> EncodingDescription
        {
            get
            {
                return this.encodingDescription;
            }
            private set
            {
                this.encodingDescription = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EncodingDescription-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the EncodingDescription collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EncodingDescriptionSpecified
        {
            get
            {
                return (this.EncodingDescription.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Supports> supports;

        [System.Xml.Serialization.XmlElementAttribute("supports", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Supports> Supports
        {
            get
            {
                return this.supports;
            }
            private set
            {
                this.supports = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Supports-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Supports collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SupportsSpecified
        {
            get
            {
                return (this.Supports.Count != 0);
            }
        }
    }

    /// <summary>
    /// <para>The supports type indicates if a MusicXML encoding supports a particular MusicXML element. This is recommended for elements like beam, stem, and accidental, where the absence of an element is ambiguous if you do not know if the encoding supports that element. For Version 2.0, the supports element is expanded to allow programs to indicate support for particular attributes or particular values. This lets applications communicate, for example, that all system and/or page breaks are contained in the MusicXML file.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("supports", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Supports
    {

        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Type { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("element", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Element { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("attribute", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Attribute { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("value", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Value { get; set; }
    }

    /// <summary>
    /// <para>Identification contains basic metadata about the score. It includes the information in MuseData headers that may apply at a score-wide, movement-wide, or part-wide level. The creator, rights, source, and relation elements are based on Dublin Core.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("identification", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Identification
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TypedText> creator;

        /// <summary>
        /// <para>The creator element is borrowed from Dublin Core. It is used for the creators of the score. The type attribute is used to distinguish different creative contributions. Thus, there can be multiple creators within an identification. Standard type values are composer, lyricist, and arranger. Other type values may be used for different types of creative roles. The type attribute should usually be used even if there is just a single creator element. The MusicXML format does not use the creator / contributor distinction from Dublin Core.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("creator", Namespace = "")]
        public System.Collections.ObjectModel.Collection<TypedText> Creator
        {
            get
            {
                return this.creator;
            }
            private set
            {
                this.creator = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Creator-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Creator collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreatorSpecified
        {
            get
            {
                return (this.Creator.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Identification" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Identification" /> class.</para>
        /// </summary>
        public Identification()
        {
            this.creator = new System.Collections.ObjectModel.Collection<TypedText>();
            this.rights = new System.Collections.ObjectModel.Collection<TypedText>();
            this.relation = new System.Collections.ObjectModel.Collection<TypedText>();
            this.miscellaneous = new System.Collections.ObjectModel.Collection<MiscellaneousField>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TypedText> rights;

        /// <summary>
        /// <para>The rights element is borrowed from Dublin Core. It contains copyright and other intellectual property notices. Words, music, and derivatives can have different types, so multiple rights tags with different type attributes are supported. Standard type values are music, words, and arrangement, but other types may be used. The type attribute is only needed when there are multiple rights elements.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("rights", Namespace = "")]
        public System.Collections.ObjectModel.Collection<TypedText> Rights
        {
            get
            {
                return this.rights;
            }
            private set
            {
                this.rights = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Rights-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Rights collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RightsSpecified
        {
            get
            {
                return (this.Rights.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("encoding", Namespace = "")]
        public Encoding Encoding { get; set; }

        /// <summary>
        /// <para>The source for the music that is encoded. This is similar to the Dublin Core source element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("source", Namespace = "")]
        public string Source { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TypedText> relation;

        /// <summary>
        /// <para>A related resource for the music that is encoded. This is similar to the Dublin Core relation element. Standard type values are music, words, and arrangement, but other types may be used.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("relation", Namespace = "")]
        public System.Collections.ObjectModel.Collection<TypedText> Relation
        {
            get
            {
                return this.relation;
            }
            private set
            {
                this.relation = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Relation-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Relation collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelationSpecified
        {
            get
            {
                return (this.Relation.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<MiscellaneousField> miscellaneous;

        [System.Xml.Serialization.XmlArrayAttribute("miscellaneous", Namespace = "")]
        [System.Xml.Serialization.XmlArrayItemAttribute("miscellaneous-field", Namespace = "")]
        public System.Collections.ObjectModel.Collection<MiscellaneousField> Miscellaneous
        {
            get
            {
                return this.miscellaneous;
            }
            private set
            {
                this.miscellaneous = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Miscellaneous-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Miscellaneous collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MiscellaneousSpecified
        {
            get
            {
                return (this.Miscellaneous.Count != 0);
            }
        }
    }

    /// <summary>
    /// <para>If a program has other metadata not yet supported in the MusicXML format, it can go in the miscellaneous element. The miscellaneous type puts each separate part of metadata into its own miscellaneous-field type.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("miscellaneous", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Miscellaneous
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<MiscellaneousField> miscellaneousField;

        [System.Xml.Serialization.XmlElementAttribute("miscellaneous-field", Namespace = "")]
        public System.Collections.ObjectModel.Collection<MiscellaneousField> MiscellaneousField
        {
            get
            {
                return this.miscellaneousField;
            }
            private set
            {
                this.miscellaneousField = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MiscellaneousField-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the MiscellaneousField collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MiscellaneousFieldSpecified
        {
            get
            {
                return (this.MiscellaneousField.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Miscellaneous" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Miscellaneous" /> class.</para>
        /// </summary>
        public Miscellaneous()
        {
            this.miscellaneousField = new System.Collections.ObjectModel.Collection<MiscellaneousField>();
        }
    }

    /// <summary>
    /// <para>If a program has other metadata not yet supported in the MusicXML format, each type of metadata can go in a miscellaneous-field element. The required name attribute indicates the type of metadata the element content represents.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("miscellaneous-field", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MiscellaneousField
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("name", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name { get; set; }
    }

    /// <summary>
    /// <para>The appearance type controls general graphical settings for the music's final form appearance on a printed page of display. Currently this includes support for line widths and definitions for note sizes, plus an extension element for other aspects of appearance.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("appearance", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Appearance
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<LineWidth> lineWidth;

        [System.Xml.Serialization.XmlElementAttribute("line-width", Namespace = "")]
        public System.Collections.ObjectModel.Collection<LineWidth> LineWidth
        {
            get
            {
                return this.lineWidth;
            }
            private set
            {
                this.lineWidth = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LineWidth-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LineWidth collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineWidthSpecified
        {
            get
            {
                return (this.LineWidth.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Appearance" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Appearance" /> class.</para>
        /// </summary>
        public Appearance()
        {
            this.lineWidth = new System.Collections.ObjectModel.Collection<LineWidth>();
            this.noteSize = new System.Collections.ObjectModel.Collection<NoteSize>();
            this.otherAppearance = new System.Collections.ObjectModel.Collection<OtherAppearance>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<NoteSize> noteSize;

        [System.Xml.Serialization.XmlElementAttribute("note-size", Namespace = "")]
        public System.Collections.ObjectModel.Collection<NoteSize> NoteSize
        {
            get
            {
                return this.noteSize;
            }
            private set
            {
                this.noteSize = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NoteSize-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the NoteSize collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NoteSizeSpecified
        {
            get
            {
                return (this.NoteSize.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<OtherAppearance> otherAppearance;

        [System.Xml.Serialization.XmlElementAttribute("other-appearance", Namespace = "")]
        public System.Collections.ObjectModel.Collection<OtherAppearance> OtherAppearance
        {
            get
            {
                return this.otherAppearance;
            }
            private set
            {
                this.otherAppearance = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OtherAppearance-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the OtherAppearance collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OtherAppearanceSpecified
        {
            get
            {
                return (this.OtherAppearance.Count != 0);
            }
        }
    }

    /// <summary>
    /// <para>The line-width type indicates the width of a line type in tenths. The type attribute defines what type of line is being defined. Values include beam, bracket, dashes, enclosure, ending, extend, heavy barline, leger, light barline, octave shift, pedal, slur middle, slur tip, staff, stem, tie middle, tie tip, tuplet bracket, and wedge. The text content is expressed in tenths.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("line-width", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LineWidth
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public decimal Value { get; set; }

        /// <summary>
        /// <para>The line-width-type defines what type of line is being defined in a line-width element. Values include beam, bracket, dashes, enclosure, ending, extend, heavy barline, leger, light barline, octave shift, pedal, slur middle, slur tip, staff, stem, tie middle, tie tip, tuplet bracket, and wedge. This is left as a string so that other application-specific types can be defined, but it is made a separate type so that it can be redefined more strictly.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Type { get; set; }
    }

    /// <summary>
    /// <para>The note-size type indicates the percentage of the regular note size to use for notes with a cue and large size as defined in the type element. The grace type is used for notes of cue size that that include a grace element. The cue type is used for all other notes with cue size, whether defined explicitly or implicitly via a cue element. The large type is used for notes of large size. The text content represent the numeric percentage. A value of 100 would be identical to the size of a regular note as defined by the music font.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("note-size", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NoteSize
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public decimal Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public NoteSizeType Type { get; set; }
    }

    /// <summary>
    /// <para>The other-appearance type is used to define any graphical settings not yet in the current version of the MusicXML format. This allows extended representation, though without application interoperability.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("other-appearance", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OtherAppearance
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Type { get; set; }
    }

    /// <summary>
    /// <para>Margins, page sizes, and distances are all measured in tenths to keep MusicXML data in a consistent coordinate system as much as possible. The translation to absolute units is done with the scaling type, which specifies how many millimeters are equal to how many tenths. For a staff height of 7 mm, millimeters would be set to 7 while tenths is set to 40. The ability to set a formula rather than a single scaling factor helps avoid roundoff errors.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("scaling", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Scaling
    {

        /// <summary>
        /// <para>The millimeters type is a number representing millimeters. This is used in the scaling element to provide a default scaling from tenths to physical units.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("millimeters", Namespace = "")]
        public decimal Millimeters { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("tenths", Namespace = "")]
        public decimal Tenths { get; set; }
    }

    /// <summary>
    /// <para>The bookmark type serves as a well-defined target for an incoming simple XLink.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("bookmark", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Bookmark
    {

        [System.Xml.Serialization.XmlAttributeAttribute("id", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("name", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("element", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Element { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("position", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Position { get; set; }
    }

    /// <summary>
    /// <para>The link type serves as an outgoing simple XLink. It is also used to connect a MusicXML score with a MusicXML opus.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("link", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Link
    {

        [System.Xml.Serialization.XmlAttributeAttribute("href", Namespace = "http://www.w3.org/1999/xlink")]
        public string Href { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private MusicXmlSchema.Type type = MusicXmlSchema.Type.Simple;

        [System.ComponentModel.DefaultValueAttribute(MusicXmlSchema.Type.Simple)]
        [System.Xml.Serialization.XmlAttributeAttribute("type", Namespace = "http://www.w3.org/1999/xlink")]
        public MusicXmlSchema.Type Type
        {
            get
            {
                return this.type;
            }
            set
            {
                this.type = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("role", Namespace = "http://www.w3.org/1999/xlink")]
        public string Role { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("title", Namespace = "http://www.w3.org/1999/xlink")]
        public string Title { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private MusicXmlSchema.Show show = MusicXmlSchema.Show.Replace;

        [System.ComponentModel.DefaultValueAttribute(MusicXmlSchema.Show.Replace)]
        [System.Xml.Serialization.XmlAttributeAttribute("show", Namespace = "http://www.w3.org/1999/xlink")]
        public MusicXmlSchema.Show Show
        {
            get
            {
                return this.show;
            }
            set
            {
                this.show = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private MusicXmlSchema.Actuate actuate = MusicXmlSchema.Actuate.OnRequest;

        [System.ComponentModel.DefaultValueAttribute(MusicXmlSchema.Actuate.OnRequest)]
        [System.Xml.Serialization.XmlAttributeAttribute("actuate", Namespace = "http://www.w3.org/1999/xlink")]
        public MusicXmlSchema.Actuate Actuate
        {
            get
            {
                return this.actuate;
            }
            set
            {
                this.actuate = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("name", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("element", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Element { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("position", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Position { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }
    }

    /// <summary>
    /// <para>The accidental type represents actual notated accidentals. Editorial and cautionary indications are indicated by attributes. Values for these attributes are "no" if not present. Specific graphic display such as parentheses, brackets, and size are controlled by the level-display attribute group.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("accidental", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Accidental
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public AccidentalValue Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("cautionary", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Cautionary { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Cautionary-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Cautionary property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CautionarySpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("editorial", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Editorial { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Editorial-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Editorial property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EditorialSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("parentheses", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Parentheses { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Parentheses-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Parentheses property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParenthesesSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("bracket", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Bracket { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Bracket-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Bracket property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BracketSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public SymbolSize Size { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Size-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Size property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SizeSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>An accidental-mark can be used as a separate notation or as part of an ornament. When used in an ornament, position and placement are relative to the ornament, not relative to the note.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("accidental-mark", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AccidentalMark
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public AccidentalValue Value { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Placement-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }
    }

    /// <summary>
    /// <para>The arpeggiate type indicates that this note is part of an arpeggiated chord. The number attribute can be used to distinguish between two simultaneous chords arpeggiated separately (different numbers) or together (same number). The up-down attribute is used if there is an arrow on the arpeggio sign. By default, arpeggios go from the lowest to highest note.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("arpeggiate", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Arpeggiate
    {

        /// <summary>
        /// <para>Slurs, tuplets, and many other features can be concurrent and overlapping within a single musical part. The number-level type distinguishes up to six concurrent objects of the same type. A reading program should be prepared to handle cases where the number-levels stop in an arbitrary order. Different numbers are needed when the features overlap in MusicXML file order. When a number-level value is implied, the value is 1 by default.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 6.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "6")]
        [System.Xml.Serialization.XmlAttributeAttribute("number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("direction", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public UpDown Direction { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Direction-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Direction property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DirectionSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Placement-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>Articulations and accents are grouped together here.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("articulations", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Articulations
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> accent;

        /// <summary>
        /// <para>The accent element indicates a regular horizontal accent mark.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("accent", Namespace = "")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> Accent
        {
            get
            {
                return this.accent;
            }
            private set
            {
                this.accent = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Accent-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Accent collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccentSpecified
        {
            get
            {
                return (this.Accent.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Articulations" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Articulations" /> class.</para>
        /// </summary>
        public Articulations()
        {
            this.accent = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this.strongAccent = new System.Collections.ObjectModel.Collection<StrongAccent>();
            this.staccato = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this.tenuto = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this.detachedLegato = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this.staccatissimo = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this.spiccato = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this.scoop = new System.Collections.ObjectModel.Collection<EmptyLine>();
            this.plop = new System.Collections.ObjectModel.Collection<EmptyLine>();
            this.doit = new System.Collections.ObjectModel.Collection<EmptyLine>();
            this.falloff = new System.Collections.ObjectModel.Collection<EmptyLine>();
            this.breathMark = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this.caesura = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this.stress = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this.unstress = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this.otherArticulation = new System.Collections.ObjectModel.Collection<PlacementText>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<StrongAccent> strongAccent;

        /// <summary>
        /// <para>The strong-accent element indicates a vertical accent mark.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("strong-accent", Namespace = "")]
        public System.Collections.ObjectModel.Collection<StrongAccent> StrongAccent
        {
            get
            {
                return this.strongAccent;
            }
            private set
            {
                this.strongAccent = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die StrongAccent-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the StrongAccent collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StrongAccentSpecified
        {
            get
            {
                return (this.StrongAccent.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> staccato;

        /// <summary>
        /// <para>The staccato element is used for a dot articulation, as opposed to a stroke or a wedge.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("staccato", Namespace = "")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> Staccato
        {
            get
            {
                return this.staccato;
            }
            private set
            {
                this.staccato = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Staccato-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Staccato collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StaccatoSpecified
        {
            get
            {
                return (this.Staccato.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> tenuto;

        /// <summary>
        /// <para>The tenuto element indicates a tenuto line symbol.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("tenuto", Namespace = "")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> Tenuto
        {
            get
            {
                return this.tenuto;
            }
            private set
            {
                this.tenuto = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Tenuto-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Tenuto collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TenutoSpecified
        {
            get
            {
                return (this.Tenuto.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> detachedLegato;

        /// <summary>
        /// <para>The detached-legato element indicates the combination of a tenuto line and staccato dot symbol.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("detached-legato", Namespace = "")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> DetachedLegato
        {
            get
            {
                return this.detachedLegato;
            }
            private set
            {
                this.detachedLegato = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DetachedLegato-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the DetachedLegato collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DetachedLegatoSpecified
        {
            get
            {
                return (this.DetachedLegato.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> staccatissimo;

        /// <summary>
        /// <para>The staccatissimo element is used for a wedge articulation, as opposed to a dot or a stroke.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("staccatissimo", Namespace = "")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> Staccatissimo
        {
            get
            {
                return this.staccatissimo;
            }
            private set
            {
                this.staccatissimo = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Staccatissimo-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Staccatissimo collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StaccatissimoSpecified
        {
            get
            {
                return (this.Staccatissimo.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> spiccato;

        /// <summary>
        /// <para>The spiccato element is used for a stroke articulation, as opposed to a dot or a wedge.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("spiccato", Namespace = "")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> Spiccato
        {
            get
            {
                return this.spiccato;
            }
            private set
            {
                this.spiccato = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Spiccato-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Spiccato collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SpiccatoSpecified
        {
            get
            {
                return (this.Spiccato.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyLine> scoop;

        /// <summary>
        /// <para>The scoop element is an indeterminate slide attached to a single note. The scoop element appears before the main note and comes from below the main pitch.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("scoop", Namespace = "")]
        public System.Collections.ObjectModel.Collection<EmptyLine> Scoop
        {
            get
            {
                return this.scoop;
            }
            private set
            {
                this.scoop = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Scoop-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Scoop collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ScoopSpecified
        {
            get
            {
                return (this.Scoop.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyLine> plop;

        /// <summary>
        /// <para>The plop element is an indeterminate slide attached to a single note. The plop element appears before the main note and comes from above the main pitch.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("plop", Namespace = "")]
        public System.Collections.ObjectModel.Collection<EmptyLine> Plop
        {
            get
            {
                return this.plop;
            }
            private set
            {
                this.plop = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Plop-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Plop collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlopSpecified
        {
            get
            {
                return (this.Plop.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyLine> doit;

        /// <summary>
        /// <para>The doit element is an indeterminate slide attached to a single note. The doit element appears after the main note and goes above the main pitch.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("doit", Namespace = "")]
        public System.Collections.ObjectModel.Collection<EmptyLine> Doit
        {
            get
            {
                return this.doit;
            }
            private set
            {
                this.doit = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Doit-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Doit collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DoitSpecified
        {
            get
            {
                return (this.Doit.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyLine> falloff;

        /// <summary>
        /// <para>The falloff element is an indeterminate slide attached to a single note. The falloff element appears before the main note and goes below the main pitch.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("falloff", Namespace = "")]
        public System.Collections.ObjectModel.Collection<EmptyLine> Falloff
        {
            get
            {
                return this.falloff;
            }
            private set
            {
                this.falloff = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Falloff-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Falloff collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FalloffSpecified
        {
            get
            {
                return (this.Falloff.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> breathMark;

        /// <summary>
        /// <para>The breath-mark element indicates a place to take a breath. It is typically notated with a comma / apostrophe symbol.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("breath-mark", Namespace = "")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> BreathMark
        {
            get
            {
                return this.breathMark;
            }
            private set
            {
                this.breathMark = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BreathMark-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the BreathMark collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BreathMarkSpecified
        {
            get
            {
                return (this.BreathMark.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> caesura;

        /// <summary>
        /// <para>The caesura element indicates a slight pause. It is notated using a "railroad tracks" symbol.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("caesura", Namespace = "")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> Caesura
        {
            get
            {
                return this.caesura;
            }
            private set
            {
                this.caesura = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Caesura-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Caesura collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CaesuraSpecified
        {
            get
            {
                return (this.Caesura.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> stress;

        /// <summary>
        /// <para>The stress element indicates a stressed note.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("stress", Namespace = "")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> Stress
        {
            get
            {
                return this.stress;
            }
            private set
            {
                this.stress = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Stress-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Stress collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StressSpecified
        {
            get
            {
                return (this.Stress.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> unstress;

        /// <summary>
        /// <para>The unstress element indicates an unstressed note. It is often notated using a u-shaped symbol.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("unstress", Namespace = "")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> Unstress
        {
            get
            {
                return this.unstress;
            }
            private set
            {
                this.unstress = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Unstress-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Unstress collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UnstressSpecified
        {
            get
            {
                return (this.Unstress.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<PlacementText> otherArticulation;

        /// <summary>
        /// <para>The other-articulation element is used to define any articulations not yet in the MusicXML format. This allows extended representation, though without application interoperability.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("other-articulation", Namespace = "")]
        public System.Collections.ObjectModel.Collection<PlacementText> OtherArticulation
        {
            get
            {
                return this.otherArticulation;
            }
            private set
            {
                this.otherArticulation = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OtherArticulation-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the OtherArticulation collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OtherArticulationSpecified
        {
            get
            {
                return (this.OtherArticulation.Count != 0);
            }
        }
    }

    /// <summary>
    /// <para>The strong-accent type indicates a vertical accent mark. The type attribute indicates if the point of the accent is down or up.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("strong-accent", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StrongAccent : EmptyPlacement
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private UpDown type = MusicXmlSchema.UpDown.Up;

        [System.ComponentModel.DefaultValueAttribute(MusicXmlSchema.UpDown.Up)]
        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public UpDown Type
        {
            get
            {
                return this.type;
            }
            set
            {
                this.type = value;
            }
        }
    }

    /// <summary>
    /// <para>The empty-line type represents an empty element with line-shape, line-type, print-style and placement attributes.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("empty-line", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmptyLine
    {

        [System.Xml.Serialization.XmlAttributeAttribute("line-shape", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LineShape LineShape { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LineShape-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LineShape property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineShapeSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("line-type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LineType LineType { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LineType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LineType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineTypeSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Placement-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }
    }

    /// <summary>
    /// <para>The placement-text type represents a text element with print-style and placement attribute groups.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("placement-text", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PlacementText
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Placement-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }
    }

    /// <summary>
    /// <para>The backup and forward elements are required to coordinate multiple voices in one part, including music on multiple staves. The backup type is generally used to move between voices and staves. Thus the backup element does not include voice or staff elements. Duration values should always be positive, and should not cross measure boundaries.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("backup", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Backup
    {

        /// <summary>
        /// <para>Duration is a positive number specified in division units. This is the intended duration vs. notated duration (for instance, swing eighths vs. even eighths, or differences in dotted notes in Baroque-era music). Differences in duration specific to an interpretation or performance should use the note element's attack and release attributes.</para>
        /// <para>The positive-divisions type restricts divisions values to positive numbers.</para>
        /// <para xml:lang="en">Minimum exclusive value: 0.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("duration", Namespace = "")]
        public decimal Duration { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("footnote", Namespace = "")]
        public FormattedText Footnote { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("level", Namespace = "")]
        public Level Level { get; set; }
    }

    /// <summary>
    /// <para>Beam values include begin, continue, end, forward hook, and backward hook. Up to six concurrent beam levels are available to cover up to 256th notes. The repeater attribute, used for tremolos, needs to be specified with a "yes" value for each beam using it. Beams that have a begin value can also have a fan attribute to indicate accelerandos and ritardandos using fanned beams. The fan attribute may also be used with a continue value if the fanning direction changes on that note. The value is "none" if not specified.
    ///	
    ///Note that the beam number does not distinguish sets of beams that overlap, as it does for slur and other elements. Beaming groups are distinguished by being in different voices and/or the presence or absence of grace and cue elements.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("beam", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Beam
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public BeamValue Value { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string number = "1";

        /// <summary>
        /// <para>The MusicXML format supports six levels of beaming, up to 256th notes. Unlike the number-level type, the beam-level type identifies concurrent beams in a beam group. It does not distinguish overlapping beams such as grace notes within regular notes, or beams used in different voices.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 6.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute("1")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "6")]
        [System.Xml.Serialization.XmlAttributeAttribute("number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number
        {
            get
            {
                return this.number;
            }
            set
            {
                this.number = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("repeater", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Repeater { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Repeater-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Repeater property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RepeaterSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("fan", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public Fan Fan { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Fan-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Fan property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FanSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The bend type is used in guitar and tablature. The bend-alter element indicates the number of steps in the bend, similar to the alter element. As with the alter element, numbers like 0.5 can be used to indicate microtones. Negative numbers indicate pre-bends or releases; the pre-bend and release elements are used to distinguish what is intended. A with-bar element indicates that the bend is to be done at the bridge with a whammy or vibrato bar. The content of the element indicates how this should be notated.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("bend", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Bend
    {

        /// <summary>
        /// <para>The bend-alter element indicates the number of steps in the bend, similar to the alter element. As with the alter element, numbers like 0.5 can be used to indicate microtones. Negative numbers indicate pre-bends or releases; the pre-bend and release elements are used to distinguish what is intended.</para>
        /// <para>The semintones type is a number representing semitones, used for chromatic alteration. A value of -1 corresponds to a flat and a value of 1 to a sharp. Decimal values like 0.5 (quarter tone sharp) may be used for microtones.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("bend-alter", Namespace = "")]
        public decimal BendAlter { get; set; }

        /// <summary>
        /// <para>The pre-bend element indicates that this is a pre-bend rather than a normal bend or a release.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("pre-bend", Namespace = "")]
        public Empty PreBend { get; set; }

        /// <summary>
        /// <para>The release element indicates that this is a release rather than a normal bend or pre-bend.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("release", Namespace = "")]
        public Empty Release { get; set; }

        /// <summary>
        /// <para>The with-bar element indicates that the bend is to be done at the bridge with a whammy or vibrato bar. The content of the element indicates how this should be notated.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("with-bar", Namespace = "")]
        public PlacementText WithBar { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("accelerate", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Accelerate { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Accelerate-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Accelerate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccelerateSpecified { get; set; }

        /// <summary>
        /// <para>The trill-beats type specifies the beats used in a trill-sound or bend-sound attribute group. It is a decimal value with a minimum value of 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: 2.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("beats", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal Beats { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Beats-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Beats property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BeatsSpecified { get; set; }

        /// <summary>
        /// <para>The percent type specifies a percentage from 0 to 100.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "100")]
        [System.Xml.Serialization.XmlAttributeAttribute("first-beat", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal FirstBeat { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FirstBeat-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FirstBeat property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FirstBeatSpecified { get; set; }

        /// <summary>
        /// <para>The percent type specifies a percentage from 0 to 100.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "100")]
        [System.Xml.Serialization.XmlAttributeAttribute("last-beat", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal LastBeat { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LastBeat-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastBeat property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LastBeatSpecified { get; set; }
    }

    /// <summary>
    /// <para>The display-step-octave type contains the sequence of elements used by both the rest and unpitched elements. This group is used to place rests and unpitched elements on the staff without implying that these elements have pitch. Positioning follows the current clef. If percussion clef is used, the display-step and display-octave elements are interpreted as if in treble clef, with a G in octave 4 on line 2. If not present, the note is placed on the middle line of the staff, generally used for one-line staffs.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("display-step-octave", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DisplayStepOctave
    {

        [System.Xml.Serialization.XmlElementAttribute("display-step", Namespace = "")]
        public Step DisplayStep { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DisplayStep-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DisplayStep property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DisplayStepSpecified { get; set; }

        /// <summary>
        /// <para>Octaves are represented by the numbers 0 to 9, where 4 indicates the octave started by middle C.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9")]
        [System.Xml.Serialization.XmlElementAttribute("display-octave", Namespace = "")]
        public string DisplayOctave { get; set; }
    }

    /// <summary>
    /// <para>In Version 2.0, the content of the elision type is used to specify the symbol used to display the elision. Common values are a no-break space (Unicode 00A0), an underscore (Unicode 005F), or an undertie (Unicode 203F).</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("elision", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Elision
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The extend type represents word extensions for lyrics.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("extend", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Extend
    {

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The figure type represents a single figure within a figured-bass element.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("figure", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Figure
    {

        /// <summary>
        /// <para>Values for the prefix element include the accidental values sharp, flat, natural, double-sharp, flat-flat, and sharp-sharp. The prefix element may contain additional values for symbols specific to particular figured bass styles.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("prefix", Namespace = "")]
        public StyleText Prefix { get; set; }

        /// <summary>
        /// <para>A figure-number is a number. Overstrikes of the figure number are represented in the suffix element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("figure-number", Namespace = "")]
        public StyleText FigureNumber { get; set; }

        /// <summary>
        /// <para>Values for the suffix element include the accidental values sharp, flat, natural, double-sharp, flat-flat, and sharp-sharp. Suffixes include both symbols that come after the figure number and those that overstrike the figure number. The suffix value slash is used for slashed numbers indicating chromatic alteration. The orientation and display of the slash usually depends on the figure number. The suffix element may contain additional values for symbols specific to particular figured bass styles.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("suffix", Namespace = "")]
        public StyleText Suffix { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("extend", Namespace = "")]
        public Extend Extend { get; set; }
    }

    /// <summary>
    /// <para>The figured-bass element represents figured bass notation. Figured bass elements take their position from the first regular note that follows. Figures are ordered from top to bottom. The value of parentheses is "no" if not present.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("figured-bass", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FiguredBass
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Figure> figure;

        [System.Xml.Serialization.XmlElementAttribute("figure", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Figure> Figure
        {
            get
            {
                return this.figure;
            }
            private set
            {
                this.figure = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="FiguredBass" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="FiguredBass" /> class.</para>
        /// </summary>
        public FiguredBass()
        {
            this.figure = new System.Collections.ObjectModel.Collection<Figure>();
        }

        /// <summary>
        /// <para>Duration is a positive number specified in division units. This is the intended duration vs. notated duration (for instance, swing eighths vs. even eighths, or differences in dotted notes in Baroque-era music). Differences in duration specific to an interpretation or performance should use the note element's attack and release attributes.</para>
        /// <para>The positive-divisions type restricts divisions values to positive numbers.</para>
        /// <para xml:lang="en">Minimum exclusive value: 0.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("duration", Namespace = "")]
        public decimal Duration { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Duration-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Duration property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DurationSpecified { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("footnote", Namespace = "")]
        public FormattedText Footnote { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("level", Namespace = "")]
        public Level Level { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PrintObject-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-dot", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo PrintDot { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PrintDot-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintDot property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintDotSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-spacing", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo PrintSpacing { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PrintSpacing-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintSpacing property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintSpacingSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-lyric", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo PrintLyric { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PrintLyric-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintLyric property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintLyricSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("parentheses", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Parentheses { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Parentheses-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Parentheses property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParenthesesSpecified { get; set; }
    }

    /// <summary>
    /// <para>The backup and forward elements are required to coordinate multiple voices in one part, including music on multiple staves. The forward element is generally used within voices and staves. Duration values should always be positive, and should not cross measure boundaries.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("forward", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Forward
    {

        /// <summary>
        /// <para>Duration is a positive number specified in division units. This is the intended duration vs. notated duration (for instance, swing eighths vs. even eighths, or differences in dotted notes in Baroque-era music). Differences in duration specific to an interpretation or performance should use the note element's attack and release attributes.</para>
        /// <para>The positive-divisions type restricts divisions values to positive numbers.</para>
        /// <para xml:lang="en">Minimum exclusive value: 0.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("duration", Namespace = "")]
        public decimal Duration { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("footnote", Namespace = "")]
        public FormattedText Footnote { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("level", Namespace = "")]
        public Level Level { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("voice", Namespace = "")]
        public string Voice { get; set; }

        /// <summary>
        /// <para>Staff assignment is only needed for music notated on multiple staves. Used by both notes and directions. Staff values are numbers, with 1 referring to the top-most staff in a part.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("staff", Namespace = "")]
        public string Staff { get; set; }
    }

    /// <summary>
    /// <para>Glissando and slide types both indicate rapidly moving from one pitch to the other so that individual notes are not discerned. The distinction is similar to that between NIFF's glissando and portamento elements. A glissando sounds the half notes in between the slide and defaults to a wavy line. The optional text is printed alongside the line.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("glissando", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Glissando
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public StartStop Type { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string number = "1";

        /// <summary>
        /// <para>Slurs, tuplets, and many other features can be concurrent and overlapping within a single musical part. The number-level type distinguishes up to six concurrent objects of the same type. A reading program should be prepared to handle cases where the number-levels stop in an arbitrary order. Different numbers are needed when the features overlap in MusicXML file order. When a number-level value is implied, the value is 1 by default.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 6.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute("1")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "6")]
        [System.Xml.Serialization.XmlAttributeAttribute("number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number
        {
            get
            {
                return this.number;
            }
            set
            {
                this.number = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("line-type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LineType LineType { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LineType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LineType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineTypeSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The grace type indicates the presence of a grace note. The slash attribute for a grace note is yes for slashed eighth notes. The other grace note attributes come from MuseData sound suggestions. Steal-time-previous indicates the percentage of time to steal from the previous note for the grace note. Steal-time-following indicates the percentage of time to steal from the following note for the grace note. Make-time indicates to make time, not steal time; the units are in real-time divisions for the grace note.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("grace", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Grace
    {

        /// <summary>
        /// <para>The percent type specifies a percentage from 0 to 100.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "100")]
        [System.Xml.Serialization.XmlAttributeAttribute("steal-time-previous", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal StealTimePrevious { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die StealTimePrevious-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StealTimePrevious property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StealTimePreviousSpecified { get; set; }

        /// <summary>
        /// <para>The percent type specifies a percentage from 0 to 100.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "100")]
        [System.Xml.Serialization.XmlAttributeAttribute("steal-time-following", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal StealTimeFollowing { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die StealTimeFollowing-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the StealTimeFollowing property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StealTimeFollowingSpecified { get; set; }

        /// <summary>
        /// <para>The divisions type is used to express values in terms of the musical divisions defined by the divisions element. It is preferred that these be integer values both for MIDI interoperability and to avoid roundoff errors.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("make-time", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal MakeTime { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MakeTime-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the MakeTime property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MakeTimeSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("slash", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Slash { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Slash-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Slash property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SlashSpecified { get; set; }
    }

    /// <summary>
    /// <para>The hammer-on and pull-off elements are used in guitar and fretted instrument notation. Since a single slur can be marked over many notes, the hammer-on and pull-off elements are separate so the individual pair of notes can be specified. The element content can be used to specify how the hammer-on or pull-off should be notated. An empty element leaves this choice up to the application.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("hammer-on-pull-off", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HammerOnPullOff
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public StartStop Type { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string number = "1";

        /// <summary>
        /// <para>Slurs, tuplets, and many other features can be concurrent and overlapping within a single musical part. The number-level type distinguishes up to six concurrent objects of the same type. A reading program should be prepared to handle cases where the number-levels stop in an arbitrary order. Different numbers are needed when the features overlap in MusicXML file order. When a number-level value is implied, the value is 1 by default.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 6.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute("1")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "6")]
        [System.Xml.Serialization.XmlAttributeAttribute("number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number
        {
            get
            {
                return this.number;
            }
            set
            {
                this.number = value;
            }
        }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Placement-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }
    }

    /// <summary>
    /// <para>The harmonic type indicates natural and artificial harmonics. Allowing the type of pitch to be specified, combined with controls for appearance/playback differences, allows both the notation and the sound to be represented. Artificial harmonics can add a notated touching-pitch; artificial pinch harmonics will usually not notate a touching pitch. The attributes for the harmonic element refer to the use of the circular harmonic symbol, typically but not always used with natural harmonics.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("harmonic", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Harmonic
    {

        /// <summary>
        /// <para>The natural element indicates that this is a natural harmonic. These are usually notated at base pitch rather than sounding pitch.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("natural", Namespace = "")]
        public Empty Natural { get; set; }

        /// <summary>
        /// <para>The artificial element indicates that this is an artificial harmonic.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("artificial", Namespace = "")]
        public Empty Artificial { get; set; }

        /// <summary>
        /// <para>The base pitch is the pitch at which the string is played before touching to create the harmonic.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("base-pitch", Namespace = "")]
        public Empty BasePitch { get; set; }

        /// <summary>
        /// <para>The touching-pitch is the pitch at which the string is touched lightly to produce the harmonic.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("touching-pitch", Namespace = "")]
        public Empty TouchingPitch { get; set; }

        /// <summary>
        /// <para>The sounding-pitch is the pitch which is heard when playing the harmonic.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("sounding-pitch", Namespace = "")]
        public Empty SoundingPitch { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PrintObject-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Placement-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }
    }

    /// <summary>
    /// <para>The heel and toe elements are used with organ pedals. The substitution value is "no" if the attribute is not present.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("heel-toe", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class HeelToe : EmptyPlacement
    {

        [System.Xml.Serialization.XmlAttributeAttribute("substitution", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Substitution { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Substitution-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Substitution property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SubstitutionSpecified { get; set; }
    }

    /// <summary>
    /// <para>The instrument type distinguishes between score-instrument elements in a score-part. The id attribute is an IDREF back to the score-instrument ID. If multiple score-instruments are specified on a score-part, there should be an instrument element for each note in the part.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("instrument", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Instrument
    {

        [System.Xml.Serialization.XmlAttributeAttribute("id", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The lyric type represents text underlays for lyrics, based on Humdrum with support for other formats. Two text elements that are not separated by an elision element are part of the same syllable, but may have different text formatting. The MusicXML 2.0 XSD is more strict than the 2.0 DTD in enforcing this by disallowing a second syllabic element unless preceded by an elision element. The lyric number indicates multiple lines, though a name can be used as well (as in Finale's verse / chorus / section specification). Justification is center by default; placement is below by default.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("lyric", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Lyric
    {

        [System.Xml.Serialization.XmlElementAttribute("syllabic", Namespace = "")]
        public Syllabic Syllabic { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Syllabic-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Syllabic property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SyllabicSpecified { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("text", Namespace = "")]
        public TextElementData Text { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Elision> elision;

        [System.Xml.Serialization.XmlElementAttribute("elision", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Elision> Elision
        {
            get
            {
                return this.elision;
            }
            private set
            {
                this.elision = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Elision-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Elision collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ElisionSpecified
        {
            get
            {
                return (this.Elision.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Lyric" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Lyric" /> class.</para>
        /// </summary>
        public Lyric()
        {
            this.elision = new System.Collections.ObjectModel.Collection<Elision>();
        }

        [System.Xml.Serialization.XmlElementAttribute("extend", Namespace = "")]
        public Extend Extend { get; set; }

        /// <summary>
        /// <para>The laughing element is taken from Humdrum.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("laughing", Namespace = "")]
        public Empty Laughing { get; set; }

        /// <summary>
        /// <para>The humming element is taken from Humdrum.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("humming", Namespace = "")]
        public Empty Humming { get; set; }

        /// <summary>
        /// <para>The end-line element comes from RP-017 for Standard MIDI File Lyric meta-events. It facilitates lyric display for Karaoke and similar applications.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("end-line", Namespace = "")]
        public Empty EndLine { get; set; }

        /// <summary>
        /// <para>The end-paragraph element comes from RP-017 for Standard MIDI File Lyric meta-events. It facilitates lyric display for Karaoke and similar applications.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("end-paragraph", Namespace = "")]
        public Empty EndParagraph { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("footnote", Namespace = "")]
        public FormattedText Footnote { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("level", Namespace = "")]
        public Level Level { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("name", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("justify", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LeftCenterRight Justify { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Justify-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Justify property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool JustifySpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Placement-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The text-element-data type represents a syllable or portion of a syllable for lyric text underlay. A hyphen in the string content should only be used for an actual hyphenated word. Language names for text elements come from ISO 639, with optional country subcodes from ISO 3166.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("text-element-data", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TextElementData
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("underline", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Underline { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("overline", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Overline { get; set; }

        /// <summary>
        /// <para>The number-of-lines type is used to specify the number of lines in text decoration attributes.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 3.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "3")]
        [System.Xml.Serialization.XmlAttributeAttribute("line-through", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string LineThrough { get; set; }

        /// <summary>
        /// <para>The rotation-degrees type specifies rotation, pan, and elevation values in degrees. Values range from -180 to 180.</para>
        /// <para xml:lang="en">Minimum inclusive value: -180.</para>
        /// <para xml:lang="en">Maximum inclusive value: 180.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "-180", "180")]
        [System.Xml.Serialization.XmlAttributeAttribute("rotation", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal Rotation { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Rotation-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Rotation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RotationSpecified { get; set; }

        /// <summary>
        /// <para>The number-or-normal values can be either a decimal number or the string "normal". This is used by the line-height and letter-spacing attributes.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("letter-spacing", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string LetterSpacing { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("lang", Namespace = "http://www.w3.org/XML/1998/namespace")]
        public string Lang { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("dir", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public TextDirection Dir { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Dir-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Dir property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DirSpecified { get; set; }
    }

    /// <summary>
    /// <para>The mordent type is used for both represents the mordent sign with the vertical line and the inverted-mordent sign without the line. The long attribute is "no" by default.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("mordent", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Mordent : EmptyTrillSound
    {

        [System.Xml.Serialization.XmlAttributeAttribute("long", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Long { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Long-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Long property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LongSpecified { get; set; }
    }

    /// <summary>
    /// <para>The non-arpeggiate type indicates that this note is at the top or bottom of a bracket indicating to not arpeggiate these notes. Since this does not involve playback, it is only used on the top or bottom notes, not on each note as for the arpeggiate type.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("non-arpeggiate", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NonArpeggiate
    {

        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public TopBottom Type { get; set; }

        /// <summary>
        /// <para>Slurs, tuplets, and many other features can be concurrent and overlapping within a single musical part. The number-level type distinguishes up to six concurrent objects of the same type. A reading program should be prepared to handle cases where the number-levels stop in an arbitrary order. Different numbers are needed when the features overlap in MusicXML file order. When a number-level value is implied, the value is 1 by default.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 6.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "6")]
        [System.Xml.Serialization.XmlAttributeAttribute("number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Placement-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>Notations refer to musical notations, not XML notations. Multiple notations are allowed in order to represent multiple editorial levels. The set of notations may be refined and expanded over time, especially to handle more instrument-specific technical notations.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("notations", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Notations
    {

        [System.Xml.Serialization.XmlElementAttribute("footnote", Namespace = "")]
        public FormattedText Footnote { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("level", Namespace = "")]
        public Level Level { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Tied> tied;

        [System.Xml.Serialization.XmlElementAttribute("tied", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Tied> Tied
        {
            get
            {
                return this.tied;
            }
            private set
            {
                this.tied = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Tied-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Tied collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TiedSpecified
        {
            get
            {
                return (this.Tied.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Notations" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Notations" /> class.</para>
        /// </summary>
        public Notations()
        {
            this.tied = new System.Collections.ObjectModel.Collection<Tied>();
            this.slur = new System.Collections.ObjectModel.Collection<Slur>();
            this.tuplet = new System.Collections.ObjectModel.Collection<Tuplet>();
            this.glissando = new System.Collections.ObjectModel.Collection<Glissando>();
            this.slide = new System.Collections.ObjectModel.Collection<Slide>();
            this.ornaments = new System.Collections.ObjectModel.Collection<Ornaments>();
            this.technical = new System.Collections.ObjectModel.Collection<Technical>();
            this.articulations = new System.Collections.ObjectModel.Collection<Articulations>();
            this.dynamics = new System.Collections.ObjectModel.Collection<Dynamics>();
            this.fermata = new System.Collections.ObjectModel.Collection<Fermata>();
            this.arpeggiate = new System.Collections.ObjectModel.Collection<Arpeggiate>();
            this.nonArpeggiate = new System.Collections.ObjectModel.Collection<NonArpeggiate>();
            this.accidentalMark = new System.Collections.ObjectModel.Collection<AccidentalMark>();
            this.otherNotation = new System.Collections.ObjectModel.Collection<OtherNotation>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Slur> slur;

        [System.Xml.Serialization.XmlElementAttribute("slur", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Slur> Slur
        {
            get
            {
                return this.slur;
            }
            private set
            {
                this.slur = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Slur-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Slur collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SlurSpecified
        {
            get
            {
                return (this.Slur.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Tuplet> tuplet;

        [System.Xml.Serialization.XmlElementAttribute("tuplet", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Tuplet> Tuplet
        {
            get
            {
                return this.tuplet;
            }
            private set
            {
                this.tuplet = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Tuplet-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Tuplet collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TupletSpecified
        {
            get
            {
                return (this.Tuplet.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Glissando> glissando;

        [System.Xml.Serialization.XmlElementAttribute("glissando", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Glissando> Glissando
        {
            get
            {
                return this.glissando;
            }
            private set
            {
                this.glissando = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Glissando-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Glissando collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GlissandoSpecified
        {
            get
            {
                return (this.Glissando.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Slide> slide;

        [System.Xml.Serialization.XmlElementAttribute("slide", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Slide> Slide
        {
            get
            {
                return this.slide;
            }
            private set
            {
                this.slide = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Slide-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Slide collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SlideSpecified
        {
            get
            {
                return (this.Slide.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Ornaments> ornaments;

        [System.Xml.Serialization.XmlElementAttribute("ornaments", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Ornaments> Ornaments
        {
            get
            {
                return this.ornaments;
            }
            private set
            {
                this.ornaments = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Ornaments-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Ornaments collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OrnamentsSpecified
        {
            get
            {
                return (this.Ornaments.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Technical> technical;

        [System.Xml.Serialization.XmlElementAttribute("technical", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Technical> Technical
        {
            get
            {
                return this.technical;
            }
            private set
            {
                this.technical = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Technical-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Technical collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TechnicalSpecified
        {
            get
            {
                return (this.Technical.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Articulations> articulations;

        [System.Xml.Serialization.XmlElementAttribute("articulations", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Articulations> Articulations
        {
            get
            {
                return this.articulations;
            }
            private set
            {
                this.articulations = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Articulations-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Articulations collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ArticulationsSpecified
        {
            get
            {
                return (this.Articulations.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Dynamics> dynamics;

        [System.Xml.Serialization.XmlElementAttribute("dynamics", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Dynamics> Dynamics
        {
            get
            {
                return this.dynamics;
            }
            private set
            {
                this.dynamics = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Dynamics-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Dynamics collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DynamicsSpecified
        {
            get
            {
                return (this.Dynamics.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Fermata> fermata;

        [System.Xml.Serialization.XmlElementAttribute("fermata", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Fermata> Fermata
        {
            get
            {
                return this.fermata;
            }
            private set
            {
                this.fermata = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Fermata-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Fermata collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FermataSpecified
        {
            get
            {
                return (this.Fermata.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Arpeggiate> arpeggiate;

        [System.Xml.Serialization.XmlElementAttribute("arpeggiate", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Arpeggiate> Arpeggiate
        {
            get
            {
                return this.arpeggiate;
            }
            private set
            {
                this.arpeggiate = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Arpeggiate-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Arpeggiate collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ArpeggiateSpecified
        {
            get
            {
                return (this.Arpeggiate.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<NonArpeggiate> nonArpeggiate;

        [System.Xml.Serialization.XmlElementAttribute("non-arpeggiate", Namespace = "")]
        public System.Collections.ObjectModel.Collection<NonArpeggiate> NonArpeggiate
        {
            get
            {
                return this.nonArpeggiate;
            }
            private set
            {
                this.nonArpeggiate = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NonArpeggiate-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the NonArpeggiate collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NonArpeggiateSpecified
        {
            get
            {
                return (this.NonArpeggiate.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<AccidentalMark> accidentalMark;

        [System.Xml.Serialization.XmlElementAttribute("accidental-mark", Namespace = "")]
        public System.Collections.ObjectModel.Collection<AccidentalMark> AccidentalMark
        {
            get
            {
                return this.accidentalMark;
            }
            private set
            {
                this.accidentalMark = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AccidentalMark-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AccidentalMark collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccidentalMarkSpecified
        {
            get
            {
                return (this.AccidentalMark.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<OtherNotation> otherNotation;

        [System.Xml.Serialization.XmlElementAttribute("other-notation", Namespace = "")]
        public System.Collections.ObjectModel.Collection<OtherNotation> OtherNotation
        {
            get
            {
                return this.otherNotation;
            }
            private set
            {
                this.otherNotation = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OtherNotation-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the OtherNotation collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OtherNotationSpecified
        {
            get
            {
                return (this.OtherNotation.Count != 0);
            }
        }
    }

    /// <summary>
    /// <para>The tied type represents the notated tie. The tie element represents the tie sound.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tied", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Tied
    {

        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public StartStop Type { get; set; }

        /// <summary>
        /// <para>Slurs, tuplets, and many other features can be concurrent and overlapping within a single musical part. The number-level type distinguishes up to six concurrent objects of the same type. A reading program should be prepared to handle cases where the number-levels stop in an arbitrary order. Different numbers are needed when the features overlap in MusicXML file order. When a number-level value is implied, the value is 1 by default.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 6.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "6")]
        [System.Xml.Serialization.XmlAttributeAttribute("number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("line-type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LineType LineType { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LineType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LineType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineTypeSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Placement-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("orientation", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public OverUnder Orientation { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Orientation-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Orientation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OrientationSpecified { get; set; }

        /// <summary>
        /// <para>The divisions type is used to express values in terms of the musical divisions defined by the divisions element. It is preferred that these be integer values both for MIDI interoperability and to avoid roundoff errors.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("bezier-offset", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal BezierOffset { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BezierOffset-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BezierOffset property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BezierOffsetSpecified { get; set; }

        /// <summary>
        /// <para>The divisions type is used to express values in terms of the musical divisions defined by the divisions element. It is preferred that these be integer values both for MIDI interoperability and to avoid roundoff errors.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("bezier-offset2", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal BezierOffset2 { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BezierOffset2-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BezierOffset2 property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BezierOffset2Specified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("bezier-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal BezierX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BezierX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BezierX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BezierXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("bezier-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal BezierY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BezierY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BezierY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BezierYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("bezier-x2", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal BezierX2 { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BezierX2-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BezierX2 property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BezierX2Specified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("bezier-y2", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal BezierY2 { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BezierY2-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BezierY2 property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BezierY2Specified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>Slur types are empty. Most slurs are represented with two elements: one with a start type, and one with a stop type. Slurs can add more elements using a continue type. This is typically used to specify the formatting of cross-system slurs, or to specify the shape of very complex slurs.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("slur", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Slur
    {

        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public StartStopContinue Type { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string number = "1";

        /// <summary>
        /// <para>Slurs, tuplets, and many other features can be concurrent and overlapping within a single musical part. The number-level type distinguishes up to six concurrent objects of the same type. A reading program should be prepared to handle cases where the number-levels stop in an arbitrary order. Different numbers are needed when the features overlap in MusicXML file order. When a number-level value is implied, the value is 1 by default.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 6.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute("1")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "6")]
        [System.Xml.Serialization.XmlAttributeAttribute("number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number
        {
            get
            {
                return this.number;
            }
            set
            {
                this.number = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("line-type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LineType LineType { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LineType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LineType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineTypeSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Placement-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("orientation", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public OverUnder Orientation { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Orientation-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Orientation property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OrientationSpecified { get; set; }

        /// <summary>
        /// <para>The divisions type is used to express values in terms of the musical divisions defined by the divisions element. It is preferred that these be integer values both for MIDI interoperability and to avoid roundoff errors.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("bezier-offset", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal BezierOffset { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BezierOffset-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BezierOffset property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BezierOffsetSpecified { get; set; }

        /// <summary>
        /// <para>The divisions type is used to express values in terms of the musical divisions defined by the divisions element. It is preferred that these be integer values both for MIDI interoperability and to avoid roundoff errors.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("bezier-offset2", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal BezierOffset2 { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BezierOffset2-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BezierOffset2 property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BezierOffset2Specified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("bezier-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal BezierX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BezierX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BezierX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BezierXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("bezier-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal BezierY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BezierY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BezierY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BezierYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("bezier-x2", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal BezierX2 { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BezierX2-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BezierX2 property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BezierX2Specified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("bezier-y2", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal BezierY2 { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die BezierY2-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the BezierY2 property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BezierY2Specified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>A tuplet element is present when a tuplet is to be displayed graphically, in addition to the sound data provided by the time-modification elements. The number attribute is used to distinguish nested tuplets. The bracket attribute is used to indicate the presence of a bracket. If unspecified, the results are implementation-dependent. The line-shape attribute is used to specify whether the bracket is straight or in the older curved or slurred style. It is straight by default.
    ///	
    ///Whereas a time-modification element shows how the cumulative, sounding effect of tuplets compare to the written note type, the tuplet element describes how each tuplet is displayed.
    ///	
    ///The show-number attribute is used to display either the number of actual notes, the number of both actual and normal notes, or neither. It is actual by default. The show-type attribute is used to display either the actual type, both the actual and normal types, or neither. It is none by default.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tuplet", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Tuplet
    {

        /// <summary>
        /// <para>The tuplet-actual element provide optional full control over how the actual part of the tuplet is displayed, including number and note type (with dots). If any of these elements are absent, their values are based on the time-modification element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("tuplet-actual", Namespace = "")]
        public TupletPortion TupletActual { get; set; }

        /// <summary>
        /// <para>The tuplet-normal element provide optional full control over how the normal part of the tuplet is displayed, including number and note type (with dots). If any of these elements are absent, their values are based on the time-modification element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("tuplet-normal", Namespace = "")]
        public TupletPortion TupletNormal { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public StartStop Type { get; set; }

        /// <summary>
        /// <para>Slurs, tuplets, and many other features can be concurrent and overlapping within a single musical part. The number-level type distinguishes up to six concurrent objects of the same type. A reading program should be prepared to handle cases where the number-levels stop in an arbitrary order. Different numbers are needed when the features overlap in MusicXML file order. When a number-level value is implied, the value is 1 by default.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 6.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "6")]
        [System.Xml.Serialization.XmlAttributeAttribute("number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("bracket", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Bracket { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Bracket-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Bracket property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BracketSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("show-number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ShowTuplet ShowNumber { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ShowNumber-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ShowNumber property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ShowNumberSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("show-type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ShowTuplet ShowType { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ShowType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the ShowType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ShowTypeSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("line-shape", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LineShape LineShape { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LineShape-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LineShape property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineShapeSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Placement-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }
    }

    /// <summary>
    /// <para>The tuplet-portion type provides optional full control over tuplet specifications. It allows the number and note type (including dots) to be set for the actual and normal portions of a single tuplet. If any of these elements are absent, their values are based on the time-modification element.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tuplet-portion", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TupletPortion
    {

        [System.Xml.Serialization.XmlElementAttribute("tuplet-number", Namespace = "")]
        public TupletNumber TupletNumber { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("tuplet-type", Namespace = "")]
        public TupletType TupletType { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<TupletDot> tupletDot;

        [System.Xml.Serialization.XmlElementAttribute("tuplet-dot", Namespace = "")]
        public System.Collections.ObjectModel.Collection<TupletDot> TupletDot
        {
            get
            {
                return this.tupletDot;
            }
            private set
            {
                this.tupletDot = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TupletDot-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the TupletDot collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TupletDotSpecified
        {
            get
            {
                return (this.TupletDot.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="TupletPortion" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="TupletPortion" /> class.</para>
        /// </summary>
        public TupletPortion()
        {
            this.tupletDot = new System.Collections.ObjectModel.Collection<TupletDot>();
        }
    }

    /// <summary>
    /// <para>The tuplet-number type indicates the number of notes for this portion of the tuplet.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tuplet-number", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TupletNumber
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The tuplet-type type indicates the graphical note type of the notes for this portion of the tuplet.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tuplet-type", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TupletType
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public NoteTypeValue Value { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The tuplet-dot type is used to specify dotted normal tuplet types.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tuplet-dot", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TupletDot
    {

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>Glissando and slide types both indicate rapidly moving from one pitch to the other so that individual notes are not discerned. The distinction is similar to that between NIFF's glissando and portamento elements. A slide is continuous between two notes and defaults to a solid line. The optional text for a is printed alongside the line.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("slide", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Slide
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public StartStop Type { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string number = "1";

        /// <summary>
        /// <para>Slurs, tuplets, and many other features can be concurrent and overlapping within a single musical part. The number-level type distinguishes up to six concurrent objects of the same type. A reading program should be prepared to handle cases where the number-levels stop in an arbitrary order. Different numbers are needed when the features overlap in MusicXML file order. When a number-level value is implied, the value is 1 by default.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 6.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute("1")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "6")]
        [System.Xml.Serialization.XmlAttributeAttribute("number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number
        {
            get
            {
                return this.number;
            }
            set
            {
                this.number = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("line-type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LineType LineType { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LineType-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LineType property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineTypeSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("accelerate", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Accelerate { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Accelerate-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Accelerate property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccelerateSpecified { get; set; }

        /// <summary>
        /// <para>The trill-beats type specifies the beats used in a trill-sound or bend-sound attribute group. It is a decimal value with a minimum value of 2.</para>
        /// <para xml:lang="en">Minimum inclusive value: 2.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("beats", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal Beats { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Beats-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Beats property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BeatsSpecified { get; set; }

        /// <summary>
        /// <para>The percent type specifies a percentage from 0 to 100.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "100")]
        [System.Xml.Serialization.XmlAttributeAttribute("first-beat", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal FirstBeat { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FirstBeat-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FirstBeat property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FirstBeatSpecified { get; set; }

        /// <summary>
        /// <para>The percent type specifies a percentage from 0 to 100.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 100.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "100")]
        [System.Xml.Serialization.XmlAttributeAttribute("last-beat", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal LastBeat { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LastBeat-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the LastBeat property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LastBeatSpecified { get; set; }
    }

    /// <summary>
    /// <para>Ornaments can be any of several types, followed optionally by accidentals. The accidental-mark element's content is represented the same as an accidental element, but with a different name to reflect the different musical meaning.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ornaments", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Ornaments
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyTrillSound> trillMark;

        /// <summary>
        /// <para>The trill-mark element represents the trill-mark symbol.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("trill-mark", Namespace = "")]
        public System.Collections.ObjectModel.Collection<EmptyTrillSound> TrillMark
        {
            get
            {
                return this.trillMark;
            }
            private set
            {
                this.trillMark = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TrillMark-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the TrillMark collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TrillMarkSpecified
        {
            get
            {
                return (this.TrillMark.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Ornaments" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Ornaments" /> class.</para>
        /// </summary>
        public Ornaments()
        {
            this.trillMark = new System.Collections.ObjectModel.Collection<EmptyTrillSound>();
            this.turn = new System.Collections.ObjectModel.Collection<EmptyTrillSound>();
            this.delayedTurn = new System.Collections.ObjectModel.Collection<EmptyTrillSound>();
            this.invertedTurn = new System.Collections.ObjectModel.Collection<EmptyTrillSound>();
            this.shake = new System.Collections.ObjectModel.Collection<EmptyTrillSound>();
            this.wavyLine = new System.Collections.ObjectModel.Collection<WavyLine>();
            this.mordent = new System.Collections.ObjectModel.Collection<Mordent>();
            this.invertedMordent = new System.Collections.ObjectModel.Collection<Mordent>();
            this.schleifer = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this.tremolo = new System.Collections.ObjectModel.Collection<Tremolo>();
            this.otherOrnament = new System.Collections.ObjectModel.Collection<PlacementText>();
            this.accidentalMark = new System.Collections.ObjectModel.Collection<AccidentalMark>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyTrillSound> turn;

        /// <summary>
        /// <para>The turn element is the normal turn shape which goes up then down.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("turn", Namespace = "")]
        public System.Collections.ObjectModel.Collection<EmptyTrillSound> Turn
        {
            get
            {
                return this.turn;
            }
            private set
            {
                this.turn = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Turn-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Turn collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TurnSpecified
        {
            get
            {
                return (this.Turn.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyTrillSound> delayedTurn;

        /// <summary>
        /// <para>The delayed-turn element indicates a normal turn that is delayed until the end of the current note.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("delayed-turn", Namespace = "")]
        public System.Collections.ObjectModel.Collection<EmptyTrillSound> DelayedTurn
        {
            get
            {
                return this.delayedTurn;
            }
            private set
            {
                this.delayedTurn = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DelayedTurn-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the DelayedTurn collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DelayedTurnSpecified
        {
            get
            {
                return (this.DelayedTurn.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyTrillSound> invertedTurn;

        /// <summary>
        /// <para>The inverted-turn element has the shape which goes down and then up.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("inverted-turn", Namespace = "")]
        public System.Collections.ObjectModel.Collection<EmptyTrillSound> InvertedTurn
        {
            get
            {
                return this.invertedTurn;
            }
            private set
            {
                this.invertedTurn = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die InvertedTurn-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the InvertedTurn collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InvertedTurnSpecified
        {
            get
            {
                return (this.InvertedTurn.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyTrillSound> shake;

        /// <summary>
        /// <para>The shake element has a similar appearance to an inverted-mordent element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("shake", Namespace = "")]
        public System.Collections.ObjectModel.Collection<EmptyTrillSound> Shake
        {
            get
            {
                return this.shake;
            }
            private set
            {
                this.shake = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Shake-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Shake collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ShakeSpecified
        {
            get
            {
                return (this.Shake.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<WavyLine> wavyLine;

        [System.Xml.Serialization.XmlElementAttribute("wavy-line", Namespace = "")]
        public System.Collections.ObjectModel.Collection<WavyLine> WavyLine
        {
            get
            {
                return this.wavyLine;
            }
            private set
            {
                this.wavyLine = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die WavyLine-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the WavyLine collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WavyLineSpecified
        {
            get
            {
                return (this.WavyLine.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Mordent> mordent;

        /// <summary>
        /// <para>The mordent element represents the sign with the vertical line. The long attribute is "no" by default.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("mordent", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Mordent> Mordent
        {
            get
            {
                return this.mordent;
            }
            private set
            {
                this.mordent = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Mordent-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Mordent collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MordentSpecified
        {
            get
            {
                return (this.Mordent.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Mordent> invertedMordent;

        /// <summary>
        /// <para>The inverted-mordent element represents the sign without the vertical line. The long attribute is "no" by default.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("inverted-mordent", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Mordent> InvertedMordent
        {
            get
            {
                return this.invertedMordent;
            }
            private set
            {
                this.invertedMordent = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die InvertedMordent-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the InvertedMordent collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InvertedMordentSpecified
        {
            get
            {
                return (this.InvertedMordent.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> schleifer;

        /// <summary>
        /// <para>The name for this ornament is based on the German, to avoid confusion with the more common slide element defined earlier.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("schleifer", Namespace = "")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> Schleifer
        {
            get
            {
                return this.schleifer;
            }
            private set
            {
                this.schleifer = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Schleifer-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Schleifer collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SchleiferSpecified
        {
            get
            {
                return (this.Schleifer.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Tremolo> tremolo;

        /// <summary>
        /// <para>While using repeater beams was the original method for indicating tremolos, often playback and display are not well-enough integrated in an application to make that feasible. The tremolo ornament can be used to indicate either single-note or double-note tremolos.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("tremolo", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Tremolo> Tremolo
        {
            get
            {
                return this.tremolo;
            }
            private set
            {
                this.tremolo = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Tremolo-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Tremolo collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TremoloSpecified
        {
            get
            {
                return (this.Tremolo.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<PlacementText> otherOrnament;

        /// <summary>
        /// <para>The other-ornament element is used to define any ornaments not yet in the MusicXML format. This allows extended representation, though without application interoperability.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("other-ornament", Namespace = "")]
        public System.Collections.ObjectModel.Collection<PlacementText> OtherOrnament
        {
            get
            {
                return this.otherOrnament;
            }
            private set
            {
                this.otherOrnament = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OtherOrnament-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the OtherOrnament collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OtherOrnamentSpecified
        {
            get
            {
                return (this.OtherOrnament.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<AccidentalMark> accidentalMark;

        [System.Xml.Serialization.XmlElementAttribute("accidental-mark", Namespace = "")]
        public System.Collections.ObjectModel.Collection<AccidentalMark> AccidentalMark
        {
            get
            {
                return this.accidentalMark;
            }
            private set
            {
                this.accidentalMark = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die AccidentalMark-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the AccidentalMark collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AccidentalMarkSpecified
        {
            get
            {
                return (this.AccidentalMark.Count != 0);
            }
        }
    }

    /// <summary>
    /// <para>While using repeater beams was the original method for indicating tremolos, often playback and display are not well-enough integrated in an application to make that feasible. The tremolo ornament can be used to indicate either single-note or double-note tremolos. Single-note tremolos use the single type, while double-note tremolos use the start and stop types. The default is "single" for compatibility with Version 1.1. The text of the element indicates the number of tremolo marks and is an integer from 0 to 6. Note that the number of attached beams is not included in this value, but is represented separately using the beam element.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tremolo", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Tremolo
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private StartStopSingle type = MusicXmlSchema.StartStopSingle.Single;

        [System.ComponentModel.DefaultValueAttribute(MusicXmlSchema.StartStopSingle.Single)]
        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public StartStopSingle Type
        {
            get
            {
                return this.type;
            }
            set
            {
                this.type = value;
            }
        }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Placement-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }
    }

    /// <summary>
    /// <para>Technical indications give performance information for individual instruments.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("technical", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Technical
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> upBow;

        /// <summary>
        /// <para>The up-bow element represent the symbol that is used both for up-bowing on bowed instruments, and up-stroke on plucked instruments.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("up-bow", Namespace = "")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> UpBow
        {
            get
            {
                return this.upBow;
            }
            private set
            {
                this.upBow = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die UpBow-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the UpBow collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UpBowSpecified
        {
            get
            {
                return (this.UpBow.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Technical" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Technical" /> class.</para>
        /// </summary>
        public Technical()
        {
            this.upBow = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this.downBow = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this.harmonic = new System.Collections.ObjectModel.Collection<Harmonic>();
            this.openString = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this.thumbPosition = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this.fingering = new System.Collections.ObjectModel.Collection<Fingering>();
            this.pluck = new System.Collections.ObjectModel.Collection<PlacementText>();
            this.doubleTongue = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this.tripleTongue = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this.stopped = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this.snapPizzicato = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this.fret = new System.Collections.ObjectModel.Collection<Fret>();
            this.@string = new System.Collections.ObjectModel.Collection<String>();
            this.hammerOn = new System.Collections.ObjectModel.Collection<HammerOnPullOff>();
            this.pullOff = new System.Collections.ObjectModel.Collection<HammerOnPullOff>();
            this.bend = new System.Collections.ObjectModel.Collection<Bend>();
            this.tap = new System.Collections.ObjectModel.Collection<PlacementText>();
            this.heel = new System.Collections.ObjectModel.Collection<HeelToe>();
            this.toe = new System.Collections.ObjectModel.Collection<HeelToe>();
            this.fingernails = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this.otherTechnical = new System.Collections.ObjectModel.Collection<PlacementText>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> downBow;

        /// <summary>
        /// <para>The down-bow element represent the symbol that is used both for down-bowing on bowed instruments, and down-stroke on plucked instruments.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("down-bow", Namespace = "")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> DownBow
        {
            get
            {
                return this.downBow;
            }
            private set
            {
                this.downBow = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DownBow-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the DownBow collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DownBowSpecified
        {
            get
            {
                return (this.DownBow.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Harmonic> harmonic;

        [System.Xml.Serialization.XmlElementAttribute("harmonic", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Harmonic> Harmonic
        {
            get
            {
                return this.harmonic;
            }
            private set
            {
                this.harmonic = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Harmonic-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Harmonic collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HarmonicSpecified
        {
            get
            {
                return (this.Harmonic.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> openString;

        /// <summary>
        /// <para>The open-string element represents the open string symbol.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("open-string", Namespace = "")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> OpenString
        {
            get
            {
                return this.openString;
            }
            private set
            {
                this.openString = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OpenString-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the OpenString collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OpenStringSpecified
        {
            get
            {
                return (this.OpenString.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> thumbPosition;

        /// <summary>
        /// <para>The thumb-position element represents the thumb position symbol.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("thumb-position", Namespace = "")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> ThumbPosition
        {
            get
            {
                return this.thumbPosition;
            }
            private set
            {
                this.thumbPosition = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ThumbPosition-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ThumbPosition collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ThumbPositionSpecified
        {
            get
            {
                return (this.ThumbPosition.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Fingering> fingering;

        [System.Xml.Serialization.XmlElementAttribute("fingering", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Fingering> Fingering
        {
            get
            {
                return this.fingering;
            }
            private set
            {
                this.fingering = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Fingering-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Fingering collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FingeringSpecified
        {
            get
            {
                return (this.Fingering.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<PlacementText> pluck;

        /// <summary>
        /// <para>The pluck element is used to specify the plucking fingering on a fretted instrument, where the fingering element refers to the fretting fingering. Typical values are p, i, m, a for pulgar/thumb, indicio/index, medio/middle, and anular/ring fingers.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("pluck", Namespace = "")]
        public System.Collections.ObjectModel.Collection<PlacementText> Pluck
        {
            get
            {
                return this.pluck;
            }
            private set
            {
                this.pluck = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Pluck-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Pluck collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PluckSpecified
        {
            get
            {
                return (this.Pluck.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> doubleTongue;

        /// <summary>
        /// <para>The double-tongue element represents the double tongue symbol (two dots arranged horizontally).</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("double-tongue", Namespace = "")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> DoubleTongue
        {
            get
            {
                return this.doubleTongue;
            }
            private set
            {
                this.doubleTongue = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DoubleTongue-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the DoubleTongue collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DoubleTongueSpecified
        {
            get
            {
                return (this.DoubleTongue.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> tripleTongue;

        /// <summary>
        /// <para>The triple-tongue element represents the triple tongue symbol (three dots arranged horizontally).</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("triple-tongue", Namespace = "")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> TripleTongue
        {
            get
            {
                return this.tripleTongue;
            }
            private set
            {
                this.tripleTongue = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die TripleTongue-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the TripleTongue collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TripleTongueSpecified
        {
            get
            {
                return (this.TripleTongue.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> stopped;

        /// <summary>
        /// <para>The stopped element represents the stopped symbol, which looks like a plus sign.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("stopped", Namespace = "")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> Stopped
        {
            get
            {
                return this.stopped;
            }
            private set
            {
                this.stopped = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Stopped-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Stopped collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StoppedSpecified
        {
            get
            {
                return (this.Stopped.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> snapPizzicato;

        /// <summary>
        /// <para>The snap-pizzicato element represents the snap pizzicato symbol (a circle with a line).</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("snap-pizzicato", Namespace = "")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> SnapPizzicato
        {
            get
            {
                return this.snapPizzicato;
            }
            private set
            {
                this.snapPizzicato = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die SnapPizzicato-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the SnapPizzicato collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SnapPizzicatoSpecified
        {
            get
            {
                return (this.SnapPizzicato.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Fret> fret;

        [System.Xml.Serialization.XmlElementAttribute("fret", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Fret> Fret
        {
            get
            {
                return this.fret;
            }
            private set
            {
                this.fret = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Fret-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Fret collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FretSpecified
        {
            get
            {
                return (this.Fret.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<String> @string;

        [System.Xml.Serialization.XmlElementAttribute("string", Namespace = "")]
        public System.Collections.ObjectModel.Collection<String> String
        {
            get
            {
                return this.@string;
            }
            private set
            {
                this.@string = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die String-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the String collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StringSpecified
        {
            get
            {
                return (this.String.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<HammerOnPullOff> hammerOn;

        [System.Xml.Serialization.XmlElementAttribute("hammer-on", Namespace = "")]
        public System.Collections.ObjectModel.Collection<HammerOnPullOff> HammerOn
        {
            get
            {
                return this.hammerOn;
            }
            private set
            {
                this.hammerOn = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die HammerOn-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the HammerOn collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HammerOnSpecified
        {
            get
            {
                return (this.HammerOn.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<HammerOnPullOff> pullOff;

        [System.Xml.Serialization.XmlElementAttribute("pull-off", Namespace = "")]
        public System.Collections.ObjectModel.Collection<HammerOnPullOff> PullOff
        {
            get
            {
                return this.pullOff;
            }
            private set
            {
                this.pullOff = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PullOff-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the PullOff collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PullOffSpecified
        {
            get
            {
                return (this.PullOff.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Bend> bend;

        [System.Xml.Serialization.XmlElementAttribute("bend", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Bend> Bend
        {
            get
            {
                return this.bend;
            }
            private set
            {
                this.bend = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Bend-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Bend collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BendSpecified
        {
            get
            {
                return (this.Bend.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<PlacementText> tap;

        /// <summary>
        /// <para>The tap element indicates a tap on the fretboard. The element content allows specification of the notation; + and T are common choices. If empty, the display is application-specific.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("tap", Namespace = "")]
        public System.Collections.ObjectModel.Collection<PlacementText> Tap
        {
            get
            {
                return this.tap;
            }
            private set
            {
                this.tap = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Tap-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Tap collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TapSpecified
        {
            get
            {
                return (this.Tap.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<HeelToe> heel;

        [System.Xml.Serialization.XmlElementAttribute("heel", Namespace = "")]
        public System.Collections.ObjectModel.Collection<HeelToe> Heel
        {
            get
            {
                return this.heel;
            }
            private set
            {
                this.heel = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Heel-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Heel collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HeelSpecified
        {
            get
            {
                return (this.Heel.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<HeelToe> toe;

        [System.Xml.Serialization.XmlElementAttribute("toe", Namespace = "")]
        public System.Collections.ObjectModel.Collection<HeelToe> Toe
        {
            get
            {
                return this.toe;
            }
            private set
            {
                this.toe = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Toe-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Toe collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ToeSpecified
        {
            get
            {
                return (this.Toe.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> fingernails;

        /// <summary>
        /// <para>The fingernails element is used in harp notation.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("fingernails", Namespace = "")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> Fingernails
        {
            get
            {
                return this.fingernails;
            }
            private set
            {
                this.fingernails = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Fingernails-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Fingernails collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FingernailsSpecified
        {
            get
            {
                return (this.Fingernails.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<PlacementText> otherTechnical;

        /// <summary>
        /// <para>The other-technical element is used to define any technical indications not yet in the MusicXML format. This allows extended representation, though without application interoperability.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("other-technical", Namespace = "")]
        public System.Collections.ObjectModel.Collection<PlacementText> OtherTechnical
        {
            get
            {
                return this.otherTechnical;
            }
            private set
            {
                this.otherTechnical = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die OtherTechnical-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the OtherTechnical collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OtherTechnicalSpecified
        {
            get
            {
                return (this.OtherTechnical.Count != 0);
            }
        }
    }

    /// <summary>
    /// <para>The other-notation type is used to define any notations not yet in the MusicXML format. This allows extended representation, though without application interoperability. It handles notations where more specific extension elements such as other-dynamics and other-technical are not appropriate.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("other-notation", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OtherNotation
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public StartStopSingle Type { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string number = "1";

        /// <summary>
        /// <para>Slurs, tuplets, and many other features can be concurrent and overlapping within a single musical part. The number-level type distinguishes up to six concurrent objects of the same type. A reading program should be prepared to handle cases where the number-levels stop in an arbitrary order. Different numbers are needed when the features overlap in MusicXML file order. When a number-level value is implied, the value is 1 by default.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 6.</para>
        /// </summary>
        [System.ComponentModel.DefaultValueAttribute("1")]
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "6")]
        [System.Xml.Serialization.XmlAttributeAttribute("number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number
        {
            get
            {
                return this.number;
            }
            set
            {
                this.number = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PrintObject-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("placement", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public AboveBelow Placement { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Placement-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Placement property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlacementSpecified { get; set; }
    }

    /// <summary>
    /// <para>Notes are the most common type of MusicXML data. The MusicXML format keeps the MuseData distinction between elements used for sound information and elements used for notation information (e.g., tie is used for sound, tied for notation). Thus grace notes do not have a duration element. Cue notes have a duration element, as do forward elements, but no tie elements. Having these two types of information available can make interchange considerably easier, as some programs handle one type of information much more readily than the other. 
    ///	
    ///The dynamics and end-dynamics attributes correspond to MIDI 1.0's Note On and Note Off velocities, respectively. They are expressed in terms of percentages of the default forte value (90 for MIDI 1.0). The attack and release attributes are used to alter the staring and stopping time of the note from when it would otherwise occur based on the flow of durations - information that is specific to a performance. They are expressed in terms of divisions, either positive or negative. A note that starts a tie should not have a release attribute, and a note that stops a tie should not have an attack attribute. If a note is played only one time through a repeat, the time-only attribute shows which time to play the note. The pizzicato attribute is used when just this note is sounded pizzicato, vs. the pizzicato element which changes overall playback between pizzicato and arco.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("note", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Note
    {

        [System.Xml.Serialization.XmlElementAttribute("grace", Namespace = "")]
        public Grace Grace { get; set; }

        /// <summary>
        /// <para>The chord element indicates that this note is an additional chord tone with the preceding note. The duration of this note can be no longer than the preceding note. In MuseData, a missing duration indicates the same length as the previous note, but the MusicXML format requires a duration for chord notes too.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("chord", Namespace = "")]
        public Empty Chord { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("pitch", Namespace = "")]
        public Pitch Pitch { get; set; }

        /// <summary>
        /// <para>The unpitched element indicates musical elements that are notated on the staff but lack definite pitch, such as unpitched percussion and speaking voice.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("unpitched", Namespace = "")]
        public DisplayStepOctave Unpitched { get; set; }

        /// <summary>
        /// <para>The rest element indicates notated rests or silences. Rest are usually empty, but placement on the staff can be specified using display-step and display-octave elements.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("rest", Namespace = "")]
        public DisplayStepOctave Rest { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Tie> tie;

        [System.Xml.Serialization.XmlElementAttribute("tie", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Tie> Tie
        {
            get
            {
                return this.tie;
            }
            private set
            {
                this.tie = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Tie-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Tie collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TieSpecified
        {
            get
            {
                return (this.Tie.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Note" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Note" /> class.</para>
        /// </summary>
        public Note()
        {
            this.tie = new System.Collections.ObjectModel.Collection<Tie>();
            this.dot = new System.Collections.ObjectModel.Collection<EmptyPlacement>();
            this.beam = new System.Collections.ObjectModel.Collection<Beam>();
            this.notations = new System.Collections.ObjectModel.Collection<Notations>();
            this.lyric = new System.Collections.ObjectModel.Collection<Lyric>();
        }

        /// <summary>
        /// <para>The cue element indicates the presence of a cue note.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("cue", Namespace = "")]
        public Empty Cue { get; set; }

        /// <summary>
        /// <para>Duration is a positive number specified in division units. This is the intended duration vs. notated duration (for instance, swing eighths vs. even eighths, or differences in dotted notes in Baroque-era music). Differences in duration specific to an interpretation or performance should use the note element's attack and release attributes.</para>
        /// <para>The positive-divisions type restricts divisions values to positive numbers.</para>
        /// <para xml:lang="en">Minimum exclusive value: 0.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("duration", Namespace = "")]
        public decimal Duration { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("instrument", Namespace = "")]
        public Instrument Instrument { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("footnote", Namespace = "")]
        public FormattedText Footnote { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("level", Namespace = "")]
        public Level Level { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("voice", Namespace = "")]
        public string Voice { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("type", Namespace = "")]
        public NoteType Type { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<EmptyPlacement> dot;

        /// <summary>
        /// <para>One dot element is used for each dot of prolongation. The placement element is used to specify whether the dot should appear above or below the staff line. It is ignored for notes that appear on a staff space.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("dot", Namespace = "")]
        public System.Collections.ObjectModel.Collection<EmptyPlacement> Dot
        {
            get
            {
                return this.dot;
            }
            private set
            {
                this.dot = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Dot-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Dot collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DotSpecified
        {
            get
            {
                return (this.Dot.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("accidental", Namespace = "")]
        public Accidental Accidental { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("time-modification", Namespace = "")]
        public TimeModification TimeModification { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("stem", Namespace = "")]
        public Stem Stem { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("notehead", Namespace = "")]
        public Notehead Notehead { get; set; }

        /// <summary>
        /// <para>Staff assignment is only needed for music notated on multiple staves. Used by both notes and directions. Staff values are numbers, with 1 referring to the top-most staff in a part.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("staff", Namespace = "")]
        public string Staff { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Beam> beam;

        [System.Xml.Serialization.XmlElementAttribute("beam", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Beam> Beam
        {
            get
            {
                return this.beam;
            }
            private set
            {
                this.beam = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Beam-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Beam collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BeamSpecified
        {
            get
            {
                return (this.Beam.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Notations> notations;

        [System.Xml.Serialization.XmlElementAttribute("notations", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Notations> Notations
        {
            get
            {
                return this.notations;
            }
            private set
            {
                this.notations = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Notations-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Notations collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NotationsSpecified
        {
            get
            {
                return (this.Notations.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Lyric> lyric;

        [System.Xml.Serialization.XmlElementAttribute("lyric", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Lyric> Lyric
        {
            get
            {
                return this.lyric;
            }
            private set
            {
                this.lyric = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Lyric-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Lyric collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LyricSpecified
        {
            get
            {
                return (this.Lyric.Count != 0);
            }
        }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PrintObject-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-dot", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo PrintDot { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PrintDot-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintDot property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintDotSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-spacing", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo PrintSpacing { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PrintSpacing-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintSpacing property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintSpacingSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-lyric", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo PrintLyric { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PrintLyric-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintLyric property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintLyricSpecified { get; set; }

        /// <summary>
        /// <para>The non-negative-decimal type specifies a non-negative decimal value.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("dynamics", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal Dynamics { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Dynamics-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Dynamics property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DynamicsSpecified { get; set; }

        /// <summary>
        /// <para>The non-negative-decimal type specifies a non-negative decimal value.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("end-dynamics", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal EndDynamics { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die EndDynamics-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the EndDynamics property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EndDynamicsSpecified { get; set; }

        /// <summary>
        /// <para>The divisions type is used to express values in terms of the musical divisions defined by the divisions element. It is preferred that these be integer values both for MIDI interoperability and to avoid roundoff errors.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("attack", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal Attack { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Attack-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Attack property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AttackSpecified { get; set; }

        /// <summary>
        /// <para>The divisions type is used to express values in terms of the musical divisions defined by the divisions element. It is preferred that these be integer values both for MIDI interoperability and to avoid roundoff errors.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("release", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal Release { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Release-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Release property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ReleaseSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("time-only", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string TimeOnly { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("pizzicato", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Pizzicato { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Pizzicato-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Pizzicato property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PizzicatoSpecified { get; set; }
    }

    /// <summary>
    /// <para>Pitch is represented as a combination of the step of the diatonic scale, the chromatic alteration, and the octave.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("pitch", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Pitch
    {

        [System.Xml.Serialization.XmlElementAttribute("step", Namespace = "")]
        public Step Step { get; set; }

        /// <summary>
        /// <para>The semintones type is a number representing semitones, used for chromatic alteration. A value of -1 corresponds to a flat and a value of 1 to a sharp. Decimal values like 0.5 (quarter tone sharp) may be used for microtones.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("alter", Namespace = "")]
        public decimal Alter { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Alter-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Alter property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AlterSpecified { get; set; }

        /// <summary>
        /// <para>Octaves are represented by the numbers 0 to 9, where 4 indicates the octave started by middle C.</para>
        /// <para xml:lang="en">Minimum inclusive value: 0.</para>
        /// <para xml:lang="en">Maximum inclusive value: 9.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "0", "9")]
        [System.Xml.Serialization.XmlElementAttribute("octave", Namespace = "")]
        public string Octave { get; set; }
    }

    /// <summary>
    /// <para>The tie element indicates that a tie begins or ends with this note. The tie element indicates sound; the tied element indicates notation.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("tie", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Tie
    {

        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public StartStop Type { get; set; }
    }

    /// <summary>
    /// <para>The note-type type indicates the graphic note type. Values range from 256th to long. The size attribute indicates full, cue, or large size, with full the default for regular notes and cue the default for cue and grace notes.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("note-type", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NoteType
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public NoteTypeValue Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public SymbolSize Size { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Size-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Size property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SizeSpecified { get; set; }
    }

    /// <summary>
    /// <para>Stems can be down, up, none, or double. For down and up stems, the position attributes can be used to specify stem length. The relative values specify the end of the stem relative to the program default. Default values specify an absolute end stem position. Negative values of relative-y that would flip a stem instead of shortening it are ignored.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("stem", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Stem
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public StemValue Value { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The notehead element indicates shapes other than the open and closed ovals associated with note durations.
    ///	
    ///For the enclosed shapes, the default is to be hollow for half notes and longer, and filled otherwise. The filled attribute can be set to change this if needed.
    ///	
    ///If the parentheses attribute is set to yes, the notehead is parenthesized. It is no by default.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("notehead", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Notehead
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public NoteheadValue Value { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("filled", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Filled { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Filled-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Filled property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FilledSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("parentheses", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Parentheses { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Parentheses-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Parentheses property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ParenthesesSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The credit type represents the appearance of the title, composer, arranger, lyricist, copyright, dedication, and other text and graphics that commonly appears on the first page of a score. The credit-words and credit-image elements are similar to the words and image elements for directions. However, since the credit is not part of a measure, the default-x and default-y attributes adjust the origin relative to the bottom left-hand corner of the first page. The enclosure for credit-words is none by default.
    ///	
    ///By default, a series of credit-words elements within a single credit element follow one another in sequence visually. Non-positional formatting attributes are carried over from the previous element by default.
    ///	
    ///The page attribute for the credit element, new in Version 2.0, specifies the page number where the credit should appear. This is an integer value that starts with 1 for the first page. Its value is 1 by default. Since credits occur before the music, these page numbers do not refer to the page numbering specified by the print element's page-number attribute.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("credit", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Credit
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Link> link;

        [System.Xml.Serialization.XmlElementAttribute("link", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Link> Link
        {
            get
            {
                return this.link;
            }
            private set
            {
                this.link = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Link-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Link collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LinkSpecified
        {
            get
            {
                return (this.Link.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Credit" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Credit" /> class.</para>
        /// </summary>
        public Credit()
        {
            this.link = new System.Collections.ObjectModel.Collection<Link>();
            this.bookmark = new System.Collections.ObjectModel.Collection<Bookmark>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Bookmark> bookmark;

        [System.Xml.Serialization.XmlElementAttribute("bookmark", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Bookmark> Bookmark
        {
            get
            {
                return this.bookmark;
            }
            private set
            {
                this.bookmark = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Bookmark-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Bookmark collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BookmarkSpecified
        {
            get
            {
                return (this.Bookmark.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("credit-image", Namespace = "")]
        public Image CreditImage { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("credit-words", Namespace = "")]
        public FormattedText CreditWords { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("page", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Page { get; set; }
    }

    /// <summary>
    /// <para>The defaults type specifies score-wide defaults for scaling, layout, and appearance.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("defaults", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Defaults
    {

        [System.Xml.Serialization.XmlElementAttribute("scaling", Namespace = "")]
        public Scaling Scaling { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("page-layout", Namespace = "")]
        public PageLayout PageLayout { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("system-layout", Namespace = "")]
        public SystemLayout SystemLayout { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<StaffLayout> staffLayout;

        [System.Xml.Serialization.XmlElementAttribute("staff-layout", Namespace = "")]
        public System.Collections.ObjectModel.Collection<StaffLayout> StaffLayout
        {
            get
            {
                return this.staffLayout;
            }
            private set
            {
                this.staffLayout = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die StaffLayout-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the StaffLayout collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StaffLayoutSpecified
        {
            get
            {
                return (this.StaffLayout.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="Defaults" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="Defaults" /> class.</para>
        /// </summary>
        public Defaults()
        {
            this.staffLayout = new System.Collections.ObjectModel.Collection<StaffLayout>();
            this.lyricFont = new System.Collections.ObjectModel.Collection<LyricFont>();
            this.lyricLanguage = new System.Collections.ObjectModel.Collection<LyricLanguage>();
        }

        [System.Xml.Serialization.XmlElementAttribute("appearance", Namespace = "")]
        public Appearance Appearance { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("music-font", Namespace = "")]
        public EmptyFont MusicFont { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("word-font", Namespace = "")]
        public EmptyFont WordFont { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<LyricFont> lyricFont;

        [System.Xml.Serialization.XmlElementAttribute("lyric-font", Namespace = "")]
        public System.Collections.ObjectModel.Collection<LyricFont> LyricFont
        {
            get
            {
                return this.lyricFont;
            }
            private set
            {
                this.lyricFont = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LyricFont-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LyricFont collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LyricFontSpecified
        {
            get
            {
                return (this.LyricFont.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<LyricLanguage> lyricLanguage;

        [System.Xml.Serialization.XmlElementAttribute("lyric-language", Namespace = "")]
        public System.Collections.ObjectModel.Collection<LyricLanguage> LyricLanguage
        {
            get
            {
                return this.lyricLanguage;
            }
            private set
            {
                this.lyricLanguage = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die LyricLanguage-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the LyricLanguage collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LyricLanguageSpecified
        {
            get
            {
                return (this.LyricLanguage.Count != 0);
            }
        }
    }

    /// <summary>
    /// <para>The empty-font type represents an empty element with font attributes.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("empty-font", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EmptyFont
    {

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }
    }

    /// <summary>
    /// <para>The lyric-font type specifies the default font for a particular name and number of lyric.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("lyric-font", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LyricFont
    {

        [System.Xml.Serialization.XmlAttributeAttribute("number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("name", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }
    }

    /// <summary>
    /// <para>The lyric-language type specifies the default language for a particular name and number of lyric.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("lyric-language", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LyricLanguage
    {

        [System.Xml.Serialization.XmlAttributeAttribute("number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("name", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Name { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("lang", Namespace = "http://www.w3.org/XML/1998/namespace")]
        public string Lang { get; set; }
    }

    /// <summary>
    /// <para>The group-barline type indicates if the group should have common barlines.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("group-barline", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GroupBarline
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public GroupBarlineValue Value { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The group-name type describes the name or abbreviation of a part-group element. Formatting attributes in the group-name type are deprecated in Version 2.0 in favor of the new group-name-display and group-abbreviation-display elements.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("group-name", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GroupName
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("justify", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LeftCenterRight Justify { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Justify-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Justify property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool JustifySpecified { get; set; }
    }

    /// <summary>
    /// <para>The group-symbol type indicates how the symbol for a group is indicated in the score.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("group-symbol", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GroupSymbol
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public GroupSymbolValue Value { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }
    }

    /// <summary>
    /// <para>The midi-device type corresponds to the DeviceName meta event in Standard MIDI Files. The optional port attribute is a number from 1 to 16 that can be used with the unofficial MIDI port (or cable) meta event.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("midi-device", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MidiDevice
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        /// <summary>
        /// <para>The midi-16 type is used to express MIDI 1.0 values that range from 1 to 16.</para>
        /// <para xml:lang="en">Minimum inclusive value: 1.</para>
        /// <para xml:lang="en">Maximum inclusive value: 16.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(typeof(decimal), "1", "16")]
        [System.Xml.Serialization.XmlAttributeAttribute("port", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Port { get; set; }
    }

    /// <summary>
    /// <para>The opus type represents a link to a MusicXML opus document that composes multiple MusicXML scores into a collection.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("opus", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Opus
    {

        [System.Xml.Serialization.XmlAttributeAttribute("href", Namespace = "http://www.w3.org/1999/xlink")]
        public string Href { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private MusicXmlSchema.Type type = MusicXmlSchema.Type.Simple;

        [System.ComponentModel.DefaultValueAttribute(MusicXmlSchema.Type.Simple)]
        [System.Xml.Serialization.XmlAttributeAttribute("type", Namespace = "http://www.w3.org/1999/xlink")]
        public MusicXmlSchema.Type Type
        {
            get
            {
                return this.type;
            }
            set
            {
                this.type = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("role", Namespace = "http://www.w3.org/1999/xlink")]
        public string Role { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("title", Namespace = "http://www.w3.org/1999/xlink")]
        public string Title { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private MusicXmlSchema.Show show = MusicXmlSchema.Show.Replace;

        [System.ComponentModel.DefaultValueAttribute(MusicXmlSchema.Show.Replace)]
        [System.Xml.Serialization.XmlAttributeAttribute("show", Namespace = "http://www.w3.org/1999/xlink")]
        public MusicXmlSchema.Show Show
        {
            get
            {
                return this.show;
            }
            set
            {
                this.show = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private MusicXmlSchema.Actuate actuate = MusicXmlSchema.Actuate.OnRequest;

        [System.ComponentModel.DefaultValueAttribute(MusicXmlSchema.Actuate.OnRequest)]
        [System.Xml.Serialization.XmlAttributeAttribute("actuate", Namespace = "http://www.w3.org/1999/xlink")]
        public MusicXmlSchema.Actuate Actuate
        {
            get
            {
                return this.actuate;
            }
            set
            {
                this.actuate = value;
            }
        }
    }

    /// <summary>
    /// <para>The part-group element indicates groupings of parts in the score, usually indicated by braces and brackets. Braces that are used for multi-staff parts should be defined in the attributes element for that part. The part-group start element appears before the first score-part in the group. The part-group stop element appears after the last score-part in the group.
    ///	
    ///The number attribute is used to distinguish overlapping and nested part-groups, not the sequence of groups. As with parts, groups can have a name and abbreviation. Values for the child elements are ignored at the stop of a group. 
    ///	
    ///A part-group element is not needed for a single multi-staff part. By default, multi-staff parts include a brace symbol and (if appropriate given the bar-style) common barlines. The symbol formatting for a multi-staff part can be more fully specified using the part-symbol element.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("part-group", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PartGroup
    {

        [System.Xml.Serialization.XmlElementAttribute("group-name", Namespace = "")]
        public GroupName GroupName { get; set; }

        /// <summary>
        /// <para>Formatting specified in the group-name-display element overrides formatting specified in the group-name element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("group-name-display", Namespace = "")]
        public NameDisplay GroupNameDisplay { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("group-abbreviation", Namespace = "")]
        public GroupName GroupAbbreviation { get; set; }

        /// <summary>
        /// <para>Formatting specified in the group-abbreviation-display element overrides formatting specified in the group-abbreviation element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("group-abbreviation-display", Namespace = "")]
        public NameDisplay GroupAbbreviationDisplay { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("group-symbol", Namespace = "")]
        public GroupSymbol GroupSymbol { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("group-barline", Namespace = "")]
        public GroupBarline GroupBarline { get; set; }

        /// <summary>
        /// <para>The group-time element indicates that the displayed time signatures should stretch across all parts and staves in the group.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("group-time", Namespace = "")]
        public Empty GroupTime { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("footnote", Namespace = "")]
        public FormattedText Footnote { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("level", Namespace = "")]
        public Level Level { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("type", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public StartStop Type { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string number = "1";

        [System.ComponentModel.DefaultValueAttribute("1")]
        [System.Xml.Serialization.XmlAttributeAttribute("number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number
        {
            get
            {
                return this.number;
            }
            set
            {
                this.number = value;
            }
        }
    }

    /// <summary>
    /// <para>The part-list identifies the different musical parts in this movement. Each part has an ID that is used later within the musical data. Since parts may be encoded separately and combined later, identification elements are present at both the score and score-part levels. There must be at least one score-part, combined as desired with part-group elements that indicate braces and brackets. Parts are ordered from top to bottom in a score based on the order in which they appear in the part-list.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("part-list", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PartList
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<PartGroup> partGroup;

        [System.Xml.Serialization.XmlElementAttribute("part-group", Namespace = "")]
        public System.Collections.ObjectModel.Collection<PartGroup> PartGroup
        {
            get
            {
                return this.partGroup;
            }
            private set
            {
                this.partGroup = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PartGroup-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the PartGroup collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PartGroupSpecified
        {
            get
            {
                return (this.PartGroup.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="PartList" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="PartList" /> class.</para>
        /// </summary>
        public PartList()
        {
            this.partGroup = new System.Collections.ObjectModel.Collection<PartGroup>();
        }

        /// <summary>
        /// <para>Each MusicXML part corresponds to a track in a Standard MIDI Format 1 file. The score-instrument elements are used when there are multiple instruments per track. The midi-device element is used to make a MIDI device or port assignment for the given track. Initial midi-instrument assignments may be made here as well.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("score-part", Namespace = "")]
        public ScorePart ScorePart { get; set; }
    }

    /// <summary>
    /// <para>Each MusicXML part corresponds to a track in a Standard MIDI Format 1 file. The score-instrument elements are used when there are multiple instruments per track. The midi-device element is used to make a MIDI device or port assignment for the given track. Initial midi-instrument assignments may be made here as well.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("score-part", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ScorePart
    {

        [System.Xml.Serialization.XmlElementAttribute("identification", Namespace = "")]
        public Identification Identification { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("part-name", Namespace = "")]
        public PartName PartName { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("part-name-display", Namespace = "")]
        public NameDisplay PartNameDisplay { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("part-abbreviation", Namespace = "")]
        public PartName PartAbbreviation { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("part-abbreviation-display", Namespace = "")]
        public NameDisplay PartAbbreviationDisplay { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<string> group;

        /// <summary>
        /// <para>The group element allows the use of different versions of the part for different purposes. Typical values include score, parts, sound, and data. Ordering information that is directly encoded in MuseData can be derived from the ordering within a MusicXML score or opus.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("group", Namespace = "")]
        public System.Collections.ObjectModel.Collection<string> Group
        {
            get
            {
                return this.group;
            }
            private set
            {
                this.group = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Group-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Group collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GroupSpecified
        {
            get
            {
                return (this.Group.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ScorePart" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ScorePart" /> class.</para>
        /// </summary>
        public ScorePart()
        {
            this.group = new System.Collections.ObjectModel.Collection<string>();
            this.scoreInstrument = new System.Collections.ObjectModel.Collection<ScoreInstrument>();
            this.midiInstrument = new System.Collections.ObjectModel.Collection<MidiInstrument>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ScoreInstrument> scoreInstrument;

        [System.Xml.Serialization.XmlElementAttribute("score-instrument", Namespace = "")]
        public System.Collections.ObjectModel.Collection<ScoreInstrument> ScoreInstrument
        {
            get
            {
                return this.scoreInstrument;
            }
            private set
            {
                this.scoreInstrument = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die ScoreInstrument-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the ScoreInstrument collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ScoreInstrumentSpecified
        {
            get
            {
                return (this.ScoreInstrument.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("midi-device", Namespace = "")]
        public MidiDevice MidiDevice { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<MidiInstrument> midiInstrument;

        [System.Xml.Serialization.XmlElementAttribute("midi-instrument", Namespace = "")]
        public System.Collections.ObjectModel.Collection<MidiInstrument> MidiInstrument
        {
            get
            {
                return this.midiInstrument;
            }
            private set
            {
                this.midiInstrument = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die MidiInstrument-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the MidiInstrument collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MidiInstrumentSpecified
        {
            get
            {
                return (this.MidiInstrument.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("id", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>The part-name type describes the name or abbreviation of a score-part element. Formatting attributes for the part-name element are deprecated in Version 2.0 in favor of the new part-name-display and part-abbreviation-display elements.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("part-name", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PartName
    {

        /// <summary>
        /// <para xml:lang="de">Ruft den Text ab oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets the text value.</para>
        /// </summary>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("default-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal DefaultY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die DefaultY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the DefaultY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefaultYSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-x", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeX { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeX-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeX property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeXSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("relative-y", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal RelativeY { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die RelativeY-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the RelativeY property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RelativeYSpecified { get; set; }

        /// <summary>
        /// <para>The comma-separated-text type is used to specify a comma-separated list of text elements, as is used by the font-family attribute.</para>
        /// <para xml:lang="en">Pattern: [^,]+(, ?[^,]+)*.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[^,]+(, ?[^,]+)*")]
        [System.Xml.Serialization.XmlAttributeAttribute("font-family", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontFamily { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-style", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontStyle FontStyle { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontStyle-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontStyle property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontStyleSpecified { get; set; }

        /// <summary>
        /// <para>The font-size can be one of the CSS font sizes or a numeric point size.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("font-size", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string FontSize { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("font-weight", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FontWeight-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the FontWeight property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FontWeightSpecified { get; set; }

        /// <summary>
        /// <para>The color type indicates the color of an element. Color may be represented as hexadecimal RGB triples, as in HTML, or as hexadecimal ARGB tuples, with the A indicating alpha of transparency. An alpha value of 00 is totally transparent; FF is totally opaque. If RGB is used, the A value is assumed to be FF. 
        ///
        ///For instance, the RGB value "#800080" represents purple. An ARGB value of "#40800080" would be a transparent purple.
        ///
        ///As in SVG 1.1, colors are defined in terms of the sRGB color space (IEC 61966).</para>
        /// <para xml:lang="en">Pattern: #[\dA-F]{6}([\dA-F][\dA-F])?.</para>
        /// </summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("#[\\dA-F]{6}([\\dA-F][\\dA-F])?")]
        [System.Xml.Serialization.XmlAttributeAttribute("color", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Color { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("print-object", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo PrintObject { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die PrintObject-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the PrintObject property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintObjectSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("justify", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public LeftCenterRight Justify { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Justify-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Justify property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool JustifySpecified { get; set; }
    }

    /// <summary>
    /// <para>The score-instrument type represents a single instrument within a score-part. As with the score-part type, each score-instrument has a required ID attribute, a name, and an optional abbreviation.
    ///	
    ///A score-instrument type is also required if the score specifies MIDI 1.0 channels, banks, or programs. An initial midi-instrument assignment can also be made here. MusicXML software should be able to automatically assign reasonable channels and instruments without these elements in simple cases, such as where part names match General MIDI instrument names.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("score-instrument", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ScoreInstrument
    {

        /// <summary>
        /// <para>The instrument-name element is typically used within a software application, rather than appearing on the printed page of a score.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("instrument-name", Namespace = "")]
        public string InstrumentName { get; set; }

        /// <summary>
        /// <para>The optional instrument-abbreviation element is typically used within a software application, rather than appearing on the printed page of a score.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("instrument-abbreviation", Namespace = "")]
        public string InstrumentAbbreviation { get; set; }

        /// <summary>
        /// <para>The solo element was added in Version 2.0. It is present if performance is intended by a solo instrument.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("solo", Namespace = "")]
        public Empty Solo { get; set; }

        /// <summary>
        /// <para>The ensemble element was added in Version 2.0. It is present if performance is intended by an ensemble such as an orchestral section. The text of the ensemble element contains the size of the section, or is empty if the ensemble size is not specified.</para>
        /// <para>The positive-integer-or-empty values can be either a positive integer or an empty string.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ensemble", Namespace = "")]
        public string Ensemble { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("id", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id { get; set; }
    }

    /// <summary>
    /// <para>Works are optionally identified by number and title. The work type also may indicate a link to the opus document that composes multiple scores into a collection.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("work", Namespace = "")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Work
    {

        /// <summary>
        /// <para>The work-number element specifies the number of a work, such as its opus number.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("work-number", Namespace = "")]
        public string WorkNumber { get; set; }

        /// <summary>
        /// <para>The work-title element specifies the title of a work, not including its opus or other work number.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("work-title", Namespace = "")]
        public string WorkTitle { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("opus", Namespace = "")]
        public Opus Opus { get; set; }
    }

    /// <summary>
    /// <para>The score-partwise element is the root element for a partwise MusicXML score. It includes a score-header group followed by a series of parts with measures inside. The document-attributes attribute group includes the version attribute.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("score-partwise", Namespace = "", AnonymousType = true)]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("score-partwise", Namespace = "")]
    public partial class ScorePartwise
    {

        [System.Xml.Serialization.XmlElementAttribute("work", Namespace = "")]
        public Work Work { get; set; }

        /// <summary>
        /// <para>The movement-number element specifies the number of a movement.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("movement-number", Namespace = "")]
        public string MovementNumber { get; set; }

        /// <summary>
        /// <para>The movement-title element specifies the title of a movement, not including its number.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("movement-title", Namespace = "")]
        public string MovementTitle { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("identification", Namespace = "")]
        public Identification Identification { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("defaults", Namespace = "")]
        public Defaults Defaults { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Credit> credit;

        [System.Xml.Serialization.XmlElementAttribute("credit", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Credit> Credit
        {
            get
            {
                return this.credit;
            }
            private set
            {
                this.credit = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Credit-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Credit collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreditSpecified
        {
            get
            {
                return (this.Credit.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ScorePartwise" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ScorePartwise" /> class.</para>
        /// </summary>
        public ScorePartwise()
        {
            this.credit = new System.Collections.ObjectModel.Collection<Credit>();
            this.part = new System.Collections.ObjectModel.Collection<ScorePartwisePart>();
        }

        [System.Xml.Serialization.XmlElementAttribute("part-list", Namespace = "")]
        public PartList PartList { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ScorePartwisePart> part;

        [System.Xml.Serialization.XmlElementAttribute("part", Namespace = "")]
        public System.Collections.ObjectModel.Collection<ScorePartwisePart> Part
        {
            get
            {
                return this.part;
            }
            private set
            {
                this.part = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string version = "1.0";

        [System.ComponentModel.DefaultValueAttribute("1.0")]
        [System.Xml.Serialization.XmlAttributeAttribute("version", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Version
        {
            get
            {
                return this.version;
            }
            set
            {
                this.version = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ScorePartwisePart", Namespace = "", AnonymousType = true)]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ScorePartwisePart
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ScorePartwisePartMeasure> measure;

        [System.Xml.Serialization.XmlElementAttribute("measure", Namespace = "")]
        public System.Collections.ObjectModel.Collection<ScorePartwisePartMeasure> Measure
        {
            get
            {
                return this.measure;
            }
            private set
            {
                this.measure = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ScorePartwisePart" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ScorePartwisePart" /> class.</para>
        /// </summary>
        public ScorePartwisePart()
        {
            this.measure = new System.Collections.ObjectModel.Collection<ScorePartwisePartMeasure>();
        }

        [System.Xml.Serialization.XmlAttributeAttribute("id", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ScorePartwisePartMeasure", Namespace = "", AnonymousType = true)]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ScorePartwisePartMeasure
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Note> note;

        [System.Xml.Serialization.XmlElementAttribute("note", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Note> Note
        {
            get
            {
                return this.note;
            }
            private set
            {
                this.note = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Note-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Note collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NoteSpecified
        {
            get
            {
                return (this.Note.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ScorePartwisePartMeasure" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ScorePartwisePartMeasure" /> class.</para>
        /// </summary>
        public ScorePartwisePartMeasure()
        {
            this.note = new System.Collections.ObjectModel.Collection<Note>();
            this.backup = new System.Collections.ObjectModel.Collection<Backup>();
            this.forward = new System.Collections.ObjectModel.Collection<Forward>();
            this.direction = new System.Collections.ObjectModel.Collection<Direction>();
            this.attributes = new System.Collections.ObjectModel.Collection<Attributes>();
            this.harmony = new System.Collections.ObjectModel.Collection<Harmony>();
            this.figuredBass = new System.Collections.ObjectModel.Collection<FiguredBass>();
            this.print = new System.Collections.ObjectModel.Collection<Print>();
            this.sound = new System.Collections.ObjectModel.Collection<Sound>();
            this.barline = new System.Collections.ObjectModel.Collection<Barline>();
            this.grouping = new System.Collections.ObjectModel.Collection<Grouping>();
            this.link = new System.Collections.ObjectModel.Collection<Link>();
            this.bookmark = new System.Collections.ObjectModel.Collection<Bookmark>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Backup> backup;

        [System.Xml.Serialization.XmlElementAttribute("backup", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Backup> Backup
        {
            get
            {
                return this.backup;
            }
            private set
            {
                this.backup = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Backup-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Backup collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BackupSpecified
        {
            get
            {
                return (this.Backup.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Forward> forward;

        [System.Xml.Serialization.XmlElementAttribute("forward", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Forward> Forward
        {
            get
            {
                return this.forward;
            }
            private set
            {
                this.forward = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Forward-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Forward collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ForwardSpecified
        {
            get
            {
                return (this.Forward.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Direction> direction;

        [System.Xml.Serialization.XmlElementAttribute("direction", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Direction> Direction
        {
            get
            {
                return this.direction;
            }
            private set
            {
                this.direction = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Direction-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Direction collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DirectionSpecified
        {
            get
            {
                return (this.Direction.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Attributes> attributes;

        [System.Xml.Serialization.XmlElementAttribute("attributes", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Attributes> Attributes
        {
            get
            {
                return this.attributes;
            }
            private set
            {
                this.attributes = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Attributes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Attributes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AttributesSpecified
        {
            get
            {
                return (this.Attributes.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Harmony> harmony;

        [System.Xml.Serialization.XmlElementAttribute("harmony", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Harmony> Harmony
        {
            get
            {
                return this.harmony;
            }
            private set
            {
                this.harmony = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Harmony-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Harmony collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HarmonySpecified
        {
            get
            {
                return (this.Harmony.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<FiguredBass> figuredBass;

        [System.Xml.Serialization.XmlElementAttribute("figured-bass", Namespace = "")]
        public System.Collections.ObjectModel.Collection<FiguredBass> FiguredBass
        {
            get
            {
                return this.figuredBass;
            }
            private set
            {
                this.figuredBass = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FiguredBass-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the FiguredBass collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FiguredBassSpecified
        {
            get
            {
                return (this.FiguredBass.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Print> print;

        [System.Xml.Serialization.XmlElementAttribute("print", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Print> Print
        {
            get
            {
                return this.print;
            }
            private set
            {
                this.print = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Print-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Print collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintSpecified
        {
            get
            {
                return (this.Print.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Sound> sound;

        [System.Xml.Serialization.XmlElementAttribute("sound", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Sound> Sound
        {
            get
            {
                return this.sound;
            }
            private set
            {
                this.sound = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Sound-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Sound collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SoundSpecified
        {
            get
            {
                return (this.Sound.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Barline> barline;

        [System.Xml.Serialization.XmlElementAttribute("barline", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Barline> Barline
        {
            get
            {
                return this.barline;
            }
            private set
            {
                this.barline = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Barline-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Barline collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BarlineSpecified
        {
            get
            {
                return (this.Barline.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Grouping> grouping;

        [System.Xml.Serialization.XmlElementAttribute("grouping", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Grouping> Grouping
        {
            get
            {
                return this.grouping;
            }
            private set
            {
                this.grouping = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Grouping-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Grouping collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GroupingSpecified
        {
            get
            {
                return (this.Grouping.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Link> link;

        [System.Xml.Serialization.XmlElementAttribute("link", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Link> Link
        {
            get
            {
                return this.link;
            }
            private set
            {
                this.link = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Link-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Link collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LinkSpecified
        {
            get
            {
                return (this.Link.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Bookmark> bookmark;

        [System.Xml.Serialization.XmlElementAttribute("bookmark", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Bookmark> Bookmark
        {
            get
            {
                return this.bookmark;
            }
            private set
            {
                this.bookmark = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Bookmark-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Bookmark collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BookmarkSpecified
        {
            get
            {
                return (this.Bookmark.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("implicit", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Implicit { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Implicit-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Implicit property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ImplicitSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("non-controlling", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo NonControlling { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NonControlling-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NonControlling property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NonControllingSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("width", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal Width { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Width-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Width property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WidthSpecified { get; set; }
    }

    /// <summary>
    /// <para>The score-timewise element is the root element for a timewise MusicXML score. It includes a score-header group followed by a series of measures with parts inside. The document-attributes attribute group includes the version attribute.</para>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("score-timewise", Namespace = "", AnonymousType = true)]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute("score-timewise", Namespace = "")]
    public partial class ScoreTimewise
    {

        [System.Xml.Serialization.XmlElementAttribute("work", Namespace = "")]
        public Work Work { get; set; }

        /// <summary>
        /// <para>The movement-number element specifies the number of a movement.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("movement-number", Namespace = "")]
        public string MovementNumber { get; set; }

        /// <summary>
        /// <para>The movement-title element specifies the title of a movement, not including its number.</para>
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("movement-title", Namespace = "")]
        public string MovementTitle { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("identification", Namespace = "")]
        public Identification Identification { get; set; }

        [System.Xml.Serialization.XmlElementAttribute("defaults", Namespace = "")]
        public Defaults Defaults { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Credit> credit;

        [System.Xml.Serialization.XmlElementAttribute("credit", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Credit> Credit
        {
            get
            {
                return this.credit;
            }
            private set
            {
                this.credit = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Credit-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Credit collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreditSpecified
        {
            get
            {
                return (this.Credit.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ScoreTimewise" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ScoreTimewise" /> class.</para>
        /// </summary>
        public ScoreTimewise()
        {
            this.credit = new System.Collections.ObjectModel.Collection<Credit>();
            this.measure = new System.Collections.ObjectModel.Collection<ScoreTimewiseMeasure>();
        }

        [System.Xml.Serialization.XmlElementAttribute("part-list", Namespace = "")]
        public PartList PartList { get; set; }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ScoreTimewiseMeasure> measure;

        [System.Xml.Serialization.XmlElementAttribute("measure", Namespace = "")]
        public System.Collections.ObjectModel.Collection<ScoreTimewiseMeasure> Measure
        {
            get
            {
                return this.measure;
            }
            private set
            {
                this.measure = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private string version = "1.0";

        [System.ComponentModel.DefaultValueAttribute("1.0")]
        [System.Xml.Serialization.XmlAttributeAttribute("version", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Version
        {
            get
            {
                return this.version;
            }
            set
            {
                this.version = value;
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ScoreTimewiseMeasure", Namespace = "", AnonymousType = true)]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ScoreTimewiseMeasure
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<ScoreTimewiseMeasurePart> part;

        [System.Xml.Serialization.XmlElementAttribute("part", Namespace = "")]
        public System.Collections.ObjectModel.Collection<ScoreTimewiseMeasurePart> Part
        {
            get
            {
                return this.part;
            }
            private set
            {
                this.part = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ScoreTimewiseMeasure" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ScoreTimewiseMeasure" /> class.</para>
        /// </summary>
        public ScoreTimewiseMeasure()
        {
            this.part = new System.Collections.ObjectModel.Collection<ScoreTimewiseMeasurePart>();
        }

        [System.Xml.Serialization.XmlAttributeAttribute("number", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Number { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("implicit", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo Implicit { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Implicit-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Implicit property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ImplicitSpecified { get; set; }

        [System.Xml.Serialization.XmlAttributeAttribute("non-controlling", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public YesNo NonControlling { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die NonControlling-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the NonControlling property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NonControllingSpecified { get; set; }

        /// <summary>
        /// <para>The tenths type is a number representing tenths of interline staff space (positive or negative). Both integer and decimal values are allowed, such as 5 for a half space and 2.5 for a quarter space. Interline space is measured from the middle of a staff line.
        ///
        ///Distances in a MusicXML file are measured in tenths of staff space. Tenths are then scaled to millimeters within the scaling element, used in the defaults element at the start of a score. Individual staves can apply a scaling factor to adjust staff size. When a MusicXML element or attribute refers to tenths, it means the global tenths defined by the scaling element, not the local tenths as adjusted by the staff-size element.</para>
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute("width", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal Width { get; set; }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Width-Eigenschaft spezifiziert ist, oder legt diesen fest.</para>
        /// <para xml:lang="en">Gets or sets a value indicating whether the Width property is specified.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WidthSpecified { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("ScoreTimewiseMeasurePart", Namespace = "", AnonymousType = true)]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ScoreTimewiseMeasurePart
    {

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Note> note;

        [System.Xml.Serialization.XmlElementAttribute("note", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Note> Note
        {
            get
            {
                return this.note;
            }
            private set
            {
                this.note = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Note-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Note collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NoteSpecified
        {
            get
            {
                return (this.Note.Count != 0);
            }
        }

        /// <summary>
        /// <para xml:lang="de">Initialisiert eine neue Instanz der <see cref="ScoreTimewiseMeasurePart" /> Klasse.</para>
        /// <para xml:lang="en">Initializes a new instance of the <see cref="ScoreTimewiseMeasurePart" /> class.</para>
        /// </summary>
        public ScoreTimewiseMeasurePart()
        {
            this.note = new System.Collections.ObjectModel.Collection<Note>();
            this.backup = new System.Collections.ObjectModel.Collection<Backup>();
            this.forward = new System.Collections.ObjectModel.Collection<Forward>();
            this.direction = new System.Collections.ObjectModel.Collection<Direction>();
            this.attributes = new System.Collections.ObjectModel.Collection<Attributes>();
            this.harmony = new System.Collections.ObjectModel.Collection<Harmony>();
            this.figuredBass = new System.Collections.ObjectModel.Collection<FiguredBass>();
            this.print = new System.Collections.ObjectModel.Collection<Print>();
            this.sound = new System.Collections.ObjectModel.Collection<Sound>();
            this.barline = new System.Collections.ObjectModel.Collection<Barline>();
            this.grouping = new System.Collections.ObjectModel.Collection<Grouping>();
            this.link = new System.Collections.ObjectModel.Collection<Link>();
            this.bookmark = new System.Collections.ObjectModel.Collection<Bookmark>();
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Backup> backup;

        [System.Xml.Serialization.XmlElementAttribute("backup", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Backup> Backup
        {
            get
            {
                return this.backup;
            }
            private set
            {
                this.backup = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Backup-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Backup collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BackupSpecified
        {
            get
            {
                return (this.Backup.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Forward> forward;

        [System.Xml.Serialization.XmlElementAttribute("forward", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Forward> Forward
        {
            get
            {
                return this.forward;
            }
            private set
            {
                this.forward = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Forward-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Forward collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ForwardSpecified
        {
            get
            {
                return (this.Forward.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Direction> direction;

        [System.Xml.Serialization.XmlElementAttribute("direction", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Direction> Direction
        {
            get
            {
                return this.direction;
            }
            private set
            {
                this.direction = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Direction-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Direction collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DirectionSpecified
        {
            get
            {
                return (this.Direction.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Attributes> attributes;

        [System.Xml.Serialization.XmlElementAttribute("attributes", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Attributes> Attributes
        {
            get
            {
                return this.attributes;
            }
            private set
            {
                this.attributes = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Attributes-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Attributes collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AttributesSpecified
        {
            get
            {
                return (this.Attributes.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Harmony> harmony;

        [System.Xml.Serialization.XmlElementAttribute("harmony", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Harmony> Harmony
        {
            get
            {
                return this.harmony;
            }
            private set
            {
                this.harmony = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Harmony-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Harmony collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HarmonySpecified
        {
            get
            {
                return (this.Harmony.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<FiguredBass> figuredBass;

        [System.Xml.Serialization.XmlElementAttribute("figured-bass", Namespace = "")]
        public System.Collections.ObjectModel.Collection<FiguredBass> FiguredBass
        {
            get
            {
                return this.figuredBass;
            }
            private set
            {
                this.figuredBass = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die FiguredBass-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the FiguredBass collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FiguredBassSpecified
        {
            get
            {
                return (this.FiguredBass.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Print> print;

        [System.Xml.Serialization.XmlElementAttribute("print", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Print> Print
        {
            get
            {
                return this.print;
            }
            private set
            {
                this.print = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Print-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Print collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrintSpecified
        {
            get
            {
                return (this.Print.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Sound> sound;

        [System.Xml.Serialization.XmlElementAttribute("sound", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Sound> Sound
        {
            get
            {
                return this.sound;
            }
            private set
            {
                this.sound = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Sound-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Sound collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SoundSpecified
        {
            get
            {
                return (this.Sound.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Barline> barline;

        [System.Xml.Serialization.XmlElementAttribute("barline", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Barline> Barline
        {
            get
            {
                return this.barline;
            }
            private set
            {
                this.barline = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Barline-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Barline collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BarlineSpecified
        {
            get
            {
                return (this.Barline.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Grouping> grouping;

        [System.Xml.Serialization.XmlElementAttribute("grouping", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Grouping> Grouping
        {
            get
            {
                return this.grouping;
            }
            private set
            {
                this.grouping = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Grouping-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Grouping collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GroupingSpecified
        {
            get
            {
                return (this.Grouping.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Link> link;

        [System.Xml.Serialization.XmlElementAttribute("link", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Link> Link
        {
            get
            {
                return this.link;
            }
            private set
            {
                this.link = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Link-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Link collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LinkSpecified
        {
            get
            {
                return (this.Link.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        private System.Collections.ObjectModel.Collection<Bookmark> bookmark;

        [System.Xml.Serialization.XmlElementAttribute("bookmark", Namespace = "")]
        public System.Collections.ObjectModel.Collection<Bookmark> Bookmark
        {
            get
            {
                return this.bookmark;
            }
            private set
            {
                this.bookmark = value;
            }
        }

        /// <summary>
        /// <para xml:lang="de">Ruft einen Wert ab, der angibt, ob die Bookmark-Collection leer ist.</para>
        /// <para xml:lang="en">Gets a value indicating whether the Bookmark collection is empty.</para>
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BookmarkSpecified
        {
            get
            {
                return (this.Bookmark.Count != 0);
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("id", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string Id { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("type", Namespace = "http://www.w3.org/1999/xlink")]
    public enum Type
    {

        [System.Xml.Serialization.XmlEnumAttribute("simple")]
        Simple,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("show", Namespace = "http://www.w3.org/1999/xlink")]
    public enum Show
    {

        [System.Xml.Serialization.XmlEnumAttribute("new")]
        New,

        [System.Xml.Serialization.XmlEnumAttribute("replace")]
        Replace,

        [System.Xml.Serialization.XmlEnumAttribute("embed")]
        Embed,

        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("XmlSchemaClassGenerator", "2.0.0.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute("actuate", Namespace = "http://www.w3.org/1999/xlink")]
    public enum Actuate
    {

        [System.Xml.Serialization.XmlEnumAttribute("onRequest")]
        OnRequest,

        [System.Xml.Serialization.XmlEnumAttribute("onLoad")]
        OnLoad,

        [System.Xml.Serialization.XmlEnumAttribute("other")]
        Other,

        [System.Xml.Serialization.XmlEnumAttribute("none")]
        None,
    }
}
